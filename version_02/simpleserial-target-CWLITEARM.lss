
simpleserial-target-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  08003d30  08003d30  00013d30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004008  08004008  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004008  08004008  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004008  08004008  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004008  08004008  00014008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800400c  0800400c  0001400c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000068  08004078  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  2000030c  08004078  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000055f4  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f83  00000000  00000000  00025686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000035e7  00000000  00000000  00026609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000258  00000000  00000000  00029bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006b0  00000000  00000000  00029e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003660  00000000  00000000  0002a4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000016bc  00000000  00000000  0002db58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004d  00000000  00000000  0002f214  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016e8  00000000  00000000  0002f264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000021c  00000000  00000000  0003094c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000244  00000000  00000000  00030b68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003d14 	.word	0x08003d14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003d14 	.word	0x08003d14

080001d0 <__aeabi_fmul>:
 80001d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80001d8:	bf1e      	ittt	ne
 80001da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80001de:	ea92 0f0c 	teqne	r2, ip
 80001e2:	ea93 0f0c 	teqne	r3, ip
 80001e6:	d06f      	beq.n	80002c8 <__aeabi_fmul+0xf8>
 80001e8:	441a      	add	r2, r3
 80001ea:	ea80 0c01 	eor.w	ip, r0, r1
 80001ee:	0240      	lsls	r0, r0, #9
 80001f0:	bf18      	it	ne
 80001f2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001f6:	d01e      	beq.n	8000236 <__aeabi_fmul+0x66>
 80001f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80001fc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000200:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000204:	fba0 3101 	umull	r3, r1, r0, r1
 8000208:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800020c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000210:	bf3e      	ittt	cc
 8000212:	0049      	lslcc	r1, r1, #1
 8000214:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000218:	005b      	lslcc	r3, r3, #1
 800021a:	ea40 0001 	orr.w	r0, r0, r1
 800021e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000222:	2afd      	cmp	r2, #253	; 0xfd
 8000224:	d81d      	bhi.n	8000262 <__aeabi_fmul+0x92>
 8000226:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800022a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800022e:	bf08      	it	eq
 8000230:	f020 0001 	biceq.w	r0, r0, #1
 8000234:	4770      	bx	lr
 8000236:	f090 0f00 	teq	r0, #0
 800023a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800023e:	bf08      	it	eq
 8000240:	0249      	lsleq	r1, r1, #9
 8000242:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000246:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800024a:	3a7f      	subs	r2, #127	; 0x7f
 800024c:	bfc2      	ittt	gt
 800024e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000252:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000256:	4770      	bxgt	lr
 8000258:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800025c:	f04f 0300 	mov.w	r3, #0
 8000260:	3a01      	subs	r2, #1
 8000262:	dc5d      	bgt.n	8000320 <__aeabi_fmul+0x150>
 8000264:	f112 0f19 	cmn.w	r2, #25
 8000268:	bfdc      	itt	le
 800026a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800026e:	4770      	bxle	lr
 8000270:	f1c2 0200 	rsb	r2, r2, #0
 8000274:	0041      	lsls	r1, r0, #1
 8000276:	fa21 f102 	lsr.w	r1, r1, r2
 800027a:	f1c2 0220 	rsb	r2, r2, #32
 800027e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000282:	ea5f 0031 	movs.w	r0, r1, rrx
 8000286:	f140 0000 	adc.w	r0, r0, #0
 800028a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800028e:	bf08      	it	eq
 8000290:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000294:	4770      	bx	lr
 8000296:	f092 0f00 	teq	r2, #0
 800029a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800029e:	bf02      	ittt	eq
 80002a0:	0040      	lsleq	r0, r0, #1
 80002a2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80002a6:	3a01      	subeq	r2, #1
 80002a8:	d0f9      	beq.n	800029e <__aeabi_fmul+0xce>
 80002aa:	ea40 000c 	orr.w	r0, r0, ip
 80002ae:	f093 0f00 	teq	r3, #0
 80002b2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80002b6:	bf02      	ittt	eq
 80002b8:	0049      	lsleq	r1, r1, #1
 80002ba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80002be:	3b01      	subeq	r3, #1
 80002c0:	d0f9      	beq.n	80002b6 <__aeabi_fmul+0xe6>
 80002c2:	ea41 010c 	orr.w	r1, r1, ip
 80002c6:	e78f      	b.n	80001e8 <__aeabi_fmul+0x18>
 80002c8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80002cc:	ea92 0f0c 	teq	r2, ip
 80002d0:	bf18      	it	ne
 80002d2:	ea93 0f0c 	teqne	r3, ip
 80002d6:	d00a      	beq.n	80002ee <__aeabi_fmul+0x11e>
 80002d8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80002dc:	bf18      	it	ne
 80002de:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80002e2:	d1d8      	bne.n	8000296 <__aeabi_fmul+0xc6>
 80002e4:	ea80 0001 	eor.w	r0, r0, r1
 80002e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002ec:	4770      	bx	lr
 80002ee:	f090 0f00 	teq	r0, #0
 80002f2:	bf17      	itett	ne
 80002f4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80002f8:	4608      	moveq	r0, r1
 80002fa:	f091 0f00 	teqne	r1, #0
 80002fe:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000302:	d014      	beq.n	800032e <__aeabi_fmul+0x15e>
 8000304:	ea92 0f0c 	teq	r2, ip
 8000308:	d101      	bne.n	800030e <__aeabi_fmul+0x13e>
 800030a:	0242      	lsls	r2, r0, #9
 800030c:	d10f      	bne.n	800032e <__aeabi_fmul+0x15e>
 800030e:	ea93 0f0c 	teq	r3, ip
 8000312:	d103      	bne.n	800031c <__aeabi_fmul+0x14c>
 8000314:	024b      	lsls	r3, r1, #9
 8000316:	bf18      	it	ne
 8000318:	4608      	movne	r0, r1
 800031a:	d108      	bne.n	800032e <__aeabi_fmul+0x15e>
 800031c:	ea80 0001 	eor.w	r0, r0, r1
 8000320:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000324:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000328:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800032c:	4770      	bx	lr
 800032e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000332:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000336:	4770      	bx	lr

08000338 <__aeabi_drsub>:
 8000338:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800033c:	e002      	b.n	8000344 <__adddf3>
 800033e:	bf00      	nop

08000340 <__aeabi_dsub>:
 8000340:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000344 <__adddf3>:
 8000344:	b530      	push	{r4, r5, lr}
 8000346:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800034a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800034e:	ea94 0f05 	teq	r4, r5
 8000352:	bf08      	it	eq
 8000354:	ea90 0f02 	teqeq	r0, r2
 8000358:	bf1f      	itttt	ne
 800035a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800035e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000362:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000366:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800036a:	f000 80e2 	beq.w	8000532 <__adddf3+0x1ee>
 800036e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000372:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000376:	bfb8      	it	lt
 8000378:	426d      	neglt	r5, r5
 800037a:	dd0c      	ble.n	8000396 <__adddf3+0x52>
 800037c:	442c      	add	r4, r5
 800037e:	ea80 0202 	eor.w	r2, r0, r2
 8000382:	ea81 0303 	eor.w	r3, r1, r3
 8000386:	ea82 0000 	eor.w	r0, r2, r0
 800038a:	ea83 0101 	eor.w	r1, r3, r1
 800038e:	ea80 0202 	eor.w	r2, r0, r2
 8000392:	ea81 0303 	eor.w	r3, r1, r3
 8000396:	2d36      	cmp	r5, #54	; 0x36
 8000398:	bf88      	it	hi
 800039a:	bd30      	pophi	{r4, r5, pc}
 800039c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003ac:	d002      	beq.n	80003b4 <__adddf3+0x70>
 80003ae:	4240      	negs	r0, r0
 80003b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c0:	d002      	beq.n	80003c8 <__adddf3+0x84>
 80003c2:	4252      	negs	r2, r2
 80003c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c8:	ea94 0f05 	teq	r4, r5
 80003cc:	f000 80a7 	beq.w	800051e <__adddf3+0x1da>
 80003d0:	f1a4 0401 	sub.w	r4, r4, #1
 80003d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d8:	db0d      	blt.n	80003f6 <__adddf3+0xb2>
 80003da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003de:	fa22 f205 	lsr.w	r2, r2, r5
 80003e2:	1880      	adds	r0, r0, r2
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80003ec:	1880      	adds	r0, r0, r2
 80003ee:	fa43 f305 	asr.w	r3, r3, r5
 80003f2:	4159      	adcs	r1, r3
 80003f4:	e00e      	b.n	8000414 <__adddf3+0xd0>
 80003f6:	f1a5 0520 	sub.w	r5, r5, #32
 80003fa:	f10e 0e20 	add.w	lr, lr, #32
 80003fe:	2a01      	cmp	r2, #1
 8000400:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000404:	bf28      	it	cs
 8000406:	f04c 0c02 	orrcs.w	ip, ip, #2
 800040a:	fa43 f305 	asr.w	r3, r3, r5
 800040e:	18c0      	adds	r0, r0, r3
 8000410:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000414:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000418:	d507      	bpl.n	800042a <__adddf3+0xe6>
 800041a:	f04f 0e00 	mov.w	lr, #0
 800041e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000422:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000426:	eb6e 0101 	sbc.w	r1, lr, r1
 800042a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800042e:	d31b      	bcc.n	8000468 <__adddf3+0x124>
 8000430:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000434:	d30c      	bcc.n	8000450 <__adddf3+0x10c>
 8000436:	0849      	lsrs	r1, r1, #1
 8000438:	ea5f 0030 	movs.w	r0, r0, rrx
 800043c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000440:	f104 0401 	add.w	r4, r4, #1
 8000444:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000448:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800044c:	f080 809a 	bcs.w	8000584 <__adddf3+0x240>
 8000450:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000454:	bf08      	it	eq
 8000456:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800045a:	f150 0000 	adcs.w	r0, r0, #0
 800045e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000462:	ea41 0105 	orr.w	r1, r1, r5
 8000466:	bd30      	pop	{r4, r5, pc}
 8000468:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800046c:	4140      	adcs	r0, r0
 800046e:	eb41 0101 	adc.w	r1, r1, r1
 8000472:	3c01      	subs	r4, #1
 8000474:	bf28      	it	cs
 8000476:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800047a:	d2e9      	bcs.n	8000450 <__adddf3+0x10c>
 800047c:	f091 0f00 	teq	r1, #0
 8000480:	bf04      	itt	eq
 8000482:	4601      	moveq	r1, r0
 8000484:	2000      	moveq	r0, #0
 8000486:	fab1 f381 	clz	r3, r1
 800048a:	bf08      	it	eq
 800048c:	3320      	addeq	r3, #32
 800048e:	f1a3 030b 	sub.w	r3, r3, #11
 8000492:	f1b3 0220 	subs.w	r2, r3, #32
 8000496:	da0c      	bge.n	80004b2 <__adddf3+0x16e>
 8000498:	320c      	adds	r2, #12
 800049a:	dd08      	ble.n	80004ae <__adddf3+0x16a>
 800049c:	f102 0c14 	add.w	ip, r2, #20
 80004a0:	f1c2 020c 	rsb	r2, r2, #12
 80004a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a8:	fa21 f102 	lsr.w	r1, r1, r2
 80004ac:	e00c      	b.n	80004c8 <__adddf3+0x184>
 80004ae:	f102 0214 	add.w	r2, r2, #20
 80004b2:	bfd8      	it	le
 80004b4:	f1c2 0c20 	rsble	ip, r2, #32
 80004b8:	fa01 f102 	lsl.w	r1, r1, r2
 80004bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c0:	bfdc      	itt	le
 80004c2:	ea41 010c 	orrle.w	r1, r1, ip
 80004c6:	4090      	lslle	r0, r2
 80004c8:	1ae4      	subs	r4, r4, r3
 80004ca:	bfa2      	ittt	ge
 80004cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d0:	4329      	orrge	r1, r5
 80004d2:	bd30      	popge	{r4, r5, pc}
 80004d4:	ea6f 0404 	mvn.w	r4, r4
 80004d8:	3c1f      	subs	r4, #31
 80004da:	da1c      	bge.n	8000516 <__adddf3+0x1d2>
 80004dc:	340c      	adds	r4, #12
 80004de:	dc0e      	bgt.n	80004fe <__adddf3+0x1ba>
 80004e0:	f104 0414 	add.w	r4, r4, #20
 80004e4:	f1c4 0220 	rsb	r2, r4, #32
 80004e8:	fa20 f004 	lsr.w	r0, r0, r4
 80004ec:	fa01 f302 	lsl.w	r3, r1, r2
 80004f0:	ea40 0003 	orr.w	r0, r0, r3
 80004f4:	fa21 f304 	lsr.w	r3, r1, r4
 80004f8:	ea45 0103 	orr.w	r1, r5, r3
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	f1c4 040c 	rsb	r4, r4, #12
 8000502:	f1c4 0220 	rsb	r2, r4, #32
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 f304 	lsl.w	r3, r1, r4
 800050e:	ea40 0003 	orr.w	r0, r0, r3
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	fa21 f004 	lsr.w	r0, r1, r4
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	f094 0f00 	teq	r4, #0
 8000522:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000526:	bf06      	itte	eq
 8000528:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800052c:	3401      	addeq	r4, #1
 800052e:	3d01      	subne	r5, #1
 8000530:	e74e      	b.n	80003d0 <__adddf3+0x8c>
 8000532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000536:	bf18      	it	ne
 8000538:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800053c:	d029      	beq.n	8000592 <__adddf3+0x24e>
 800053e:	ea94 0f05 	teq	r4, r5
 8000542:	bf08      	it	eq
 8000544:	ea90 0f02 	teqeq	r0, r2
 8000548:	d005      	beq.n	8000556 <__adddf3+0x212>
 800054a:	ea54 0c00 	orrs.w	ip, r4, r0
 800054e:	bf04      	itt	eq
 8000550:	4619      	moveq	r1, r3
 8000552:	4610      	moveq	r0, r2
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	ea91 0f03 	teq	r1, r3
 800055a:	bf1e      	ittt	ne
 800055c:	2100      	movne	r1, #0
 800055e:	2000      	movne	r0, #0
 8000560:	bd30      	popne	{r4, r5, pc}
 8000562:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000566:	d105      	bne.n	8000574 <__adddf3+0x230>
 8000568:	0040      	lsls	r0, r0, #1
 800056a:	4149      	adcs	r1, r1
 800056c:	bf28      	it	cs
 800056e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000572:	bd30      	pop	{r4, r5, pc}
 8000574:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000578:	bf3c      	itt	cc
 800057a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800057e:	bd30      	popcc	{r4, r5, pc}
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000588:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800058c:	f04f 0000 	mov.w	r0, #0
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000596:	bf1a      	itte	ne
 8000598:	4619      	movne	r1, r3
 800059a:	4610      	movne	r0, r2
 800059c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a0:	bf1c      	itt	ne
 80005a2:	460b      	movne	r3, r1
 80005a4:	4602      	movne	r2, r0
 80005a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005aa:	bf06      	itte	eq
 80005ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b0:	ea91 0f03 	teqeq	r1, r3
 80005b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	bf00      	nop

080005bc <__aeabi_ui2d>:
 80005bc:	f090 0f00 	teq	r0, #0
 80005c0:	bf04      	itt	eq
 80005c2:	2100      	moveq	r1, #0
 80005c4:	4770      	bxeq	lr
 80005c6:	b530      	push	{r4, r5, lr}
 80005c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d0:	f04f 0500 	mov.w	r5, #0
 80005d4:	f04f 0100 	mov.w	r1, #0
 80005d8:	e750      	b.n	800047c <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_i2d>:
 80005dc:	f090 0f00 	teq	r0, #0
 80005e0:	bf04      	itt	eq
 80005e2:	2100      	moveq	r1, #0
 80005e4:	4770      	bxeq	lr
 80005e6:	b530      	push	{r4, r5, lr}
 80005e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005f4:	bf48      	it	mi
 80005f6:	4240      	negmi	r0, r0
 80005f8:	f04f 0100 	mov.w	r1, #0
 80005fc:	e73e      	b.n	800047c <__adddf3+0x138>
 80005fe:	bf00      	nop

08000600 <__aeabi_f2d>:
 8000600:	0042      	lsls	r2, r0, #1
 8000602:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000606:	ea4f 0131 	mov.w	r1, r1, rrx
 800060a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800060e:	bf1f      	itttt	ne
 8000610:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000614:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000618:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800061c:	4770      	bxne	lr
 800061e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000622:	bf08      	it	eq
 8000624:	4770      	bxeq	lr
 8000626:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800062a:	bf04      	itt	eq
 800062c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000638:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800063c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000640:	e71c      	b.n	800047c <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_ul2d>:
 8000644:	ea50 0201 	orrs.w	r2, r0, r1
 8000648:	bf08      	it	eq
 800064a:	4770      	bxeq	lr
 800064c:	b530      	push	{r4, r5, lr}
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	e00a      	b.n	800066a <__aeabi_l2d+0x16>

08000654 <__aeabi_l2d>:
 8000654:	ea50 0201 	orrs.w	r2, r0, r1
 8000658:	bf08      	it	eq
 800065a:	4770      	bxeq	lr
 800065c:	b530      	push	{r4, r5, lr}
 800065e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000662:	d502      	bpl.n	800066a <__aeabi_l2d+0x16>
 8000664:	4240      	negs	r0, r0
 8000666:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800066a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800066e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000672:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000676:	f43f aed8 	beq.w	800042a <__adddf3+0xe6>
 800067a:	f04f 0203 	mov.w	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000692:	f1c2 0320 	rsb	r3, r2, #32
 8000696:	fa00 fc03 	lsl.w	ip, r0, r3
 800069a:	fa20 f002 	lsr.w	r0, r0, r2
 800069e:	fa01 fe03 	lsl.w	lr, r1, r3
 80006a2:	ea40 000e 	orr.w	r0, r0, lr
 80006a6:	fa21 f102 	lsr.w	r1, r1, r2
 80006aa:	4414      	add	r4, r2
 80006ac:	e6bd      	b.n	800042a <__adddf3+0xe6>
 80006ae:	bf00      	nop

080006b0 <__aeabi_dmul>:
 80006b0:	b570      	push	{r4, r5, r6, lr}
 80006b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006be:	bf1d      	ittte	ne
 80006c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006c4:	ea94 0f0c 	teqne	r4, ip
 80006c8:	ea95 0f0c 	teqne	r5, ip
 80006cc:	f000 f8de 	bleq	800088c <__aeabi_dmul+0x1dc>
 80006d0:	442c      	add	r4, r5
 80006d2:	ea81 0603 	eor.w	r6, r1, r3
 80006d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006e2:	bf18      	it	ne
 80006e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f0:	d038      	beq.n	8000764 <__aeabi_dmul+0xb4>
 80006f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000702:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000706:	f04f 0600 	mov.w	r6, #0
 800070a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800070e:	f09c 0f00 	teq	ip, #0
 8000712:	bf18      	it	ne
 8000714:	f04e 0e01 	orrne.w	lr, lr, #1
 8000718:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800071c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000720:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000724:	d204      	bcs.n	8000730 <__aeabi_dmul+0x80>
 8000726:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800072a:	416d      	adcs	r5, r5
 800072c:	eb46 0606 	adc.w	r6, r6, r6
 8000730:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000734:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000738:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800073c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000740:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000744:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000748:	bf88      	it	hi
 800074a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800074e:	d81e      	bhi.n	800078e <__aeabi_dmul+0xde>
 8000750:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000754:	bf08      	it	eq
 8000756:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800075a:	f150 0000 	adcs.w	r0, r0, #0
 800075e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000768:	ea46 0101 	orr.w	r1, r6, r1
 800076c:	ea40 0002 	orr.w	r0, r0, r2
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000778:	bfc2      	ittt	gt
 800077a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800077e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000782:	bd70      	popgt	{r4, r5, r6, pc}
 8000784:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000788:	f04f 0e00 	mov.w	lr, #0
 800078c:	3c01      	subs	r4, #1
 800078e:	f300 80ab 	bgt.w	80008e8 <__aeabi_dmul+0x238>
 8000792:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000796:	bfde      	ittt	le
 8000798:	2000      	movle	r0, #0
 800079a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800079e:	bd70      	pople	{r4, r5, r6, pc}
 80007a0:	f1c4 0400 	rsb	r4, r4, #0
 80007a4:	3c20      	subs	r4, #32
 80007a6:	da35      	bge.n	8000814 <__aeabi_dmul+0x164>
 80007a8:	340c      	adds	r4, #12
 80007aa:	dc1b      	bgt.n	80007e4 <__aeabi_dmul+0x134>
 80007ac:	f104 0414 	add.w	r4, r4, #20
 80007b0:	f1c4 0520 	rsb	r5, r4, #32
 80007b4:	fa00 f305 	lsl.w	r3, r0, r5
 80007b8:	fa20 f004 	lsr.w	r0, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea40 0002 	orr.w	r0, r0, r2
 80007c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d0:	fa21 f604 	lsr.w	r6, r1, r4
 80007d4:	eb42 0106 	adc.w	r1, r2, r6
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f1c4 040c 	rsb	r4, r4, #12
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f304 	lsl.w	r3, r0, r4
 80007f0:	fa20 f005 	lsr.w	r0, r0, r5
 80007f4:	fa01 f204 	lsl.w	r2, r1, r4
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000804:	f141 0100 	adc.w	r1, r1, #0
 8000808:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800080c:	bf08      	it	eq
 800080e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000812:	bd70      	pop	{r4, r5, r6, pc}
 8000814:	f1c4 0520 	rsb	r5, r4, #32
 8000818:	fa00 f205 	lsl.w	r2, r0, r5
 800081c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000820:	fa20 f304 	lsr.w	r3, r0, r4
 8000824:	fa01 f205 	lsl.w	r2, r1, r5
 8000828:	ea43 0302 	orr.w	r3, r3, r2
 800082c:	fa21 f004 	lsr.w	r0, r1, r4
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	fa21 f204 	lsr.w	r2, r1, r4
 8000838:	ea20 0002 	bic.w	r0, r0, r2
 800083c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f094 0f00 	teq	r4, #0
 8000850:	d10f      	bne.n	8000872 <__aeabi_dmul+0x1c2>
 8000852:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000856:	0040      	lsls	r0, r0, #1
 8000858:	eb41 0101 	adc.w	r1, r1, r1
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	bf08      	it	eq
 8000862:	3c01      	subeq	r4, #1
 8000864:	d0f7      	beq.n	8000856 <__aeabi_dmul+0x1a6>
 8000866:	ea41 0106 	orr.w	r1, r1, r6
 800086a:	f095 0f00 	teq	r5, #0
 800086e:	bf18      	it	ne
 8000870:	4770      	bxne	lr
 8000872:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000876:	0052      	lsls	r2, r2, #1
 8000878:	eb43 0303 	adc.w	r3, r3, r3
 800087c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000880:	bf08      	it	eq
 8000882:	3d01      	subeq	r5, #1
 8000884:	d0f7      	beq.n	8000876 <__aeabi_dmul+0x1c6>
 8000886:	ea43 0306 	orr.w	r3, r3, r6
 800088a:	4770      	bx	lr
 800088c:	ea94 0f0c 	teq	r4, ip
 8000890:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000894:	bf18      	it	ne
 8000896:	ea95 0f0c 	teqne	r5, ip
 800089a:	d00c      	beq.n	80008b6 <__aeabi_dmul+0x206>
 800089c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a0:	bf18      	it	ne
 80008a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008a6:	d1d1      	bne.n	800084c <__aeabi_dmul+0x19c>
 80008a8:	ea81 0103 	eor.w	r1, r1, r3
 80008ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b0:	f04f 0000 	mov.w	r0, #0
 80008b4:	bd70      	pop	{r4, r5, r6, pc}
 80008b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008ba:	bf06      	itte	eq
 80008bc:	4610      	moveq	r0, r2
 80008be:	4619      	moveq	r1, r3
 80008c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008c4:	d019      	beq.n	80008fa <__aeabi_dmul+0x24a>
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	d102      	bne.n	80008d2 <__aeabi_dmul+0x222>
 80008cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d0:	d113      	bne.n	80008fa <__aeabi_dmul+0x24a>
 80008d2:	ea95 0f0c 	teq	r5, ip
 80008d6:	d105      	bne.n	80008e4 <__aeabi_dmul+0x234>
 80008d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008dc:	bf1c      	itt	ne
 80008de:	4610      	movne	r0, r2
 80008e0:	4619      	movne	r1, r3
 80008e2:	d10a      	bne.n	80008fa <__aeabi_dmul+0x24a>
 80008e4:	ea81 0103 	eor.w	r1, r1, r3
 80008e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008f4:	f04f 0000 	mov.w	r0, #0
 80008f8:	bd70      	pop	{r4, r5, r6, pc}
 80008fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000902:	bd70      	pop	{r4, r5, r6, pc}

08000904 <__aeabi_ddiv>:
 8000904:	b570      	push	{r4, r5, r6, lr}
 8000906:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800090a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800090e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000912:	bf1d      	ittte	ne
 8000914:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000918:	ea94 0f0c 	teqne	r4, ip
 800091c:	ea95 0f0c 	teqne	r5, ip
 8000920:	f000 f8a7 	bleq	8000a72 <__aeabi_ddiv+0x16e>
 8000924:	eba4 0405 	sub.w	r4, r4, r5
 8000928:	ea81 0e03 	eor.w	lr, r1, r3
 800092c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000930:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000934:	f000 8088 	beq.w	8000a48 <__aeabi_ddiv+0x144>
 8000938:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800093c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000940:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000944:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000948:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800094c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000950:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000954:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000958:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800095c:	429d      	cmp	r5, r3
 800095e:	bf08      	it	eq
 8000960:	4296      	cmpeq	r6, r2
 8000962:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000966:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800096a:	d202      	bcs.n	8000972 <__aeabi_ddiv+0x6e>
 800096c:	085b      	lsrs	r3, r3, #1
 800096e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000972:	1ab6      	subs	r6, r6, r2
 8000974:	eb65 0503 	sbc.w	r5, r5, r3
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	ea4f 0232 	mov.w	r2, r2, rrx
 800097e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000982:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 000c 	orrcs.w	r0, r0, ip
 8000998:	085b      	lsrs	r3, r3, #1
 800099a:	ea4f 0232 	mov.w	r2, r2, rrx
 800099e:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009a6:	bf22      	ittt	cs
 80009a8:	1ab6      	subcs	r6, r6, r2
 80009aa:	4675      	movcs	r5, lr
 80009ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009be:	bf22      	ittt	cs
 80009c0:	1ab6      	subcs	r6, r6, r2
 80009c2:	4675      	movcs	r5, lr
 80009c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c8:	085b      	lsrs	r3, r3, #1
 80009ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80009e4:	d018      	beq.n	8000a18 <__aeabi_ddiv+0x114>
 80009e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a02:	d1c0      	bne.n	8000986 <__aeabi_ddiv+0x82>
 8000a04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a08:	d10b      	bne.n	8000a22 <__aeabi_ddiv+0x11e>
 8000a0a:	ea41 0100 	orr.w	r1, r1, r0
 8000a0e:	f04f 0000 	mov.w	r0, #0
 8000a12:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a16:	e7b6      	b.n	8000986 <__aeabi_ddiv+0x82>
 8000a18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a1c:	bf04      	itt	eq
 8000a1e:	4301      	orreq	r1, r0
 8000a20:	2000      	moveq	r0, #0
 8000a22:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a26:	bf88      	it	hi
 8000a28:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a2c:	f63f aeaf 	bhi.w	800078e <__aeabi_dmul+0xde>
 8000a30:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a34:	bf04      	itt	eq
 8000a36:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a3a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a3e:	f150 0000 	adcs.w	r0, r0, #0
 8000a42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a46:	bd70      	pop	{r4, r5, r6, pc}
 8000a48:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a4c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a50:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a54:	bfc2      	ittt	gt
 8000a56:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a5a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a5e:	bd70      	popgt	{r4, r5, r6, pc}
 8000a60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a64:	f04f 0e00 	mov.w	lr, #0
 8000a68:	3c01      	subs	r4, #1
 8000a6a:	e690      	b.n	800078e <__aeabi_dmul+0xde>
 8000a6c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a70:	e68d      	b.n	800078e <__aeabi_dmul+0xde>
 8000a72:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a76:	ea94 0f0c 	teq	r4, ip
 8000a7a:	bf08      	it	eq
 8000a7c:	ea95 0f0c 	teqeq	r5, ip
 8000a80:	f43f af3b 	beq.w	80008fa <__aeabi_dmul+0x24a>
 8000a84:	ea94 0f0c 	teq	r4, ip
 8000a88:	d10a      	bne.n	8000aa0 <__aeabi_ddiv+0x19c>
 8000a8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a8e:	f47f af34 	bne.w	80008fa <__aeabi_dmul+0x24a>
 8000a92:	ea95 0f0c 	teq	r5, ip
 8000a96:	f47f af25 	bne.w	80008e4 <__aeabi_dmul+0x234>
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	e72c      	b.n	80008fa <__aeabi_dmul+0x24a>
 8000aa0:	ea95 0f0c 	teq	r5, ip
 8000aa4:	d106      	bne.n	8000ab4 <__aeabi_ddiv+0x1b0>
 8000aa6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aaa:	f43f aefd 	beq.w	80008a8 <__aeabi_dmul+0x1f8>
 8000aae:	4610      	mov	r0, r2
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	e722      	b.n	80008fa <__aeabi_dmul+0x24a>
 8000ab4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab8:	bf18      	it	ne
 8000aba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000abe:	f47f aec5 	bne.w	800084c <__aeabi_dmul+0x19c>
 8000ac2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ac6:	f47f af0d 	bne.w	80008e4 <__aeabi_dmul+0x234>
 8000aca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ace:	f47f aeeb 	bne.w	80008a8 <__aeabi_dmul+0x1f8>
 8000ad2:	e712      	b.n	80008fa <__aeabi_dmul+0x24a>

08000ad4 <__gedf2>:
 8000ad4:	f04f 3cff 	mov.w	ip, #4294967295
 8000ad8:	e006      	b.n	8000ae8 <__cmpdf2+0x4>
 8000ada:	bf00      	nop

08000adc <__ledf2>:
 8000adc:	f04f 0c01 	mov.w	ip, #1
 8000ae0:	e002      	b.n	8000ae8 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__cmpdf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	bf18      	it	ne
 8000afa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000afe:	d01b      	beq.n	8000b38 <__cmpdf2+0x54>
 8000b00:	b001      	add	sp, #4
 8000b02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b06:	bf0c      	ite	eq
 8000b08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b0c:	ea91 0f03 	teqne	r1, r3
 8000b10:	bf02      	ittt	eq
 8000b12:	ea90 0f02 	teqeq	r0, r2
 8000b16:	2000      	moveq	r0, #0
 8000b18:	4770      	bxeq	lr
 8000b1a:	f110 0f00 	cmn.w	r0, #0
 8000b1e:	ea91 0f03 	teq	r1, r3
 8000b22:	bf58      	it	pl
 8000b24:	4299      	cmppl	r1, r3
 8000b26:	bf08      	it	eq
 8000b28:	4290      	cmpeq	r0, r2
 8000b2a:	bf2c      	ite	cs
 8000b2c:	17d8      	asrcs	r0, r3, #31
 8000b2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b32:	f040 0001 	orr.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b40:	d102      	bne.n	8000b48 <__cmpdf2+0x64>
 8000b42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b46:	d107      	bne.n	8000b58 <__cmpdf2+0x74>
 8000b48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b50:	d1d6      	bne.n	8000b00 <__cmpdf2+0x1c>
 8000b52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b56:	d0d3      	beq.n	8000b00 <__cmpdf2+0x1c>
 8000b58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_cdrcmple>:
 8000b60:	4684      	mov	ip, r0
 8000b62:	4610      	mov	r0, r2
 8000b64:	4662      	mov	r2, ip
 8000b66:	468c      	mov	ip, r1
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4663      	mov	r3, ip
 8000b6c:	e000      	b.n	8000b70 <__aeabi_cdcmpeq>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_cdcmpeq>:
 8000b70:	b501      	push	{r0, lr}
 8000b72:	f7ff ffb7 	bl	8000ae4 <__cmpdf2>
 8000b76:	2800      	cmp	r0, #0
 8000b78:	bf48      	it	mi
 8000b7a:	f110 0f00 	cmnmi.w	r0, #0
 8000b7e:	bd01      	pop	{r0, pc}

08000b80 <__aeabi_dcmpeq>:
 8000b80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b84:	f7ff fff4 	bl	8000b70 <__aeabi_cdcmpeq>
 8000b88:	bf0c      	ite	eq
 8000b8a:	2001      	moveq	r0, #1
 8000b8c:	2000      	movne	r0, #0
 8000b8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b92:	bf00      	nop

08000b94 <__aeabi_dcmplt>:
 8000b94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b98:	f7ff ffea 	bl	8000b70 <__aeabi_cdcmpeq>
 8000b9c:	bf34      	ite	cc
 8000b9e:	2001      	movcc	r0, #1
 8000ba0:	2000      	movcs	r0, #0
 8000ba2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_dcmple>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff ffe0 	bl	8000b70 <__aeabi_cdcmpeq>
 8000bb0:	bf94      	ite	ls
 8000bb2:	2001      	movls	r0, #1
 8000bb4:	2000      	movhi	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_dcmpge>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff ffce 	bl	8000b60 <__aeabi_cdrcmple>
 8000bc4:	bf94      	ite	ls
 8000bc6:	2001      	movls	r0, #1
 8000bc8:	2000      	movhi	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_dcmpgt>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffc4 	bl	8000b60 <__aeabi_cdrcmple>
 8000bd8:	bf34      	ite	cc
 8000bda:	2001      	movcc	r0, #1
 8000bdc:	2000      	movcs	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_d2iz>:
 8000be4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bec:	d215      	bcs.n	8000c1a <__aeabi_d2iz+0x36>
 8000bee:	d511      	bpl.n	8000c14 <__aeabi_d2iz+0x30>
 8000bf0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf8:	d912      	bls.n	8000c20 <__aeabi_d2iz+0x3c>
 8000bfa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	bf18      	it	ne
 8000c10:	4240      	negne	r0, r0
 8000c12:	4770      	bx	lr
 8000c14:	f04f 0000 	mov.w	r0, #0
 8000c18:	4770      	bx	lr
 8000c1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1e:	d105      	bne.n	8000c2c <__aeabi_d2iz+0x48>
 8000c20:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c24:	bf08      	it	eq
 8000c26:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c2a:	4770      	bx	lr
 8000c2c:	f04f 0000 	mov.w	r0, #0
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <__aeabi_d2f>:
 8000c34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c38:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c3c:	bf24      	itt	cs
 8000c3e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c42:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c46:	d90d      	bls.n	8000c64 <__aeabi_d2f+0x30>
 8000c48:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c4c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c50:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c54:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c58:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c5c:	bf08      	it	eq
 8000c5e:	f020 0001 	biceq.w	r0, r0, #1
 8000c62:	4770      	bx	lr
 8000c64:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c68:	d121      	bne.n	8000cae <__aeabi_d2f+0x7a>
 8000c6a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c6e:	bfbc      	itt	lt
 8000c70:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c74:	4770      	bxlt	lr
 8000c76:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7e:	f1c2 0218 	rsb	r2, r2, #24
 8000c82:	f1c2 0c20 	rsb	ip, r2, #32
 8000c86:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8e:	bf18      	it	ne
 8000c90:	f040 0001 	orrne.w	r0, r0, #1
 8000c94:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c98:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c9c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca0:	ea40 000c 	orr.w	r0, r0, ip
 8000ca4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cac:	e7cc      	b.n	8000c48 <__aeabi_d2f+0x14>
 8000cae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb2:	d107      	bne.n	8000cc4 <__aeabi_d2f+0x90>
 8000cb4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb8:	bf1e      	ittt	ne
 8000cba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cbe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc2:	4770      	bxne	lr
 8000cc4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cc8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ccc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_frsub>:
 8000cd4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cd8:	e002      	b.n	8000ce0 <__addsf3>
 8000cda:	bf00      	nop

08000cdc <__aeabi_fsub>:
 8000cdc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ce0 <__addsf3>:
 8000ce0:	0042      	lsls	r2, r0, #1
 8000ce2:	bf1f      	itttt	ne
 8000ce4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce8:	ea92 0f03 	teqne	r2, r3
 8000cec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cf0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf4:	d06a      	beq.n	8000dcc <__addsf3+0xec>
 8000cf6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cfa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfe:	bfc1      	itttt	gt
 8000d00:	18d2      	addgt	r2, r2, r3
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	4048      	eorgt	r0, r1
 8000d06:	4041      	eorgt	r1, r0
 8000d08:	bfb8      	it	lt
 8000d0a:	425b      	neglt	r3, r3
 8000d0c:	2b19      	cmp	r3, #25
 8000d0e:	bf88      	it	hi
 8000d10:	4770      	bxhi	lr
 8000d12:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d1e:	bf18      	it	ne
 8000d20:	4240      	negne	r0, r0
 8000d22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d26:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d2a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d2e:	bf18      	it	ne
 8000d30:	4249      	negne	r1, r1
 8000d32:	ea92 0f03 	teq	r2, r3
 8000d36:	d03f      	beq.n	8000db8 <__addsf3+0xd8>
 8000d38:	f1a2 0201 	sub.w	r2, r2, #1
 8000d3c:	fa41 fc03 	asr.w	ip, r1, r3
 8000d40:	eb10 000c 	adds.w	r0, r0, ip
 8000d44:	f1c3 0320 	rsb	r3, r3, #32
 8000d48:	fa01 f103 	lsl.w	r1, r1, r3
 8000d4c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d50:	d502      	bpl.n	8000d58 <__addsf3+0x78>
 8000d52:	4249      	negs	r1, r1
 8000d54:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d58:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d5c:	d313      	bcc.n	8000d86 <__addsf3+0xa6>
 8000d5e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d62:	d306      	bcc.n	8000d72 <__addsf3+0x92>
 8000d64:	0840      	lsrs	r0, r0, #1
 8000d66:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d6a:	f102 0201 	add.w	r2, r2, #1
 8000d6e:	2afe      	cmp	r2, #254	; 0xfe
 8000d70:	d251      	bcs.n	8000e16 <__addsf3+0x136>
 8000d72:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d7a:	bf08      	it	eq
 8000d7c:	f020 0001 	biceq.w	r0, r0, #1
 8000d80:	ea40 0003 	orr.w	r0, r0, r3
 8000d84:	4770      	bx	lr
 8000d86:	0049      	lsls	r1, r1, #1
 8000d88:	eb40 0000 	adc.w	r0, r0, r0
 8000d8c:	3a01      	subs	r2, #1
 8000d8e:	bf28      	it	cs
 8000d90:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d94:	d2ed      	bcs.n	8000d72 <__addsf3+0x92>
 8000d96:	fab0 fc80 	clz	ip, r0
 8000d9a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9e:	ebb2 020c 	subs.w	r2, r2, ip
 8000da2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da6:	bfaa      	itet	ge
 8000da8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000dac:	4252      	neglt	r2, r2
 8000dae:	4318      	orrge	r0, r3
 8000db0:	bfbc      	itt	lt
 8000db2:	40d0      	lsrlt	r0, r2
 8000db4:	4318      	orrlt	r0, r3
 8000db6:	4770      	bx	lr
 8000db8:	f092 0f00 	teq	r2, #0
 8000dbc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dc0:	bf06      	itte	eq
 8000dc2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dc6:	3201      	addeq	r2, #1
 8000dc8:	3b01      	subne	r3, #1
 8000dca:	e7b5      	b.n	8000d38 <__addsf3+0x58>
 8000dcc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd4:	bf18      	it	ne
 8000dd6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dda:	d021      	beq.n	8000e20 <__addsf3+0x140>
 8000ddc:	ea92 0f03 	teq	r2, r3
 8000de0:	d004      	beq.n	8000dec <__addsf3+0x10c>
 8000de2:	f092 0f00 	teq	r2, #0
 8000de6:	bf08      	it	eq
 8000de8:	4608      	moveq	r0, r1
 8000dea:	4770      	bx	lr
 8000dec:	ea90 0f01 	teq	r0, r1
 8000df0:	bf1c      	itt	ne
 8000df2:	2000      	movne	r0, #0
 8000df4:	4770      	bxne	lr
 8000df6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dfa:	d104      	bne.n	8000e06 <__addsf3+0x126>
 8000dfc:	0040      	lsls	r0, r0, #1
 8000dfe:	bf28      	it	cs
 8000e00:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e04:	4770      	bx	lr
 8000e06:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e0a:	bf3c      	itt	cc
 8000e0c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e10:	4770      	bxcc	lr
 8000e12:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e16:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e1e:	4770      	bx	lr
 8000e20:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e24:	bf16      	itet	ne
 8000e26:	4608      	movne	r0, r1
 8000e28:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e2c:	4601      	movne	r1, r0
 8000e2e:	0242      	lsls	r2, r0, #9
 8000e30:	bf06      	itte	eq
 8000e32:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e36:	ea90 0f01 	teqeq	r0, r1
 8000e3a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e3e:	4770      	bx	lr

08000e40 <__aeabi_ui2f>:
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	e004      	b.n	8000e50 <__aeabi_i2f+0x8>
 8000e46:	bf00      	nop

08000e48 <__aeabi_i2f>:
 8000e48:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e4c:	bf48      	it	mi
 8000e4e:	4240      	negmi	r0, r0
 8000e50:	ea5f 0c00 	movs.w	ip, r0
 8000e54:	bf08      	it	eq
 8000e56:	4770      	bxeq	lr
 8000e58:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e5c:	4601      	mov	r1, r0
 8000e5e:	f04f 0000 	mov.w	r0, #0
 8000e62:	e01c      	b.n	8000e9e <__aeabi_l2f+0x2a>

08000e64 <__aeabi_ul2f>:
 8000e64:	ea50 0201 	orrs.w	r2, r0, r1
 8000e68:	bf08      	it	eq
 8000e6a:	4770      	bxeq	lr
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	e00a      	b.n	8000e88 <__aeabi_l2f+0x14>
 8000e72:	bf00      	nop

08000e74 <__aeabi_l2f>:
 8000e74:	ea50 0201 	orrs.w	r2, r0, r1
 8000e78:	bf08      	it	eq
 8000e7a:	4770      	bxeq	lr
 8000e7c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e80:	d502      	bpl.n	8000e88 <__aeabi_l2f+0x14>
 8000e82:	4240      	negs	r0, r0
 8000e84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e88:	ea5f 0c01 	movs.w	ip, r1
 8000e8c:	bf02      	ittt	eq
 8000e8e:	4684      	moveq	ip, r0
 8000e90:	4601      	moveq	r1, r0
 8000e92:	2000      	moveq	r0, #0
 8000e94:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e98:	bf08      	it	eq
 8000e9a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e9e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ea2:	fabc f28c 	clz	r2, ip
 8000ea6:	3a08      	subs	r2, #8
 8000ea8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000eac:	db10      	blt.n	8000ed0 <__aeabi_l2f+0x5c>
 8000eae:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb8:	f1c2 0220 	rsb	r2, r2, #32
 8000ebc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ec0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec4:	eb43 0002 	adc.w	r0, r3, r2
 8000ec8:	bf08      	it	eq
 8000eca:	f020 0001 	biceq.w	r0, r0, #1
 8000ece:	4770      	bx	lr
 8000ed0:	f102 0220 	add.w	r2, r2, #32
 8000ed4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed8:	f1c2 0220 	rsb	r2, r2, #32
 8000edc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ee0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee4:	eb43 0002 	adc.w	r0, r3, r2
 8000ee8:	bf08      	it	eq
 8000eea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eee:	4770      	bx	lr

08000ef0 <__gesf2>:
 8000ef0:	f04f 3cff 	mov.w	ip, #4294967295
 8000ef4:	e006      	b.n	8000f04 <__cmpsf2+0x4>
 8000ef6:	bf00      	nop

08000ef8 <__lesf2>:
 8000ef8:	f04f 0c01 	mov.w	ip, #1
 8000efc:	e002      	b.n	8000f04 <__cmpsf2+0x4>
 8000efe:	bf00      	nop

08000f00 <__cmpsf2>:
 8000f00:	f04f 0c01 	mov.w	ip, #1
 8000f04:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f08:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f14:	bf18      	it	ne
 8000f16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f1a:	d011      	beq.n	8000f40 <__cmpsf2+0x40>
 8000f1c:	b001      	add	sp, #4
 8000f1e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f22:	bf18      	it	ne
 8000f24:	ea90 0f01 	teqne	r0, r1
 8000f28:	bf58      	it	pl
 8000f2a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f2e:	bf88      	it	hi
 8000f30:	17c8      	asrhi	r0, r1, #31
 8000f32:	bf38      	it	cc
 8000f34:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f38:	bf18      	it	ne
 8000f3a:	f040 0001 	orrne.w	r0, r0, #1
 8000f3e:	4770      	bx	lr
 8000f40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f44:	d102      	bne.n	8000f4c <__cmpsf2+0x4c>
 8000f46:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f4a:	d105      	bne.n	8000f58 <__cmpsf2+0x58>
 8000f4c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f50:	d1e4      	bne.n	8000f1c <__cmpsf2+0x1c>
 8000f52:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f56:	d0e1      	beq.n	8000f1c <__cmpsf2+0x1c>
 8000f58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <__aeabi_cfrcmple>:
 8000f60:	4684      	mov	ip, r0
 8000f62:	4608      	mov	r0, r1
 8000f64:	4661      	mov	r1, ip
 8000f66:	e7ff      	b.n	8000f68 <__aeabi_cfcmpeq>

08000f68 <__aeabi_cfcmpeq>:
 8000f68:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f6a:	f7ff ffc9 	bl	8000f00 <__cmpsf2>
 8000f6e:	2800      	cmp	r0, #0
 8000f70:	bf48      	it	mi
 8000f72:	f110 0f00 	cmnmi.w	r0, #0
 8000f76:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f78 <__aeabi_fcmpeq>:
 8000f78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f7c:	f7ff fff4 	bl	8000f68 <__aeabi_cfcmpeq>
 8000f80:	bf0c      	ite	eq
 8000f82:	2001      	moveq	r0, #1
 8000f84:	2000      	movne	r0, #0
 8000f86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f8a:	bf00      	nop

08000f8c <__aeabi_fcmplt>:
 8000f8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f90:	f7ff ffea 	bl	8000f68 <__aeabi_cfcmpeq>
 8000f94:	bf34      	ite	cc
 8000f96:	2001      	movcc	r0, #1
 8000f98:	2000      	movcs	r0, #0
 8000f9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9e:	bf00      	nop

08000fa0 <__aeabi_fcmple>:
 8000fa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa4:	f7ff ffe0 	bl	8000f68 <__aeabi_cfcmpeq>
 8000fa8:	bf94      	ite	ls
 8000faa:	2001      	movls	r0, #1
 8000fac:	2000      	movhi	r0, #0
 8000fae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_fcmpge>:
 8000fb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb8:	f7ff ffd2 	bl	8000f60 <__aeabi_cfrcmple>
 8000fbc:	bf94      	ite	ls
 8000fbe:	2001      	movls	r0, #1
 8000fc0:	2000      	movhi	r0, #0
 8000fc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_fcmpgt>:
 8000fc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fcc:	f7ff ffc8 	bl	8000f60 <__aeabi_cfrcmple>
 8000fd0:	bf34      	ite	cc
 8000fd2:	2001      	movcc	r0, #1
 8000fd4:	2000      	movcs	r0, #0
 8000fd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fda:	bf00      	nop
 8000fdc:	0000      	movs	r0, r0
 8000fde:	0000      	movs	r0, r0

08000fe0 <memchr>:
 8000fe0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000fe4:	2a10      	cmp	r2, #16
 8000fe6:	db2b      	blt.n	8001040 <memchr+0x60>
 8000fe8:	f010 0f07 	tst.w	r0, #7
 8000fec:	d008      	beq.n	8001000 <memchr+0x20>
 8000fee:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000ff2:	3a01      	subs	r2, #1
 8000ff4:	428b      	cmp	r3, r1
 8000ff6:	d02d      	beq.n	8001054 <memchr+0x74>
 8000ff8:	f010 0f07 	tst.w	r0, #7
 8000ffc:	b342      	cbz	r2, 8001050 <memchr+0x70>
 8000ffe:	d1f6      	bne.n	8000fee <memchr+0xe>
 8001000:	b4f0      	push	{r4, r5, r6, r7}
 8001002:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001006:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800100a:	f022 0407 	bic.w	r4, r2, #7
 800100e:	f07f 0700 	mvns.w	r7, #0
 8001012:	2300      	movs	r3, #0
 8001014:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001018:	3c08      	subs	r4, #8
 800101a:	ea85 0501 	eor.w	r5, r5, r1
 800101e:	ea86 0601 	eor.w	r6, r6, r1
 8001022:	fa85 f547 	uadd8	r5, r5, r7
 8001026:	faa3 f587 	sel	r5, r3, r7
 800102a:	fa86 f647 	uadd8	r6, r6, r7
 800102e:	faa5 f687 	sel	r6, r5, r7
 8001032:	b98e      	cbnz	r6, 8001058 <memchr+0x78>
 8001034:	d1ee      	bne.n	8001014 <memchr+0x34>
 8001036:	bcf0      	pop	{r4, r5, r6, r7}
 8001038:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800103c:	f002 0207 	and.w	r2, r2, #7
 8001040:	b132      	cbz	r2, 8001050 <memchr+0x70>
 8001042:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001046:	3a01      	subs	r2, #1
 8001048:	ea83 0301 	eor.w	r3, r3, r1
 800104c:	b113      	cbz	r3, 8001054 <memchr+0x74>
 800104e:	d1f8      	bne.n	8001042 <memchr+0x62>
 8001050:	2000      	movs	r0, #0
 8001052:	4770      	bx	lr
 8001054:	3801      	subs	r0, #1
 8001056:	4770      	bx	lr
 8001058:	2d00      	cmp	r5, #0
 800105a:	bf06      	itte	eq
 800105c:	4635      	moveq	r5, r6
 800105e:	3803      	subeq	r0, #3
 8001060:	3807      	subne	r0, #7
 8001062:	f015 0f01 	tst.w	r5, #1
 8001066:	d107      	bne.n	8001078 <memchr+0x98>
 8001068:	3001      	adds	r0, #1
 800106a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800106e:	bf02      	ittt	eq
 8001070:	3001      	addeq	r0, #1
 8001072:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8001076:	3001      	addeq	r0, #1
 8001078:	bcf0      	pop	{r4, r5, r6, r7}
 800107a:	3801      	subs	r0, #1
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <handle>:
}
#endif 

/// This function will handle the 'p' command send from the capture board.
uint8_t handle(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 8001080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int num_layers = NET_NUM_LAYERS;
  int *num_neurons_arr = NET_NUM_NEURONS;
 8001084:	4c33      	ldr	r4, [pc, #204]	; (8001154 <handle+0xd4>)
{
 8001086:	4689      	mov	r9, r1
 8001088:	4690      	mov	r8, r2
 800108a:	461f      	mov	r7, r3
  int *num_neurons_arr = NET_NUM_NEURONS;
 800108c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
{
 8001090:	b093      	sub	sp, #76	; 0x4c
  int *num_neurons_arr = NET_NUM_NEURONS;
 8001092:	ae07      	add	r6, sp, #28
  
  
  network net = init_network(num_layers, num_neurons_arr, net_config_layer_weights);
 8001094:	ad05      	add	r5, sp, #20
  int *num_neurons_arr = NET_NUM_NEURONS;
 8001096:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}

  float new_inputs[7] = {
 800109a:	3410      	adds	r4, #16
  network net = init_network(num_layers, num_neurons_arr, net_config_layer_weights);
 800109c:	4632      	mov	r2, r6
 800109e:	4b2e      	ldr	r3, [pc, #184]	; (8001158 <handle+0xd8>)
 80010a0:	2104      	movs	r1, #4
 80010a2:	4628      	mov	r0, r5
 80010a4:	f000 f962 	bl	800136c <init_network>
  float new_inputs[7] = {
 80010a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010aa:	ae0b      	add	r6, sp, #44	; 0x2c
 80010ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80010ae:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    0.7525740869461268,
    -1.5751881331414292,
    -0.6688709437380642,
    -0.9791366791093283
  };
  for (int i=0; i < net.layers[0].num_neurons; i++){
 80010b2:	9b06      	ldr	r3, [sp, #24]
  float new_inputs[7] = {
 80010b4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    net.layers[0].neurons[i].a = new_inputs[i];
 80010b8:	2418      	movs	r4, #24
  for (int i=0; i < net.layers[0].num_neurons; i++){
 80010ba:	6818      	ldr	r0, [r3, #0]
    net.layers[0].neurons[i].a = new_inputs[i];
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	a90b      	add	r1, sp, #44	; 0x2c
  for (int i=0; i < net.layers[0].num_neurons; i++){
 80010c0:	2300      	movs	r3, #0
 80010c2:	4298      	cmp	r0, r3
 80010c4:	dc2c      	bgt.n	8001120 <handle+0xa0>
  }
  //Change the input of the first neuron in the first layer to the provided number
  //convert to float
  float input_value;
  uint8_t input_buffer[4] = {buf[0], buf[1], buf[2], buf[3]};
 80010c6:	783b      	ldrb	r3, [r7, #0]
 80010c8:	f88d 3010 	strb.w	r3, [sp, #16]
 80010cc:	787b      	ldrb	r3, [r7, #1]
 80010ce:	f88d 3011 	strb.w	r3, [sp, #17]
 80010d2:	78bb      	ldrb	r3, [r7, #2]
 80010d4:	f88d 3012 	strb.w	r3, [sp, #18]
 80010d8:	78fb      	ldrb	r3, [r7, #3]
 80010da:	f88d 3013 	strb.w	r3, [sp, #19]
  memcpy(&input_value, input_buffer, sizeof(float)); 
 80010de:	9b04      	ldr	r3, [sp, #16]
 80010e0:	9303      	str	r3, [sp, #12]
  net.layers[0].neurons[5].a = input_value;
 80010e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  QueryPerformanceFrequency(&frequency);
  QueryPerformanceCounter(&start);
  #endif
  #endif

  if (scmd) {
 80010e6:	466c      	mov	r4, sp
 80010e8:	f1b9 0f00 	cmp.w	r9, #0
 80010ec:	d12f      	bne.n	800114e <handle+0xce>
  QueryPerformanceCounter(&middle);
  #endif
  #endif

  // Start Measurement
  trigger_high();
 80010ee:	f000 fc7f 	bl	80019f0 <trigger_high>
  net = forward_shuffled(net);
 80010f2:	e895 0006 	ldmia.w	r5, {r1, r2}
 80010f6:	4620      	mov	r0, r4
 80010f8:	f000 f9b6 	bl	8001468 <forward_shuffled>
 80010fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001100:	e885 0003 	stmia.w	r5, {r0, r1}
  // Stop Measurement
  trigger_low();
 8001104:	f000 fc7b 	bl	80019fe <trigger_low>

  #endif
  #endif
  
  //free dynamically allocated memory
  free_network(&net);
 8001108:	4628      	mov	r0, r5
 800110a:	f000 f8c0 	bl	800128e <free_network>
  
  simpleserial_put('r', len, buf);
 800110e:	463a      	mov	r2, r7
 8001110:	4641      	mov	r1, r8
 8001112:	2072      	movs	r0, #114	; 0x72
 8001114:	f000 fb06 	bl	8001724 <simpleserial_put>

  return 0;
}
 8001118:	2000      	movs	r0, #0
 800111a:	b013      	add	sp, #76	; 0x4c
 800111c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    net.layers[0].neurons[i].a = new_inputs[i];
 8001120:	fb04 2603 	mla	r6, r4, r3, r2
 8001124:	f851 cb04 	ldr.w	ip, [r1], #4
 8001128:	f8c6 c010 	str.w	ip, [r6, #16]
  for (int i=0; i < net.layers[0].num_neurons; i++){
 800112c:	3301      	adds	r3, #1
 800112e:	e7c8      	b.n	80010c2 <handle+0x42>
     net = shuffle_mul_indices_deranged(net, i);
 8001130:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001134:	4633      	mov	r3, r6
 8001136:	4620      	mov	r0, r4
 8001138:	f000 f970 	bl	800141c <shuffle_mul_indices_deranged>
 800113c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001140:	e885 0003 	stmia.w	r5, {r0, r1}
    for (int i = 1; i < net.num_layers; i++) {
 8001144:	3601      	adds	r6, #1
 8001146:	9b05      	ldr	r3, [sp, #20]
 8001148:	42b3      	cmp	r3, r6
 800114a:	dcf1      	bgt.n	8001130 <handle+0xb0>
 800114c:	e7cf      	b.n	80010ee <handle+0x6e>
 800114e:	2601      	movs	r6, #1
 8001150:	e7f9      	b.n	8001146 <handle+0xc6>
 8001152:	bf00      	nop
 8001154:	08003d30 	.word	0x08003d30
 8001158:	20000084 	.word	0x20000084

0800115c <init_weights>:
    float lay3_weights[3][4];
} net_config_weights;

void *net_config_layer_weights[NET_NUM_LAYERS];

void init_weights() {
 800115c:	b530      	push	{r4, r5, lr}
 800115e:	b0c5      	sub	sp, #276	; 0x114
    float lay1_weights[5][7] = 
 8001160:	491e      	ldr	r1, [pc, #120]	; (80011dc <init_weights+0x80>)
    {-1.47, 0.56, 1.85, -0.91, 0.23},
    {1.17, -1.38, 0.97, 0.63, -0.14},
    {-0.88, 1.09, -1.72, 0.21, 1.57},
    {1.86, -1.06, 0.45, -0.75, 1.02}
    };
    float lay3_weights[3][4] = {
 8001162:	4d1f      	ldr	r5, [pc, #124]	; (80011e0 <init_weights+0x84>)
    float lay1_weights[5][7] = 
 8001164:	228c      	movs	r2, #140	; 0x8c
 8001166:	a821      	add	r0, sp, #132	; 0x84
 8001168:	f001 fd2c 	bl	8002bc4 <memcpy>
    float lay2_weights[4][5] = {
 800116c:	491d      	ldr	r1, [pc, #116]	; (80011e4 <init_weights+0x88>)
 800116e:	2250      	movs	r2, #80	; 0x50
 8001170:	a80d      	add	r0, sp, #52	; 0x34
 8001172:	f001 fd27 	bl	8002bc4 <memcpy>
    float lay3_weights[3][4] = {
 8001176:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001178:	ac01      	add	r4, sp, #4
 800117a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800117c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800117e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001180:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001184:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    //         net_config_weights.lay0_weights[i][j] = lay0_weights[i][j];
    //     }
    // }
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 7; j++) {
            net_config_weights.lay1_weights[i][j] = lay1_weights[i][j];
 8001188:	228c      	movs	r2, #140	; 0x8c
 800118a:	a921      	add	r1, sp, #132	; 0x84
 800118c:	4816      	ldr	r0, [pc, #88]	; (80011e8 <init_weights+0x8c>)
 800118e:	f001 fd19 	bl	8002bc4 <memcpy>
        }
    }
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 5; j++) {
            net_config_weights.lay2_weights[i][j] = lay2_weights[i][j];
 8001192:	2250      	movs	r2, #80	; 0x50
 8001194:	a90d      	add	r1, sp, #52	; 0x34
 8001196:	4815      	ldr	r0, [pc, #84]	; (80011ec <init_weights+0x90>)
 8001198:	f001 fd14 	bl	8002bc4 <memcpy>
 800119c:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <init_weights+0x94>)
 800119e:	ab01      	add	r3, sp, #4
 80011a0:	2103      	movs	r1, #3
 80011a2:	4610      	mov	r0, r2
        }
    }
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            net_config_weights.lay3_weights[i][j] = lay3_weights[i][j];
 80011a4:	681c      	ldr	r4, [r3, #0]
 80011a6:	f8c2 40f8 	str.w	r4, [r2, #248]	; 0xf8
 80011aa:	685c      	ldr	r4, [r3, #4]
 80011ac:	f8c2 40fc 	str.w	r4, [r2, #252]	; 0xfc
    for (int i = 0; i < 3; i++) {
 80011b0:	3901      	subs	r1, #1
            net_config_weights.lay3_weights[i][j] = lay3_weights[i][j];
 80011b2:	689c      	ldr	r4, [r3, #8]
 80011b4:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
    for (int i = 0; i < 3; i++) {
 80011b8:	f103 0310 	add.w	r3, r3, #16
 80011bc:	f102 0210 	add.w	r2, r2, #16
 80011c0:	d1f0      	bne.n	80011a4 <init_weights+0x48>
    //     for (int j = 0; j < 3; j++) {
    //         net_config_weights.lay4_weights[i][j] = lay4_weights[i][j];
    //     }
    // }

    net_config_layer_weights[0] = (void*)net_config_weights.lay0_weights;
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <init_weights+0x98>)
 80011c4:	461a      	mov	r2, r3
 80011c6:	f842 0b2c 	str.w	r0, [r2], #44
    net_config_layer_weights[1] = (void*)net_config_weights.lay1_weights;
 80011ca:	605a      	str	r2, [r3, #4]
    net_config_layer_weights[2] = (void*)net_config_weights.lay2_weights;
 80011cc:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 80011d0:	609a      	str	r2, [r3, #8]
    net_config_layer_weights[3] = (void*)net_config_weights.lay3_weights;
 80011d2:	f503 7284 	add.w	r2, r3, #264	; 0x108
 80011d6:	60da      	str	r2, [r3, #12]
    //net_config_layer_weights[4] = (void*)net_config_weights.lay4_weights;
}
 80011d8:	b045      	add	sp, #276	; 0x114
 80011da:	bd30      	pop	{r4, r5, pc}
 80011dc:	08003d5c 	.word	0x08003d5c
 80011e0:	08003e38 	.word	0x08003e38
 80011e4:	08003de8 	.word	0x08003de8
 80011e8:	200000b0 	.word	0x200000b0
 80011ec:	2000013c 	.word	0x2000013c
 80011f0:	20000094 	.word	0x20000094
 80011f4:	20000084 	.word	0x20000084

080011f8 <main>:

int main(void) {
 80011f8:	b508      	push	{r3, lr}
  srand(time(NULL));
 80011fa:	2000      	movs	r0, #0
 80011fc:	f001 fe18 	bl	8002e30 <time>
 8001200:	f001 fd9a 	bl	8002d38 <srand>
  //Initialize network weights
  init_weights();
 8001204:	f7ff ffaa 	bl	800115c <init_weights>
  // Setup the specific chipset.
  platform_init();
 8001208:	f000 fb50 	bl	80018ac <platform_init>
  // Setup serial communication line.
  init_uart();
 800120c:	f000 fb8e 	bl	800192c <init_uart>
  // Setup measurement trigger.
  trigger_setup();
 8001210:	f000 fbca 	bl	80019a8 <trigger_setup>

  simpleserial_init();
 8001214:	f000 fa74 	bl	8001700 <simpleserial_init>

  // Insert your handlers here.
  simpleserial_addcmd('p', 16, handle);
 8001218:	4a03      	ldr	r2, [pc, #12]	; (8001228 <main+0x30>)
 800121a:	2110      	movs	r1, #16
 800121c:	2070      	movs	r0, #112	; 0x70
 800121e:	f000 fa55 	bl	80016cc <simpleserial_addcmd>
#ifdef DEBUGGING
  simpleserial_addcmd('t', 16, test_handle);
#endif
  // What for the capture board to send commands and handle them.
  while (1)
    simpleserial_get();
 8001222:	f000 fad5 	bl	80017d0 <simpleserial_get>
  while (1)
 8001226:	e7fc      	b.n	8001222 <main+0x2a>
 8001228:	08001081 	.word	0x08001081

0800122c <fisher_yates_deranged>:
        int j = rand() % (i + 1);
        swap(&arr[i], &arr[j]);
    }
}

void fisher_yates_deranged(int arr[], int size){
 800122c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800122e:	4604      	mov	r4, r0
 8001230:	460d      	mov	r5, r1
    for (int i = size - 1; i > 0; i--) {
 8001232:	1e4e      	subs	r6, r1, #1
 8001234:	2e00      	cmp	r6, #0
 8001236:	dc19      	bgt.n	800126c <fisher_yates_deranged+0x40>
        int j = rand() % (i + 1);
        swap(&arr[i], &arr[j]);
    }

    if (size > 2){
 8001238:	2d02      	cmp	r5, #2
 800123a:	dd16      	ble.n	800126a <fisher_yates_deranged+0x3e>
 800123c:	1f27      	subs	r7, r4, #4
        for (int i = 0; i < size; i++){
 800123e:	2600      	movs	r6, #0
            if (arr[i] == i) {
 8001240:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8001244:	42b3      	cmp	r3, r6
 8001246:	d10d      	bne.n	8001264 <fisher_yates_deranged+0x38>

                int swap_index = -1;
                do {
                    swap_index = rand() % size;
 8001248:	f001 fda4 	bl	8002d94 <rand>
 800124c:	fb90 f3f5 	sdiv	r3, r0, r5
 8001250:	fb03 0015 	mls	r0, r3, r5, r0
                } while (swap_index == i);
 8001254:	42b0      	cmp	r0, r6
 8001256:	d0f7      	beq.n	8001248 <fisher_yates_deranged+0x1c>
    int temp = *a;
 8001258:	683b      	ldr	r3, [r7, #0]
    *a = *b;
 800125a:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
 800125e:	603a      	str	r2, [r7, #0]
    *b = temp;
 8001260:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
        for (int i = 0; i < size; i++){
 8001264:	3601      	adds	r6, #1
 8001266:	42b5      	cmp	r5, r6
 8001268:	d1ea      	bne.n	8001240 <fisher_yates_deranged+0x14>

                swap(&arr[i], &arr[swap_index]);
            }
        }
    }
}
 800126a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        int j = rand() % (i + 1);
 800126c:	f001 fd92 	bl	8002d94 <rand>
 8001270:	1c73      	adds	r3, r6, #1
 8001272:	fb90 f2f3 	sdiv	r2, r0, r3
 8001276:	fb02 0013 	mls	r0, r2, r3, r0
    int temp = *a;
 800127a:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
    *a = *b;
 800127e:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
 8001282:	f844 2026 	str.w	r2, [r4, r6, lsl #2]
    *b = temp;
 8001286:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
    for (int i = size - 1; i > 0; i--) {
 800128a:	3e01      	subs	r6, #1
 800128c:	e7d2      	b.n	8001234 <fisher_yates_deranged+0x8>

0800128e <free_network>:
    }
    fisher_yates(arr, size);
    return arr;
}

void free_network(network *net){
 800128e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001292:	4604      	mov	r4, r0
    // free the dynamically allocated fields inside the network struct
    for (int i=0; i < net->num_layers; i++){
 8001294:	2600      	movs	r6, #0
 8001296:	f04f 0818 	mov.w	r8, #24
 800129a:	6823      	ldr	r3, [r4, #0]
 800129c:	42b3      	cmp	r3, r6
 800129e:	dd1c      	ble.n	80012da <free_network+0x4c>
 80012a0:	00f7      	lsls	r7, r6, #3
        for(int j=0; j< net->layers[i].num_neurons; j++){
 80012a2:	2500      	movs	r5, #0
 80012a4:	e00f      	b.n	80012c6 <free_network+0x38>
            if (net->layers[i].neurons[j].weights != NULL) free(net->layers[i].neurons[j].weights);
 80012a6:	fb08 f905 	mul.w	r9, r8, r5
 80012aa:	4448      	add	r0, r9
 80012ac:	6840      	ldr	r0, [r0, #4]
 80012ae:	b108      	cbz	r0, 80012b4 <free_network+0x26>
 80012b0:	f001 fc80 	bl	8002bb4 <free>
            if (net->layers[i].neurons[j].mul_indices != NULL) free(net->layers[i].neurons[j].mul_indices);
 80012b4:	6862      	ldr	r2, [r4, #4]
 80012b6:	443a      	add	r2, r7
 80012b8:	6853      	ldr	r3, [r2, #4]
 80012ba:	444b      	add	r3, r9
 80012bc:	6958      	ldr	r0, [r3, #20]
 80012be:	b108      	cbz	r0, 80012c4 <free_network+0x36>
 80012c0:	f001 fc78 	bl	8002bb4 <free>
        for(int j=0; j< net->layers[i].num_neurons; j++){
 80012c4:	3501      	adds	r5, #1
 80012c6:	6863      	ldr	r3, [r4, #4]
 80012c8:	19da      	adds	r2, r3, r7
 80012ca:	59db      	ldr	r3, [r3, r7]
            if (net->layers[i].neurons[j].weights != NULL) free(net->layers[i].neurons[j].weights);
 80012cc:	6850      	ldr	r0, [r2, #4]
        for(int j=0; j< net->layers[i].num_neurons; j++){
 80012ce:	42ab      	cmp	r3, r5
 80012d0:	dce9      	bgt.n	80012a6 <free_network+0x18>
        }
        free(net->layers[i].neurons);
 80012d2:	f001 fc6f 	bl	8002bb4 <free>
    for (int i=0; i < net->num_layers; i++){
 80012d6:	3601      	adds	r6, #1
 80012d8:	e7df      	b.n	800129a <free_network+0xc>
    }
    free(net->layers);
 80012da:	6860      	ldr	r0, [r4, #4]
}
 80012dc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    free(net->layers);
 80012e0:	f001 bc68 	b.w	8002bb4 <free>

080012e4 <create_neuron>:
    }
    printf("-----------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
}


neuron create_neuron(void* weights, int num_in_weights, int layer_idx, int neuron_idx){
 80012e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    new_neuron.a = 0.0;
    new_neuron.z = 0.0;
    new_neuron.bias = 0.0;
    new_neuron.num_weights = num_in_weights;

    if (num_in_weights > 0) {
 80012e8:	1e15      	subs	r5, r2, #0
neuron create_neuron(void* weights, int num_in_weights, int layer_idx, int neuron_idx){
 80012ea:	4604      	mov	r4, r0
 80012ec:	460f      	mov	r7, r1
 80012ee:	4698      	mov	r8, r3
    if (num_in_weights > 0) {
 80012f0:	dd24      	ble.n	800133c <create_neuron+0x58>
        new_neuron.weights = (float*) malloc(num_in_weights * sizeof(float));
 80012f2:	ea4f 0985 	mov.w	r9, r5, lsl #2
 80012f6:	4648      	mov	r0, r9
 80012f8:	f001 fc54 	bl	8002ba4 <malloc>
 80012fc:	4606      	mov	r6, r0
        new_neuron.mul_indices = (int*) malloc(num_in_weights * sizeof(int));
 80012fe:	4648      	mov	r0, r9
 8001300:	f001 fc50 	bl	8002ba4 <malloc>
    } else {
        new_neuron.weights = NULL;
        new_neuron.mul_indices = NULL;
    }
    if (weights != NULL && num_in_weights > 0){
 8001304:	b187      	cbz	r7, 8001328 <create_neuron+0x44>
        //TODO: Dont question it... it works.
        float (*layer_weights)[num_in_weights] = ((float (*)[num_in_weights])((float**)weights)[layer_idx]);
        for (int i=0; i<num_in_weights; i++){
            new_neuron.weights[i] = layer_weights[neuron_idx][i];
 8001306:	9a08      	ldr	r2, [sp, #32]
 8001308:	fb05 f102 	mul.w	r1, r5, r2
 800130c:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
        for (int i=0; i<num_in_weights; i++){
 8001310:	2300      	movs	r3, #0
            new_neuron.weights[i] = layer_weights[neuron_idx][i];
 8001312:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001316:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800131a:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
            new_neuron.mul_indices[i] = i;
 800131e:	f840 3023 	str.w	r3, [r0, r3, lsl #2]
        for (int i=0; i<num_in_weights; i++){
 8001322:	3301      	adds	r3, #1
 8001324:	429d      	cmp	r5, r3
 8001326:	d1f6      	bne.n	8001316 <create_neuron+0x32>
        }
    }
    return new_neuron;
 8001328:	2300      	movs	r3, #0
 800132a:	6160      	str	r0, [r4, #20]
 800132c:	e9c4 5600 	strd	r5, r6, [r4]
 8001330:	60a3      	str	r3, [r4, #8]
 8001332:	60e3      	str	r3, [r4, #12]
 8001334:	6123      	str	r3, [r4, #16]
}
 8001336:	4620      	mov	r0, r4
 8001338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        new_neuron.mul_indices = NULL;
 800133c:	2000      	movs	r0, #0
        new_neuron.weights = NULL;
 800133e:	4606      	mov	r6, r0
 8001340:	e7f2      	b.n	8001328 <create_neuron+0x44>

08001342 <create_layer>:

layer create_layer(int num_neurons){
 8001342:	b538      	push	{r3, r4, r5, lr}
 8001344:	4604      	mov	r4, r0
    layer lay;
    lay.num_neurons = num_neurons;
    lay.neurons = (neuron*) malloc(num_neurons * sizeof(neuron));
 8001346:	2018      	movs	r0, #24
 8001348:	4348      	muls	r0, r1
layer create_layer(int num_neurons){
 800134a:	460d      	mov	r5, r1
    lay.neurons = (neuron*) malloc(num_neurons * sizeof(neuron));
 800134c:	f001 fc2a 	bl	8002ba4 <malloc>
    return lay;
 8001350:	e9c4 5000 	strd	r5, r0, [r4]
}
 8001354:	4620      	mov	r0, r4
 8001356:	bd38      	pop	{r3, r4, r5, pc}

08001358 <create_network>:

network create_network(int num_layers){
 8001358:	b538      	push	{r3, r4, r5, lr}
 800135a:	4604      	mov	r4, r0
    network net;
    net.num_layers = num_layers;
    net.layers = (layer*) malloc(num_layers * sizeof(layer));
 800135c:	00c8      	lsls	r0, r1, #3
network create_network(int num_layers){
 800135e:	460d      	mov	r5, r1
    net.layers = (layer*) malloc(num_layers * sizeof(layer));
 8001360:	f001 fc20 	bl	8002ba4 <malloc>
    return net;
 8001364:	e9c4 5000 	strd	r5, r0, [r4]
}
 8001368:	4620      	mov	r0, r4
 800136a:	bd38      	pop	{r3, r4, r5, pc}

0800136c <init_network>:

network init_network(int num_layers, int *num_neurons, void* weights) {
 800136c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001370:	4607      	mov	r7, r0
 8001372:	b08b      	sub	sp, #44	; 0x2c
 8001374:	4688      	mov	r8, r1
 8001376:	4616      	mov	r6, r2
 8001378:	469a      	mov	sl, r3
    network net = create_network(num_layers);
 800137a:	f7ff ffed 	bl	8001358 <create_network>
 800137e:	687d      	ldr	r5, [r7, #4]
    int curr_layer_idx, curr_neuron_idx;
    for (curr_layer_idx = 0; curr_layer_idx < num_layers; curr_layer_idx++){
 8001380:	2400      	movs	r4, #0
        net.layers[ curr_layer_idx ] = create_layer(num_neurons[ curr_layer_idx ]);
 8001382:	f10d 0920 	add.w	r9, sp, #32
    for (curr_layer_idx = 0; curr_layer_idx < num_layers; curr_layer_idx++){
 8001386:	4544      	cmp	r4, r8
 8001388:	db12      	blt.n	80013b0 <init_network+0x44>
    }
    // create neurons for the first (input) layer - they dont have weights
    for (curr_neuron_idx = 0; curr_neuron_idx < net.layers[0].num_neurons; curr_neuron_idx++){
 800138a:	2300      	movs	r3, #0
 800138c:	f8d5 c000 	ldr.w	ip, [r5]
        net.layers[0].neurons[ curr_neuron_idx ] = create_neuron(NULL, 0, 0, curr_neuron_idx);
 8001390:	f04f 0e18 	mov.w	lr, #24
 8001394:	4619      	mov	r1, r3
 8001396:	2000      	movs	r0, #0
    for (curr_neuron_idx = 0; curr_neuron_idx < net.layers[0].num_neurons; curr_neuron_idx++){
 8001398:	459c      	cmp	ip, r3
 800139a:	dc16      	bgt.n	80013ca <init_network+0x5e>
    }
    // For each following layer create neurons with number of weights eqaual to the number of neurons in the previous layer
    for (curr_layer_idx = 1; curr_layer_idx < num_layers; curr_layer_idx++){
 800139c:	f04f 0901 	mov.w	r9, #1
        int prev_layer_idx = curr_layer_idx - 1;
        for (curr_neuron_idx = 0; curr_neuron_idx <net.layers[ curr_layer_idx ].num_neurons; curr_neuron_idx++){
            net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ] = create_neuron(weights, net.layers[ prev_layer_idx ].num_neurons, curr_layer_idx, curr_neuron_idx );
 80013a0:	f04f 0b18 	mov.w	fp, #24
    for (curr_layer_idx = 1; curr_layer_idx < num_layers; curr_layer_idx++){
 80013a4:	45c1      	cmp	r9, r8
 80013a6:	db37      	blt.n	8001418 <init_network+0xac>
        }
    }
    return net;
}
 80013a8:	4638      	mov	r0, r7
 80013aa:	b00b      	add	sp, #44	; 0x2c
 80013ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        net.layers[ curr_layer_idx ] = create_layer(num_neurons[ curr_layer_idx ]);
 80013b0:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 80013b4:	4648      	mov	r0, r9
 80013b6:	f7ff ffc4 	bl	8001342 <create_layer>
 80013ba:	e899 0003 	ldmia.w	r9, {r0, r1}
 80013be:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80013c2:	e883 0003 	stmia.w	r3, {r0, r1}
    for (curr_layer_idx = 0; curr_layer_idx < num_layers; curr_layer_idx++){
 80013c6:	3401      	adds	r4, #1
 80013c8:	e7dd      	b.n	8001386 <init_network+0x1a>
        net.layers[0].neurons[ curr_neuron_idx ] = create_neuron(NULL, 0, 0, curr_neuron_idx);
 80013ca:	686e      	ldr	r6, [r5, #4]
 80013cc:	fb0e f403 	mul.w	r4, lr, r3
 80013d0:	1932      	adds	r2, r6, r4
 80013d2:	5131      	str	r1, [r6, r4]
    for (curr_neuron_idx = 0; curr_neuron_idx < net.layers[0].num_neurons; curr_neuron_idx++){
 80013d4:	3301      	adds	r3, #1
        net.layers[0].neurons[ curr_neuron_idx ] = create_neuron(NULL, 0, 0, curr_neuron_idx);
 80013d6:	6051      	str	r1, [r2, #4]
 80013d8:	6090      	str	r0, [r2, #8]
 80013da:	60d0      	str	r0, [r2, #12]
 80013dc:	6110      	str	r0, [r2, #16]
 80013de:	6151      	str	r1, [r2, #20]
    for (curr_neuron_idx = 0; curr_neuron_idx < net.layers[0].num_neurons; curr_neuron_idx++){
 80013e0:	e7da      	b.n	8001398 <init_network+0x2c>
            net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ] = create_neuron(weights, net.layers[ prev_layer_idx ].num_neurons, curr_layer_idx, curr_neuron_idx );
 80013e2:	68ec      	ldr	r4, [r5, #12]
 80013e4:	9600      	str	r6, [sp, #0]
 80013e6:	682a      	ldr	r2, [r5, #0]
 80013e8:	464b      	mov	r3, r9
 80013ea:	4651      	mov	r1, sl
 80013ec:	a802      	add	r0, sp, #8
 80013ee:	f7ff ff79 	bl	80012e4 <create_neuron>
 80013f2:	f10d 0c08 	add.w	ip, sp, #8
 80013f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013fa:	fb0b 4406 	mla	r4, fp, r6, r4
 80013fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001400:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8001404:	e884 0003 	stmia.w	r4, {r0, r1}
        for (curr_neuron_idx = 0; curr_neuron_idx <net.layers[ curr_layer_idx ].num_neurons; curr_neuron_idx++){
 8001408:	3601      	adds	r6, #1
 800140a:	68ab      	ldr	r3, [r5, #8]
 800140c:	42b3      	cmp	r3, r6
 800140e:	dce8      	bgt.n	80013e2 <init_network+0x76>
    for (curr_layer_idx = 1; curr_layer_idx < num_layers; curr_layer_idx++){
 8001410:	f109 0901 	add.w	r9, r9, #1
 8001414:	3508      	adds	r5, #8
 8001416:	e7c5      	b.n	80013a4 <init_network+0x38>
        for (curr_neuron_idx = 0; curr_neuron_idx <net.layers[ curr_layer_idx ].num_neurons; curr_neuron_idx++){
 8001418:	2600      	movs	r6, #0
 800141a:	e7f6      	b.n	800140a <init_network+0x9e>

0800141c <shuffle_mul_indices_deranged>:
        }
    }
    return net;
}

network shuffle_mul_indices_deranged(network net, int layer_idx) {
 800141c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (layer_idx > 0 && layer_idx < net.num_layers) {
 8001420:	2b00      	cmp	r3, #0
network shuffle_mul_indices_deranged(network net, int layer_idx) {
 8001422:	466d      	mov	r5, sp
 8001424:	e885 0006 	stmia.w	r5, {r1, r2}
 8001428:	4604      	mov	r4, r0
    if (layer_idx > 0 && layer_idx < net.num_layers) {
 800142a:	dd0a      	ble.n	8001442 <shuffle_mul_indices_deranged+0x26>
 800142c:	4299      	cmp	r1, r3
 800142e:	dd08      	ble.n	8001442 <shuffle_mul_indices_deranged+0x26>
        for (int i = 0; i < net.layers[ layer_idx ].num_neurons; i++){
 8001430:	9f01      	ldr	r7, [sp, #4]
 8001432:	2600      	movs	r6, #0
 8001434:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
            fisher_yates_deranged(net.layers[ layer_idx ].neurons[ i ].mul_indices, net.layers[ layer_idx ].neurons[ i ].num_weights);
 8001438:	f04f 0818 	mov.w	r8, #24
        for (int i = 0; i < net.layers[ layer_idx ].num_neurons; i++){
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	42b3      	cmp	r3, r6
 8001440:	dc07      	bgt.n	8001452 <shuffle_mul_indices_deranged+0x36>
        }
    }
    return net;
 8001442:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001446:	e884 0003 	stmia.w	r4, {r0, r1}
}
 800144a:	4620      	mov	r0, r4
 800144c:	b002      	add	sp, #8
 800144e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            fisher_yates_deranged(net.layers[ layer_idx ].neurons[ i ].mul_indices, net.layers[ layer_idx ].neurons[ i ].num_weights);
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	fb08 f306 	mul.w	r3, r8, r6
 8001458:	18d0      	adds	r0, r2, r3
 800145a:	58d1      	ldr	r1, [r2, r3]
 800145c:	6940      	ldr	r0, [r0, #20]
 800145e:	f7ff fee5 	bl	800122c <fisher_yates_deranged>
        for (int i = 0; i < net.layers[ layer_idx ].num_neurons; i++){
 8001462:	3601      	adds	r6, #1
 8001464:	e7ea      	b.n	800143c <shuffle_mul_indices_deranged+0x20>
 8001466:	0000      	movs	r0, r0

08001468 <forward_shuffled>:
        }
    }
    return net;
}

network forward_shuffled(network net) {
 8001468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800146c:	b08b      	sub	sp, #44	; 0x2c
 800146e:	ab02      	add	r3, sp, #8
 8001470:	e883 0006 	stmia.w	r3, {r1, r2}
    volatile int curr_layer_idx, curr_neuron_idx, prev_layer_neuron_idx;
    volatile float dum_op = 12.3412f;
 8001474:	4b77      	ldr	r3, [pc, #476]	; (8001654 <forward_shuffled+0x1ec>)
 8001476:	9307      	str	r3, [sp, #28]
        // for each neuron in this layer
        for (curr_neuron_idx=0; curr_neuron_idx < net.layers[ curr_layer_idx ].num_neurons; curr_neuron_idx++){   
            net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].z = net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].bias;

            for(volatile int ops = 0; ops < 20; ops++){
                dum_op = 12.4f * 0.7823f;
 8001478:	4d77      	ldr	r5, [pc, #476]	; (8001658 <forward_shuffled+0x1f0>)
    for (curr_layer_idx=1; curr_layer_idx < net.num_layers; curr_layer_idx++){
 800147a:	2301      	movs	r3, #1
network forward_shuffled(network net) {
 800147c:	4607      	mov	r7, r0
 800147e:	4689      	mov	r9, r1
 8001480:	4614      	mov	r4, r2
    for (curr_layer_idx=1; curr_layer_idx < net.num_layers; curr_layer_idx++){
 8001482:	9304      	str	r3, [sp, #16]
 8001484:	9b04      	ldr	r3, [sp, #16]
 8001486:	454b      	cmp	r3, r9
 8001488:	db05      	blt.n	8001496 <forward_shuffled+0x2e>
                net.layers[curr_layer_idx].neurons[ curr_neuron_idx ].a = 1/(1+exp(-net.layers[curr_layer_idx].neurons[ curr_neuron_idx ].z));
            }
        }
    }
    return net;
 800148a:	4638      	mov	r0, r7
    return net;
 800148c:	e9c7 9400 	strd	r9, r4, [r7]
 8001490:	b00b      	add	sp, #44	; 0x2c
 8001492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int prev_layer_idx = curr_layer_idx - 1;
 8001496:	9e04      	ldr	r6, [sp, #16]
        for (curr_neuron_idx=0; curr_neuron_idx < net.layers[ curr_layer_idx ].num_neurons; curr_neuron_idx++){   
 8001498:	2300      	movs	r3, #0
        int prev_layer_idx = curr_layer_idx - 1;
 800149a:	3e01      	subs	r6, #1
        for (curr_neuron_idx=0; curr_neuron_idx < net.layers[ curr_layer_idx ].num_neurons; curr_neuron_idx++){   
 800149c:	9305      	str	r3, [sp, #20]
            for (prev_layer_neuron_idx = 0; prev_layer_neuron_idx < net.layers[ prev_layer_idx ].num_neurons; prev_layer_neuron_idx++){
 800149e:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
        for (curr_neuron_idx=0; curr_neuron_idx < net.layers[ curr_layer_idx ].num_neurons; curr_neuron_idx++){   
 80014a2:	9a04      	ldr	r2, [sp, #16]
 80014a4:	9b05      	ldr	r3, [sp, #20]
 80014a6:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	dc03      	bgt.n	80014b6 <forward_shuffled+0x4e>
    for (curr_layer_idx=1; curr_layer_idx < net.num_layers; curr_layer_idx++){
 80014ae:	9b04      	ldr	r3, [sp, #16]
 80014b0:	3301      	adds	r3, #1
 80014b2:	9304      	str	r3, [sp, #16]
 80014b4:	e7e6      	b.n	8001484 <forward_shuffled+0x1c>
            net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].z = net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].bias;
 80014b6:	9904      	ldr	r1, [sp, #16]
 80014b8:	f8dd c014 	ldr.w	ip, [sp, #20]
 80014bc:	9804      	ldr	r0, [sp, #16]
 80014be:	9a05      	ldr	r2, [sp, #20]
 80014c0:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80014c4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80014c8:	6843      	ldr	r3, [r0, #4]
 80014ca:	2018      	movs	r0, #24
 80014cc:	fb00 3302 	mla	r3, r0, r2, r3
 80014d0:	684a      	ldr	r2, [r1, #4]
 80014d2:	fb00 220c 	mla	r2, r0, ip, r2
 80014d6:	6892      	ldr	r2, [r2, #8]
 80014d8:	60da      	str	r2, [r3, #12]
            for(volatile int ops = 0; ops < 20; ops++){
 80014da:	2300      	movs	r3, #0
 80014dc:	9308      	str	r3, [sp, #32]
 80014de:	9b08      	ldr	r3, [sp, #32]
 80014e0:	2b13      	cmp	r3, #19
 80014e2:	dd42      	ble.n	800156a <forward_shuffled+0x102>
            for (prev_layer_neuron_idx = 0; prev_layer_neuron_idx < net.layers[ prev_layer_idx ].num_neurons; prev_layer_neuron_idx++){
 80014e4:	2300      	movs	r3, #0
 80014e6:	9306      	str	r3, [sp, #24]
 80014e8:	6833      	ldr	r3, [r6, #0]
 80014ea:	9301      	str	r3, [sp, #4]
                int mul_index = net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].mul_indices[ prev_layer_neuron_idx ]; // CHANGE from forward - added this line
 80014ec:	f04f 0818 	mov.w	r8, #24
            for (prev_layer_neuron_idx = 0; prev_layer_neuron_idx < net.layers[ prev_layer_idx ].num_neurons; prev_layer_neuron_idx++){
 80014f0:	9a06      	ldr	r2, [sp, #24]
 80014f2:	9b01      	ldr	r3, [sp, #4]
 80014f4:	4293      	cmp	r3, r2
 80014f6:	dc3e      	bgt.n	8001576 <forward_shuffled+0x10e>
            for(volatile int ops = 0; ops < 20; ops++){
 80014f8:	2300      	movs	r3, #0
 80014fa:	9309      	str	r3, [sp, #36]	; 0x24
 80014fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80014fe:	2b13      	cmp	r3, #19
 8001500:	dd72      	ble.n	80015e8 <forward_shuffled+0x180>
            net.layers[curr_layer_idx].neurons[ curr_neuron_idx ].a = net.layers[curr_layer_idx].neurons[ curr_neuron_idx ].z;
 8001502:	9904      	ldr	r1, [sp, #16]
 8001504:	f8dd c014 	ldr.w	ip, [sp, #20]
 8001508:	9804      	ldr	r0, [sp, #16]
 800150a:	9a05      	ldr	r2, [sp, #20]
 800150c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8001510:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001514:	6843      	ldr	r3, [r0, #4]
 8001516:	f04f 0818 	mov.w	r8, #24
 800151a:	fb08 3302 	mla	r3, r8, r2, r3
 800151e:	684a      	ldr	r2, [r1, #4]
 8001520:	fb08 220c 	mla	r2, r8, ip, r2
 8001524:	68d2      	ldr	r2, [r2, #12]
 8001526:	611a      	str	r2, [r3, #16]
            if(curr_layer_idx < net.num_layers - 1){
 8001528:	9b04      	ldr	r3, [sp, #16]
 800152a:	f109 32ff 	add.w	r2, r9, #4294967295
 800152e:	429a      	cmp	r2, r3
                if((net.layers[curr_layer_idx].neurons[ curr_neuron_idx ].z) < 0)
 8001530:	9a04      	ldr	r2, [sp, #16]
 8001532:	9905      	ldr	r1, [sp, #20]
 8001534:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001538:	6853      	ldr	r3, [r2, #4]
 800153a:	fb08 3301 	mla	r3, r8, r1, r3
            if(curr_layer_idx < net.num_layers - 1){
 800153e:	dd6c      	ble.n	800161a <forward_shuffled+0x1b2>
                if((net.layers[curr_layer_idx].neurons[ curr_neuron_idx ].z) < 0)
 8001540:	f04f 0a00 	mov.w	sl, #0
 8001544:	68d8      	ldr	r0, [r3, #12]
 8001546:	4651      	mov	r1, sl
 8001548:	f7ff fd20 	bl	8000f8c <__aeabi_fcmplt>
 800154c:	2800      	cmp	r0, #0
 800154e:	d051      	beq.n	80015f4 <forward_shuffled+0x18c>
                    net.layers[curr_layer_idx].neurons[ curr_neuron_idx ].a = 0;
 8001550:	9b04      	ldr	r3, [sp, #16]
 8001552:	9a05      	ldr	r2, [sp, #20]
 8001554:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	fb08 3802 	mla	r8, r8, r2, r3
 800155e:	f8c8 a010 	str.w	sl, [r8, #16]
        for (curr_neuron_idx=0; curr_neuron_idx < net.layers[ curr_layer_idx ].num_neurons; curr_neuron_idx++){   
 8001562:	9b05      	ldr	r3, [sp, #20]
 8001564:	3301      	adds	r3, #1
 8001566:	9305      	str	r3, [sp, #20]
 8001568:	e79b      	b.n	80014a2 <forward_shuffled+0x3a>
                dum_op = 12.4f * 0.7823f;
 800156a:	9507      	str	r5, [sp, #28]
                dum_op = 12.4f * 0.7823f;
 800156c:	9507      	str	r5, [sp, #28]
                dum_op = 12.4f * 0.7823f;
 800156e:	9507      	str	r5, [sp, #28]
            for(volatile int ops = 0; ops < 20; ops++){
 8001570:	9b08      	ldr	r3, [sp, #32]
 8001572:	3301      	adds	r3, #1
 8001574:	e7b2      	b.n	80014dc <forward_shuffled+0x74>
                int mul_index = net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].mul_indices[ prev_layer_neuron_idx ]; // CHANGE from forward - added this line
 8001576:	9804      	ldr	r0, [sp, #16]
 8001578:	f8dd a014 	ldr.w	sl, [sp, #20]
 800157c:	9b06      	ldr	r3, [sp, #24]
                    net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].z
 800157e:	f8dd b010 	ldr.w	fp, [sp, #16]
 8001582:	9a05      	ldr	r2, [sp, #20]
                        (net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].weights[ mul_index ]) // CHANGE from forward - .weights[ prev_layer_neuron_idx ] -> .weights[ mul_index ]
 8001584:	9904      	ldr	r1, [sp, #16]
                    net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].z
 8001586:	9200      	str	r2, [sp, #0]
                int mul_index = net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].mul_indices[ prev_layer_neuron_idx ]; // CHANGE from forward - added this line
 8001588:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
                        (net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].weights[ mul_index ]) // CHANGE from forward - .weights[ prev_layer_neuron_idx ] -> .weights[ mul_index ]
 800158c:	9a05      	ldr	r2, [sp, #20]
                int mul_index = net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].mul_indices[ prev_layer_neuron_idx ]; // CHANGE from forward - added this line
 800158e:	6840      	ldr	r0, [r0, #4]
 8001590:	fb08 000a 	mla	r0, r8, sl, r0
                        (net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].weights[ mul_index ]) // CHANGE from forward - .weights[ prev_layer_neuron_idx ] -> .weights[ mul_index ]
 8001594:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
                int mul_index = net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].mul_indices[ prev_layer_neuron_idx ]; // CHANGE from forward - added this line
 8001598:	6940      	ldr	r0, [r0, #20]
                        (net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].weights[ mul_index ]) // CHANGE from forward - .weights[ prev_layer_neuron_idx ] -> .weights[ mul_index ]
 800159a:	6849      	ldr	r1, [r1, #4]
 800159c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].z =
 80015a0:	9804      	ldr	r0, [sp, #16]
 80015a2:	f8dd a014 	ldr.w	sl, [sp, #20]
 80015a6:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
                        (net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].weights[ mul_index ]) // CHANGE from forward - .weights[ prev_layer_neuron_idx ] -> .weights[ mul_index ]
 80015aa:	fb08 1e02 	mla	lr, r8, r2, r1
                net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].z =
 80015ae:	6840      	ldr	r0, [r0, #4]
                        (net.layers[ prev_layer_idx ].neurons[ mul_index ].a) // CHANGE from forward - .neurons[ prev_layer_neuron_idx ].a -> .neurons[ mul_index ].a
 80015b0:	6871      	ldr	r1, [r6, #4]
                net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].z =
 80015b2:	fb08 0a0a 	mla	sl, r8, sl, r0
                        (net.layers[ prev_layer_idx ].neurons[ mul_index ].a) // CHANGE from forward - .neurons[ prev_layer_neuron_idx ].a -> .neurons[ mul_index ].a
 80015b6:	fb08 1103 	mla	r1, r8, r3, r1
                        (net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].weights[ mul_index ]) // CHANGE from forward - .weights[ prev_layer_neuron_idx ] -> .weights[ mul_index ]
 80015ba:	f8de 0004 	ldr.w	r0, [lr, #4]
                        *
 80015be:	6909      	ldr	r1, [r1, #16]
 80015c0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
                    net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].z
 80015c4:	eb04 0bcb 	add.w	fp, r4, fp, lsl #3
                        *
 80015c8:	f7fe fe02 	bl	80001d0 <__aeabi_fmul>
                    net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].z
 80015cc:	f8db 1004 	ldr.w	r1, [fp, #4]
 80015d0:	9b00      	ldr	r3, [sp, #0]
 80015d2:	fb08 1203 	mla	r2, r8, r3, r1
                    +
 80015d6:	68d1      	ldr	r1, [r2, #12]
 80015d8:	f7ff fb82 	bl	8000ce0 <__addsf3>
            for (prev_layer_neuron_idx = 0; prev_layer_neuron_idx < net.layers[ prev_layer_idx ].num_neurons; prev_layer_neuron_idx++){
 80015dc:	9a06      	ldr	r2, [sp, #24]
                net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].z =
 80015de:	f8ca 000c 	str.w	r0, [sl, #12]
            for (prev_layer_neuron_idx = 0; prev_layer_neuron_idx < net.layers[ prev_layer_idx ].num_neurons; prev_layer_neuron_idx++){
 80015e2:	3201      	adds	r2, #1
 80015e4:	9206      	str	r2, [sp, #24]
 80015e6:	e783      	b.n	80014f0 <forward_shuffled+0x88>
                dum_op = 12.4f * 0.7823f;
 80015e8:	9507      	str	r5, [sp, #28]
                dum_op = 12.4f * 0.7823f;
 80015ea:	9507      	str	r5, [sp, #28]
                dum_op = 12.4f * 0.7823f;
 80015ec:	9507      	str	r5, [sp, #28]
            for(volatile int ops = 0; ops < 20; ops++){
 80015ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80015f0:	3301      	adds	r3, #1
 80015f2:	e782      	b.n	80014fa <forward_shuffled+0x92>
                    net.layers[curr_layer_idx].neurons[ curr_neuron_idx ].a = net.layers[curr_layer_idx].neurons[ curr_neuron_idx ].z;
 80015f4:	9a04      	ldr	r2, [sp, #16]
 80015f6:	9805      	ldr	r0, [sp, #20]
 80015f8:	9904      	ldr	r1, [sp, #16]
 80015fa:	f8dd c014 	ldr.w	ip, [sp, #20]
 80015fe:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001602:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001606:	684b      	ldr	r3, [r1, #4]
 8001608:	6852      	ldr	r2, [r2, #4]
 800160a:	fb08 330c 	mla	r3, r8, ip, r3
 800160e:	fb08 2800 	mla	r8, r8, r0, r2
 8001612:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8001616:	611a      	str	r2, [r3, #16]
 8001618:	e7a3      	b.n	8001562 <forward_shuffled+0xfa>
                net.layers[curr_layer_idx].neurons[ curr_neuron_idx ].a = 1/(1+exp(-net.layers[curr_layer_idx].neurons[ curr_neuron_idx ].z));
 800161a:	68d8      	ldr	r0, [r3, #12]
 800161c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8001620:	f7fe ffee 	bl	8000600 <__aeabi_f2d>
 8001624:	f001 f87c 	bl	8002720 <exp>
 8001628:	9b04      	ldr	r3, [sp, #16]
 800162a:	9a05      	ldr	r2, [sp, #20]
 800162c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	fb08 3802 	mla	r8, r8, r2, r3
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <forward_shuffled+0x1f4>)
 8001638:	2200      	movs	r2, #0
 800163a:	f7fe fe83 	bl	8000344 <__adddf3>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	2000      	movs	r0, #0
 8001644:	4905      	ldr	r1, [pc, #20]	; (800165c <forward_shuffled+0x1f4>)
 8001646:	f7ff f95d 	bl	8000904 <__aeabi_ddiv>
 800164a:	f7ff faf3 	bl	8000c34 <__aeabi_d2f>
 800164e:	f8c8 0010 	str.w	r0, [r8, #16]
 8001652:	e786      	b.n	8001562 <forward_shuffled+0xfa>
 8001654:	4145758e 	.word	0x4145758e
 8001658:	411b3554 	.word	0x411b3554
 800165c:	3ff00000 	.word	0x3ff00000

08001660 <ss_crc>:


// 0xA6 formerly 
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
 8001660:	4603      	mov	r3, r0
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
 8001662:	4401      	add	r1, r0
	uint8_t crc = 0x00;
 8001664:	2000      	movs	r0, #0
	while (len--) {
 8001666:	428b      	cmp	r3, r1
 8001668:	d100      	bne.n	800166c <ss_crc+0xc>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
		}
	}
	return crc;

}
 800166a:	4770      	bx	lr
		crc ^= *buf++;
 800166c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001670:	4050      	eors	r0, r2
 8001672:	2208      	movs	r2, #8
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8001674:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001678:	ea4f 0040 	mov.w	r0, r0, lsl #1
 800167c:	bf18      	it	ne
 800167e:	f080 004d 	eorne.w	r0, r0, #77	; 0x4d
		for (k = 0; k < 8; k++) {
 8001682:	3a01      	subs	r2, #1
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8001684:	b2c0      	uxtb	r0, r0
		for (k = 0; k < 8; k++) {
 8001686:	d1f5      	bne.n	8001674 <ss_crc+0x14>
 8001688:	e7ed      	b.n	8001666 <ss_crc+0x6>

0800168a <stuff_data>:
    return 0x00;

}

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
 800168a:	b530      	push	{r4, r5, lr}
	uint8_t i = 1;
	uint8_t last = 0;
 800168c:	2200      	movs	r2, #0
 800168e:	4604      	mov	r4, r0
	uint8_t i = 1;
 8001690:	2301      	movs	r3, #1
	for (; i < len; i++) {
 8001692:	428b      	cmp	r3, r1
 8001694:	d301      	bcc.n	800169a <stuff_data+0x10>
			buf[last] = i - last;
			last = i;
		}
	}
	return 0x00;
}
 8001696:	2000      	movs	r0, #0
 8001698:	bd30      	pop	{r4, r5, pc}
		if (buf[i] == FRAME_BYTE) {
 800169a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800169e:	b915      	cbnz	r5, 80016a6 <stuff_data+0x1c>
			buf[last] = i - last;
 80016a0:	1a9d      	subs	r5, r3, r2
 80016a2:	5485      	strb	r5, [r0, r2]
 80016a4:	461a      	mov	r2, r3
	for (; i < len; i++) {
 80016a6:	3301      	adds	r3, #1
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	e7f2      	b.n	8001692 <stuff_data+0x8>

080016ac <unstuff_data>:

uint8_t unstuff_data(uint8_t *buf, uint8_t len)
{
 80016ac:	b510      	push	{r4, lr}
	uint8_t next = buf[0];
 80016ae:	7802      	ldrb	r2, [r0, #0]
	buf[0] = 0x00;
 80016b0:	2400      	movs	r4, #0
{
 80016b2:	4603      	mov	r3, r0
	buf[0] = 0x00;
 80016b4:	7004      	strb	r4, [r0, #0]
	uint8_t next = buf[0];
 80016b6:	4610      	mov	r0, r2
	//len -= 1;
	uint8_t tmp = next;
	while ((next < len) && tmp != 0) {
 80016b8:	4288      	cmp	r0, r1
 80016ba:	d200      	bcs.n	80016be <unstuff_data+0x12>
 80016bc:	b902      	cbnz	r2, 80016c0 <unstuff_data+0x14>
		tmp = buf[next];
		buf[next] = FRAME_BYTE;
		next += tmp;
	}
	return next;
}
 80016be:	bd10      	pop	{r4, pc}
		tmp = buf[next];
 80016c0:	5c1a      	ldrb	r2, [r3, r0]
		buf[next] = FRAME_BYTE;
 80016c2:	541c      	strb	r4, [r3, r0]
		next += tmp;
 80016c4:	4410      	add	r0, r2
 80016c6:	b2c0      	uxtb	r0, r0
 80016c8:	e7f6      	b.n	80016b8 <unstuff_data+0xc>
 80016ca:	0000      	movs	r0, r0

080016cc <simpleserial_addcmd>:
	simpleserial_addcmd('v', 0, check_version);
    simpleserial_addcmd('w', 0, ss_get_commands);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*))
{
 80016cc:	b538      	push	{r3, r4, r5, lr}
	if(num_commands >= MAX_SS_CMDS) {
 80016ce:	4d0b      	ldr	r5, [pc, #44]	; (80016fc <simpleserial_addcmd+0x30>)
 80016d0:	682b      	ldr	r3, [r5, #0]
 80016d2:	2b0f      	cmp	r3, #15
 80016d4:	dd04      	ble.n	80016e0 <simpleserial_addcmd+0x14>
		putch('a');
 80016d6:	2061      	movs	r0, #97	; 0x61
		return 1;
	}

	if(len >= MAX_SS_LEN) {
		putch('b');
 80016d8:	f000 f9b2 	bl	8001a40 <putch>
		return 1;
 80016dc:	2001      	movs	r0, #1
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;

	return 0;
}
 80016de:	bd38      	pop	{r3, r4, r5, pc}
	if(len >= MAX_SS_LEN) {
 80016e0:	29ff      	cmp	r1, #255	; 0xff
 80016e2:	d901      	bls.n	80016e8 <simpleserial_addcmd+0x1c>
		putch('b');
 80016e4:	2062      	movs	r0, #98	; 0x62
 80016e6:	e7f7      	b.n	80016d8 <simpleserial_addcmd+0xc>
	commands[num_commands].c   = c;
 80016e8:	240c      	movs	r4, #12
 80016ea:	fb04 5403 	mla	r4, r4, r3, r5
	num_commands++;
 80016ee:	3301      	adds	r3, #1
	commands[num_commands].c   = c;
 80016f0:	7120      	strb	r0, [r4, #4]
	commands[num_commands].fp  = fp;
 80016f2:	e9c4 1202 	strd	r1, r2, [r4, #8]
	num_commands++;
 80016f6:	602b      	str	r3, [r5, #0]
	return 0;
 80016f8:	2000      	movs	r0, #0
 80016fa:	e7f0      	b.n	80016de <simpleserial_addcmd+0x12>
 80016fc:	200001bc 	.word	0x200001bc

08001700 <simpleserial_init>:
{
 8001700:	b508      	push	{r3, lr}
	simpleserial_addcmd('v', 0, check_version);
 8001702:	4a06      	ldr	r2, [pc, #24]	; (800171c <simpleserial_init+0x1c>)
 8001704:	2100      	movs	r1, #0
 8001706:	2076      	movs	r0, #118	; 0x76
 8001708:	f7ff ffe0 	bl	80016cc <simpleserial_addcmd>
}
 800170c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    simpleserial_addcmd('w', 0, ss_get_commands);
 8001710:	4a03      	ldr	r2, [pc, #12]	; (8001720 <simpleserial_init+0x20>)
 8001712:	2100      	movs	r1, #0
 8001714:	2077      	movs	r0, #119	; 0x77
 8001716:	f7ff bfd9 	b.w	80016cc <simpleserial_addcmd>
 800171a:	bf00      	nop
 800171c:	0800177b 	.word	0x0800177b
 8001720:	08001799 	.word	0x08001799

08001724 <simpleserial_put>:
	simpleserial_put('e', 0x01, &err);
	return;
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8001724:	b570      	push	{r4, r5, r6, lr}
 8001726:	b0c0      	sub	sp, #256	; 0x100
 8001728:	460c      	mov	r4, r1
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 800172a:	2500      	movs	r5, #0
{
 800172c:	4611      	mov	r1, r2
	data_buf[1] = c;
 800172e:	f88d 0001 	strb.w	r0, [sp, #1]
	data_buf[2] = size;
	int i = 0;
	for (; i < size; i++) {
		data_buf[i + 3] = output[i];
 8001732:	4622      	mov	r2, r4
 8001734:	f10d 0003 	add.w	r0, sp, #3
	data_buf[2] = size;
 8001738:	f88d 4002 	strb.w	r4, [sp, #2]
	data_buf[0] = 0x00;
 800173c:	f88d 5000 	strb.w	r5, [sp]
		data_buf[i + 3] = output[i];
 8001740:	f001 fa40 	bl	8002bc4 <memcpy>
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8001744:	1ca1      	adds	r1, r4, #2
 8001746:	b2c9      	uxtb	r1, r1
 8001748:	f10d 0001 	add.w	r0, sp, #1
 800174c:	f7ff ff88 	bl	8001660 <ss_crc>
 8001750:	eb0d 0304 	add.w	r3, sp, r4
	data_buf[i + 4] = 0x00;
 8001754:	1d26      	adds	r6, r4, #4
	stuff_data(data_buf, i + 5);
 8001756:	1d61      	adds	r1, r4, #5
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8001758:	70d8      	strb	r0, [r3, #3]
	stuff_data(data_buf, i + 5);
 800175a:	b2c9      	uxtb	r1, r1
 800175c:	4668      	mov	r0, sp
	data_buf[i + 4] = 0x00;
 800175e:	f80d 5006 	strb.w	r5, [sp, r6]
	stuff_data(data_buf, i + 5);
 8001762:	f7ff ff92 	bl	800168a <stuff_data>
	for (int i = 0; i < size + 5; i++) {
 8001766:	466c      	mov	r4, sp
		putch(data_buf[i]);
 8001768:	f814 0b01 	ldrb.w	r0, [r4], #1
	for (int i = 0; i < size + 5; i++) {
 800176c:	3501      	adds	r5, #1
		putch(data_buf[i]);
 800176e:	f000 f967 	bl	8001a40 <putch>
	for (int i = 0; i < size + 5; i++) {
 8001772:	42ae      	cmp	r6, r5
 8001774:	daf8      	bge.n	8001768 <simpleserial_put+0x44>
	}
}
 8001776:	b040      	add	sp, #256	; 0x100
 8001778:	bd70      	pop	{r4, r5, r6, pc}

0800177a <check_version>:
{
 800177a:	b507      	push	{r0, r1, r2, lr}
	uint8_t ver = SS_VER;
 800177c:	2303      	movs	r3, #3
	simpleserial_put('r', 1, &ver);
 800177e:	f10d 0207 	add.w	r2, sp, #7
 8001782:	2101      	movs	r1, #1
 8001784:	2072      	movs	r0, #114	; 0x72
	uint8_t ver = SS_VER;
 8001786:	f88d 3007 	strb.w	r3, [sp, #7]
	simpleserial_put('r', 1, &ver);
 800178a:	f7ff ffcb 	bl	8001724 <simpleserial_put>
}
 800178e:	2000      	movs	r0, #0
 8001790:	b003      	add	sp, #12
 8001792:	f85d fb04 	ldr.w	pc, [sp], #4
 8001796:	0000      	movs	r0, r0

08001798 <ss_get_commands>:
{
 8001798:	b530      	push	{r4, r5, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 800179a:	480c      	ldr	r0, [pc, #48]	; (80017cc <ss_get_commands+0x34>)
 800179c:	7801      	ldrb	r1, [r0, #0]
{
 800179e:	b085      	sub	sp, #20
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80017a0:	2200      	movs	r2, #0
        cmd_chars[i] = commands[i].c;
 80017a2:	240c      	movs	r4, #12
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80017a4:	b2d3      	uxtb	r3, r2
 80017a6:	428b      	cmp	r3, r1
 80017a8:	f102 0201 	add.w	r2, r2, #1
 80017ac:	db06      	blt.n	80017bc <ss_get_commands+0x24>
    simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
 80017ae:	466a      	mov	r2, sp
 80017b0:	2072      	movs	r0, #114	; 0x72
 80017b2:	f7ff ffb7 	bl	8001724 <simpleserial_put>
}
 80017b6:	2000      	movs	r0, #0
 80017b8:	b005      	add	sp, #20
 80017ba:	bd30      	pop	{r4, r5, pc}
        cmd_chars[i] = commands[i].c;
 80017bc:	ad04      	add	r5, sp, #16
 80017be:	441d      	add	r5, r3
 80017c0:	fb04 0303 	mla	r3, r4, r3, r0
 80017c4:	791b      	ldrb	r3, [r3, #4]
 80017c6:	f805 3c10 	strb.w	r3, [r5, #-16]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80017ca:	e7eb      	b.n	80017a4 <ss_get_commands+0xc>
 80017cc:	200001bc 	.word	0x200001bc

080017d0 <simpleserial_get>:
{
 80017d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017d4:	b0c2      	sub	sp, #264	; 0x108
	uint8_t err = 0;
 80017d6:	2500      	movs	r5, #0
 80017d8:	ae02      	add	r6, sp, #8
 80017da:	f88d 5007 	strb.w	r5, [sp, #7]
	for (int i = 0; i < 4; i++) {
 80017de:	4634      	mov	r4, r6
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 80017e0:	f000 f914 	bl	8001a0c <getch>
 80017e4:	f806 0b01 	strb.w	r0, [r6], #1
		if (data_buf[i] == FRAME_BYTE) {
 80017e8:	b958      	cbnz	r0, 8001802 <simpleserial_get+0x32>
			err = SS_ERR_FRAME_BYTE;
 80017ea:	2305      	movs	r3, #5
		err = SS_ERR_CRC;
 80017ec:	f88d 3007 	strb.w	r3, [sp, #7]
	simpleserial_put('e', 0x01, &err);
 80017f0:	f10d 0207 	add.w	r2, sp, #7
 80017f4:	2101      	movs	r1, #1
 80017f6:	2065      	movs	r0, #101	; 0x65
 80017f8:	f7ff ff94 	bl	8001724 <simpleserial_put>
}
 80017fc:	b042      	add	sp, #264	; 0x108
 80017fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int i = 0; i < 4; i++) {
 8001802:	3501      	adds	r5, #1
 8001804:	2d04      	cmp	r5, #4
 8001806:	d1eb      	bne.n	80017e0 <simpleserial_get+0x10>
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8001808:	4629      	mov	r1, r5
 800180a:	4620      	mov	r0, r4
 800180c:	f7ff ff4e 	bl	80016ac <unstuff_data>
	for(c = 0; c < num_commands; c++)
 8001810:	4f25      	ldr	r7, [pc, #148]	; (80018a8 <simpleserial_get+0xd8>)
		if(commands[c].c == data_buf[1])
 8001812:	7861      	ldrb	r1, [r4, #1]
	for(c = 0; c < num_commands; c++)
 8001814:	683a      	ldr	r2, [r7, #0]
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8001816:	4680      	mov	r8, r0
	for(c = 0; c < num_commands; c++)
 8001818:	2300      	movs	r3, #0
		if(commands[c].c == data_buf[1])
 800181a:	200c      	movs	r0, #12
	for(c = 0; c < num_commands; c++)
 800181c:	fa5f f983 	uxtb.w	r9, r3
 8001820:	4591      	cmp	r9, r2
 8001822:	db02      	blt.n	800182a <simpleserial_get+0x5a>
	if (c == num_commands) {
 8001824:	d107      	bne.n	8001836 <simpleserial_get+0x66>
		err = SS_ERR_CMD;
 8001826:	2301      	movs	r3, #1
 8001828:	e7e0      	b.n	80017ec <simpleserial_get+0x1c>
		if(commands[c].c == data_buf[1])
 800182a:	fb00 7609 	mla	r6, r0, r9, r7
 800182e:	3301      	adds	r3, #1
 8001830:	7936      	ldrb	r6, [r6, #4]
 8001832:	428e      	cmp	r6, r1
 8001834:	d1f2      	bne.n	800181c <simpleserial_get+0x4c>
	if ((data_buf[3] + 5) < next_frame) {
 8001836:	78e3      	ldrb	r3, [r4, #3]
 8001838:	3305      	adds	r3, #5
 800183a:	4543      	cmp	r3, r8
 800183c:	da02      	bge.n	8001844 <simpleserial_get+0x74>
		err = SS_ERR_LEN;
 800183e:	2304      	movs	r3, #4
 8001840:	e7d4      	b.n	80017ec <simpleserial_get+0x1c>
 8001842:	4635      	mov	r5, r6
		data_buf[i] = getch();
 8001844:	f000 f8e2 	bl	8001a0c <getch>
 8001848:	5560      	strb	r0, [r4, r5]
		if (data_buf[i] == FRAME_BYTE) {
 800184a:	2800      	cmp	r0, #0
 800184c:	d0cd      	beq.n	80017ea <simpleserial_get+0x1a>
	for (; i < data_buf[3] + 5; i++) {
 800184e:	78e3      	ldrb	r3, [r4, #3]
 8001850:	1c6e      	adds	r6, r5, #1
 8001852:	3304      	adds	r3, #4
 8001854:	42b3      	cmp	r3, r6
 8001856:	daf4      	bge.n	8001842 <simpleserial_get+0x72>
	data_buf[i] = getch();
 8001858:	f000 f8d8 	bl	8001a0c <getch>
 800185c:	55a0      	strb	r0, [r4, r6]
	if (data_buf[i] != FRAME_BYTE) {
 800185e:	2800      	cmp	r0, #0
 8001860:	d1ed      	bne.n	800183e <simpleserial_get+0x6e>
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 8001862:	f1c8 0101 	rsb	r1, r8, #1
 8001866:	fa51 f186 	uxtab	r1, r1, r6
 800186a:	b2c9      	uxtb	r1, r1
 800186c:	fa5f fa86 	uxtb.w	sl, r6
 8001870:	eb04 0008 	add.w	r0, r4, r8
 8001874:	f7ff ff1a 	bl	80016ac <unstuff_data>
	uint8_t crc = ss_crc(data_buf+1, i-2);
 8001878:	f1aa 0102 	sub.w	r1, sl, #2
 800187c:	b2c9      	uxtb	r1, r1
 800187e:	f10d 0009 	add.w	r0, sp, #9
 8001882:	f7ff feed 	bl	8001660 <ss_crc>
	if (crc != data_buf[i-1]) {
 8001886:	5d63      	ldrb	r3, [r4, r5]
 8001888:	4283      	cmp	r3, r0
 800188a:	d001      	beq.n	8001890 <simpleserial_get+0xc0>
		err = SS_ERR_CRC;
 800188c:	2302      	movs	r3, #2
 800188e:	e7ad      	b.n	80017ec <simpleserial_get+0x1c>
	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 8001890:	230c      	movs	r3, #12
 8001892:	fb03 7709 	mla	r7, r3, r9, r7
 8001896:	78e2      	ldrb	r2, [r4, #3]
 8001898:	68fd      	ldr	r5, [r7, #12]
 800189a:	78a1      	ldrb	r1, [r4, #2]
 800189c:	7860      	ldrb	r0, [r4, #1]
 800189e:	446b      	add	r3, sp
 80018a0:	47a8      	blx	r5
 80018a2:	f88d 0007 	strb.w	r0, [sp, #7]
 80018a6:	e7a3      	b.n	80017f0 <simpleserial_get+0x20>
 80018a8:	200001bc 	.word	0x200001bc

080018ac <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 80018ac:	b570      	push	{r4, r5, r6, lr}
 80018ae:	b096      	sub	sp, #88	; 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80018b0:	2400      	movs	r4, #0
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80018b2:	2603      	movs	r6, #3
 80018b4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80018b8:	a80c      	add	r0, sp, #48	; 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80018ba:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80018bc:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80018c0:	9410      	str	r4, [sp, #64]	; 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 80018c2:	9414      	str	r4, [sp, #80]	; 0x50
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80018c4:	f000 f8d4 	bl	8001a70 <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80018c8:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 80018ca:	4621      	mov	r1, r4
 80018cc:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80018ce:	e9cd 3502 	strd	r3, r5, [sp, #8]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018d2:	e9cd 4404 	strd	r4, r4, [sp, #16]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d6:	9406      	str	r4, [sp, #24]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 80018d8:	f000 fb38 	bl	8001f4c <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <platform_init+0x78>)
 80018de:	695a      	ldr	r2, [r3, #20]
 80018e0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80018e4:	615a      	str	r2, [r3, #20]
 80018e6:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80018e8:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 80018f0:	4c0d      	ldr	r4, [pc, #52]	; (8001928 <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 80018f6:	a907      	add	r1, sp, #28
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 80018f8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 80018fc:	4620      	mov	r0, r4
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80018fe:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8001902:	f000 fbc9 	bl	8002098 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8001906:	462a      	mov	r2, r5
 8001908:	4620      	mov	r0, r4
 800190a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800190e:	f000 fc87 	bl	8002220 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8001912:	462a      	mov	r2, r5
 8001914:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001918:	4620      	mov	r0, r4
 800191a:	f000 fc81 	bl	8002220 <HAL_GPIO_WritePin>
#endif
}
 800191e:	b016      	add	sp, #88	; 0x58
 8001920:	bd70      	pop	{r4, r5, r6, pc}
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000
 8001928:	48000800 	.word	0x48000800

0800192c <init_uart>:

void init_uart(void)
{
 800192c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 800192e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
{
 8001932:	b088      	sub	sp, #32
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GpioInit.Pull      = GPIO_PULLUP;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 800193a:	2101      	movs	r1, #1
 800193c:	2303      	movs	r3, #3
 800193e:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 8001942:	4c16      	ldr	r4, [pc, #88]	; (800199c <init_uart+0x70>)
  GpioInit.Alternate = GPIO_AF7_USART1;
 8001944:	2307      	movs	r3, #7
 8001946:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 8001948:	6963      	ldr	r3, [r4, #20]
 800194a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800194e:	6163      	str	r3, [r4, #20]
 8001950:	6963      	ldr	r3, [r4, #20]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8001958:	a903      	add	r1, sp, #12
 800195a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __GPIOA_CLK_ENABLE();
 800195e:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8001960:	f000 fb9a 	bl	8002098 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8001964:	480e      	ldr	r0, [pc, #56]	; (80019a0 <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 8001966:	f8df c03c 	ldr.w	ip, [pc, #60]	; 80019a4 <init_uart+0x78>
 800196a:	f44f 3361 	mov.w	r3, #230400	; 0x38400
 800196e:	e9c0 c300 	strd	ip, r3, [r0]
  #else
  UartHandle.Init.BaudRate   = 38400;
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8001972:	2300      	movs	r3, #0
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8001974:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8001978:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800197a:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 800197c:	230c      	movs	r3, #12
 800197e:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 8001980:	69a3      	ldr	r3, [r4, #24]
 8001982:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001986:	61a3      	str	r3, [r4, #24]
 8001988:	69a3      	ldr	r3, [r4, #24]
 800198a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800198e:	9302      	str	r3, [sp, #8]
 8001990:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 8001992:	f000 fd99 	bl	80024c8 <HAL_UART_Init>
}
 8001996:	b008      	add	sp, #32
 8001998:	bd10      	pop	{r4, pc}
 800199a:	bf00      	nop
 800199c:	40021000 	.word	0x40021000
 80019a0:	20000280 	.word	0x20000280
 80019a4:	40013800 	.word	0x40013800

080019a8 <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a8:	4b10      	ldr	r3, [pc, #64]	; (80019ec <trigger_setup+0x44>)
{
 80019aa:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ac:	695a      	ldr	r2, [r3, #20]
 80019ae:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80019b2:	615a      	str	r2, [r3, #20]
 80019b4:	695b      	ldr	r3, [r3, #20]
{
 80019b6:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80019c0:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80019c4:	2301      	movs	r3, #1
 80019c6:	e9cd 4301 	strd	r4, r3, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80019ca:	2500      	movs	r5, #0
 80019cc:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 80019ce:	a901      	add	r1, sp, #4
 80019d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80019d4:	e9cd 5303 	strd	r5, r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 80019d8:	f000 fb5e 	bl	8002098 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 80019dc:	462a      	mov	r2, r5
 80019de:	4621      	mov	r1, r4
 80019e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e4:	f000 fc1c 	bl	8002220 <HAL_GPIO_WritePin>
}
 80019e8:	b007      	add	sp, #28
 80019ea:	bd30      	pop	{r4, r5, pc}
 80019ec:	40021000 	.word	0x40021000

080019f0 <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 80019f0:	2201      	movs	r2, #1
 80019f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019fa:	f000 bc11 	b.w	8002220 <HAL_GPIO_WritePin>

080019fe <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 80019fe:	2200      	movs	r2, #0
 8001a00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a08:	f000 bc0a 	b.w	8002220 <HAL_GPIO_WritePin>

08001a0c <getch>:
}

char getch(void)
{
 8001a0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8001a0e:	4d0a      	ldr	r5, [pc, #40]	; (8001a38 <getch+0x2c>)
    USART1->ICR |= (1 << 3);
 8001a10:	4c0a      	ldr	r4, [pc, #40]	; (8001a3c <getch+0x30>)
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8001a12:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a16:	2201      	movs	r2, #1
 8001a18:	f10d 0107 	add.w	r1, sp, #7
 8001a1c:	4628      	mov	r0, r5
 8001a1e:	f000 fdd4 	bl	80025ca <HAL_UART_Receive>
 8001a22:	b918      	cbnz	r0, 8001a2c <getch+0x20>
  //putch(d);
  return d;
}
 8001a24:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001a28:	b003      	add	sp, #12
 8001a2a:	bd30      	pop	{r4, r5, pc}
    USART1->ICR |= (1 << 3);
 8001a2c:	6a23      	ldr	r3, [r4, #32]
 8001a2e:	f043 0308 	orr.w	r3, r3, #8
 8001a32:	6223      	str	r3, [r4, #32]
 8001a34:	e7ed      	b.n	8001a12 <getch+0x6>
 8001a36:	bf00      	nop
 8001a38:	20000280 	.word	0x20000280
 8001a3c:	40013800 	.word	0x40013800

08001a40 <putch>:

void putch(char c)
{
 8001a40:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8001a42:	f241 3388 	movw	r3, #5000	; 0x1388
  uint8_t d  = c;
 8001a46:	f88d 0007 	strb.w	r0, [sp, #7]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f10d 0107 	add.w	r1, sp, #7
 8001a50:	4802      	ldr	r0, [pc, #8]	; (8001a5c <putch+0x1c>)
 8001a52:	f000 fd64 	bl	800251e <HAL_UART_Transmit>
}
 8001a56:	b003      	add	sp, #12
 8001a58:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a5c:	20000280 	.word	0x20000280

08001a60 <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 8001a60:	4b02      	ldr	r3, [pc, #8]	; (8001a6c <HAL_GetTick+0xc>)
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	1c42      	adds	r2, r0, #1
 8001a66:	601a      	str	r2, [r3, #0]
}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	200002f0 	.word	0x200002f0

08001a70 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a70:	6803      	ldr	r3, [r0, #0]
{
 8001a72:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a76:	07d9      	lsls	r1, r3, #31
{
 8001a78:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7a:	d411      	bmi.n	8001aa0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7c:	6823      	ldr	r3, [r4, #0]
 8001a7e:	079a      	lsls	r2, r3, #30
 8001a80:	f100 8086 	bmi.w	8001b90 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a84:	6823      	ldr	r3, [r4, #0]
 8001a86:	071e      	lsls	r6, r3, #28
 8001a88:	f100 80f4 	bmi.w	8001c74 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a8c:	6823      	ldr	r3, [r4, #0]
 8001a8e:	075d      	lsls	r5, r3, #29
 8001a90:	f100 8140 	bmi.w	8001d14 <HAL_RCC_OscConfig+0x2a4>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a94:	69e2      	ldr	r2, [r4, #28]
 8001a96:	2a00      	cmp	r2, #0
 8001a98:	f040 81cb 	bne.w	8001e32 <HAL_RCC_OscConfig+0x3c2>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	e021      	b.n	8001ae4 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001aa0:	499a      	ldr	r1, [pc, #616]	; (8001d0c <HAL_RCC_OscConfig+0x29c>)
 8001aa2:	684b      	ldr	r3, [r1, #4]
 8001aa4:	f003 030c 	and.w	r3, r3, #12
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d007      	beq.n	8001abc <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aac:	684b      	ldr	r3, [r1, #4]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d119      	bne.n	8001aea <HAL_RCC_OscConfig+0x7a>
 8001ab6:	684b      	ldr	r3, [r1, #4]
 8001ab8:	03db      	lsls	r3, r3, #15
 8001aba:	d516      	bpl.n	8001aea <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ac0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac4:	6809      	ldr	r1, [r1, #0]
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	fab3 f383 	clz	r3, r3
 8001ace:	f003 031f 	and.w	r3, r3, #31
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	420b      	tst	r3, r1
 8001ada:	d0cf      	beq.n	8001a7c <HAL_RCC_OscConfig+0xc>
 8001adc:	6863      	ldr	r3, [r4, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1cc      	bne.n	8001a7c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001ae2:	2001      	movs	r0, #1
}
 8001ae4:	b002      	add	sp, #8
 8001ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aea:	6862      	ldr	r2, [r4, #4]
 8001aec:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001af0:	d124      	bne.n	8001b3c <HAL_RCC_OscConfig+0xcc>
 8001af2:	680b      	ldr	r3, [r1, #0]
 8001af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af8:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001afa:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001afc:	68a0      	ldr	r0, [r4, #8]
 8001afe:	f023 030f 	bic.w	r3, r3, #15
 8001b02:	4303      	orrs	r3, r0
 8001b04:	62cb      	str	r3, [r1, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b06:	b34a      	cbz	r2, 8001b5c <HAL_RCC_OscConfig+0xec>
        tickstart = HAL_GetTick();
 8001b08:	f7ff ffaa 	bl	8001a60 <HAL_GetTick>
 8001b0c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001b10:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b12:	2701      	movs	r7, #1
 8001b14:	fa96 f3a6 	rbit	r3, r6
 8001b18:	680a      	ldr	r2, [r1, #0]
 8001b1a:	fa96 f3a6 	rbit	r3, r6
 8001b1e:	fab3 f383 	clz	r3, r3
 8001b22:	f003 031f 	and.w	r3, r3, #31
 8001b26:	fa07 f303 	lsl.w	r3, r7, r3
 8001b2a:	4213      	tst	r3, r2
 8001b2c:	d1a6      	bne.n	8001a7c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b2e:	f7ff ff97 	bl	8001a60 <HAL_GetTick>
 8001b32:	1b40      	subs	r0, r0, r5
 8001b34:	2864      	cmp	r0, #100	; 0x64
 8001b36:	d9ed      	bls.n	8001b14 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8001b38:	2003      	movs	r0, #3
 8001b3a:	e7d3      	b.n	8001ae4 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3c:	680b      	ldr	r3, [r1, #0]
 8001b3e:	b932      	cbnz	r2, 8001b4e <HAL_RCC_OscConfig+0xde>
 8001b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b44:	600b      	str	r3, [r1, #0]
 8001b46:	680b      	ldr	r3, [r1, #0]
 8001b48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b4c:	e7d4      	b.n	8001af8 <HAL_RCC_OscConfig+0x88>
 8001b4e:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001b52:	d1f5      	bne.n	8001b40 <HAL_RCC_OscConfig+0xd0>
 8001b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b58:	600b      	str	r3, [r1, #0]
 8001b5a:	e7ca      	b.n	8001af2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001b5c:	f7ff ff80 	bl	8001a60 <HAL_GetTick>
 8001b60:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001b64:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b66:	2701      	movs	r7, #1
 8001b68:	fa96 f3a6 	rbit	r3, r6
 8001b6c:	680a      	ldr	r2, [r1, #0]
 8001b6e:	fa96 f3a6 	rbit	r3, r6
 8001b72:	fab3 f383 	clz	r3, r3
 8001b76:	f003 031f 	and.w	r3, r3, #31
 8001b7a:	fa07 f303 	lsl.w	r3, r7, r3
 8001b7e:	4213      	tst	r3, r2
 8001b80:	f43f af7c 	beq.w	8001a7c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b84:	f7ff ff6c 	bl	8001a60 <HAL_GetTick>
 8001b88:	1b40      	subs	r0, r0, r5
 8001b8a:	2864      	cmp	r0, #100	; 0x64
 8001b8c:	d9ec      	bls.n	8001b68 <HAL_RCC_OscConfig+0xf8>
 8001b8e:	e7d3      	b.n	8001b38 <HAL_RCC_OscConfig+0xc8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b90:	495e      	ldr	r1, [pc, #376]	; (8001d0c <HAL_RCC_OscConfig+0x29c>)
 8001b92:	684b      	ldr	r3, [r1, #4]
 8001b94:	f013 0f0c 	tst.w	r3, #12
 8001b98:	d007      	beq.n	8001baa <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b9a:	684b      	ldr	r3, [r1, #4]
 8001b9c:	f003 030c 	and.w	r3, r3, #12
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d121      	bne.n	8001be8 <HAL_RCC_OscConfig+0x178>
 8001ba4:	684b      	ldr	r3, [r1, #4]
 8001ba6:	03df      	lsls	r7, r3, #15
 8001ba8:	d41e      	bmi.n	8001be8 <HAL_RCC_OscConfig+0x178>
 8001baa:	2302      	movs	r3, #2
 8001bac:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb0:	6808      	ldr	r0, [r1, #0]
 8001bb2:	fa93 f3a3 	rbit	r3, r3
 8001bb6:	fab3 f383 	clz	r3, r3
 8001bba:	f003 031f 	and.w	r3, r3, #31
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	4203      	tst	r3, r0
 8001bc6:	d002      	beq.n	8001bce <HAL_RCC_OscConfig+0x15e>
 8001bc8:	6923      	ldr	r3, [r4, #16]
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d189      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bce:	6808      	ldr	r0, [r1, #0]
 8001bd0:	23f8      	movs	r3, #248	; 0xf8
 8001bd2:	fa93 f3a3 	rbit	r3, r3
 8001bd6:	fab3 f283 	clz	r2, r3
 8001bda:	6963      	ldr	r3, [r4, #20]
 8001bdc:	4093      	lsls	r3, r2
 8001bde:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]
 8001be6:	e74d      	b.n	8001a84 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001be8:	6922      	ldr	r2, [r4, #16]
 8001bea:	2501      	movs	r5, #1
 8001bec:	b302      	cbz	r2, 8001c30 <HAL_RCC_OscConfig+0x1c0>
 8001bee:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8001bf2:	fab3 f383 	clz	r3, r3
 8001bf6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bfa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	2702      	movs	r7, #2
 8001c02:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001c04:	f7ff ff2c 	bl	8001a60 <HAL_GetTick>
 8001c08:	4606      	mov	r6, r0
 8001c0a:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0e:	680a      	ldr	r2, [r1, #0]
 8001c10:	fa97 f3a7 	rbit	r3, r7
 8001c14:	fab3 f383 	clz	r3, r3
 8001c18:	f003 031f 	and.w	r3, r3, #31
 8001c1c:	fa05 f303 	lsl.w	r3, r5, r3
 8001c20:	4213      	tst	r3, r2
 8001c22:	d1d4      	bne.n	8001bce <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c24:	f7ff ff1c 	bl	8001a60 <HAL_GetTick>
 8001c28:	1b80      	subs	r0, r0, r6
 8001c2a:	2802      	cmp	r0, #2
 8001c2c:	d9ed      	bls.n	8001c0a <HAL_RCC_OscConfig+0x19a>
 8001c2e:	e783      	b.n	8001b38 <HAL_RCC_OscConfig+0xc8>
 8001c30:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8001c34:	fab3 f383 	clz	r3, r3
 8001c38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	2702      	movs	r7, #2
 8001c44:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c46:	f7ff ff0b 	bl	8001a60 <HAL_GetTick>
 8001c4a:	4606      	mov	r6, r0
 8001c4c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c50:	680a      	ldr	r2, [r1, #0]
 8001c52:	fa97 f3a7 	rbit	r3, r7
 8001c56:	fab3 f383 	clz	r3, r3
 8001c5a:	f003 031f 	and.w	r3, r3, #31
 8001c5e:	fa05 f303 	lsl.w	r3, r5, r3
 8001c62:	4213      	tst	r3, r2
 8001c64:	f43f af0e 	beq.w	8001a84 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c68:	f7ff fefa 	bl	8001a60 <HAL_GetTick>
 8001c6c:	1b80      	subs	r0, r0, r6
 8001c6e:	2802      	cmp	r0, #2
 8001c70:	d9ec      	bls.n	8001c4c <HAL_RCC_OscConfig+0x1dc>
 8001c72:	e761      	b.n	8001b38 <HAL_RCC_OscConfig+0xc8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c74:	69a2      	ldr	r2, [r4, #24]
 8001c76:	4d25      	ldr	r5, [pc, #148]	; (8001d0c <HAL_RCC_OscConfig+0x29c>)
 8001c78:	4825      	ldr	r0, [pc, #148]	; (8001d10 <HAL_RCC_OscConfig+0x2a0>)
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	b312      	cbz	r2, 8001cc4 <HAL_RCC_OscConfig+0x254>
 8001c7e:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 8001c82:	fab3 f383 	clz	r3, r3
 8001c86:	4403      	add	r3, r0
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	2602      	movs	r6, #2
 8001c8c:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 8001c8e:	f7ff fee7 	bl	8001a60 <HAL_GetTick>
 8001c92:	4607      	mov	r7, r0
 8001c94:	fa96 f3a6 	rbit	r3, r6
 8001c98:	fa96 f3a6 	rbit	r3, r6
 8001c9c:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001ca2:	fa96 f3a6 	rbit	r3, r6
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb2:	4213      	tst	r3, r2
 8001cb4:	f47f aeea 	bne.w	8001a8c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cb8:	f7ff fed2 	bl	8001a60 <HAL_GetTick>
 8001cbc:	1bc0      	subs	r0, r0, r7
 8001cbe:	2802      	cmp	r0, #2
 8001cc0:	d9e8      	bls.n	8001c94 <HAL_RCC_OscConfig+0x224>
 8001cc2:	e739      	b.n	8001b38 <HAL_RCC_OscConfig+0xc8>
 8001cc4:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 8001cc8:	fab3 f383 	clz	r3, r3
 8001ccc:	4403      	add	r3, r0
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	2602      	movs	r6, #2
 8001cd2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001cd4:	f7ff fec4 	bl	8001a60 <HAL_GetTick>
 8001cd8:	4607      	mov	r7, r0
 8001cda:	fa96 f3a6 	rbit	r3, r6
 8001cde:	fa96 f3a6 	rbit	r3, r6
 8001ce2:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001ce8:	fa96 f3a6 	rbit	r3, r6
 8001cec:	fab3 f383 	clz	r3, r3
 8001cf0:	f003 031f 	and.w	r3, r3, #31
 8001cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf8:	4213      	tst	r3, r2
 8001cfa:	f43f aec7 	beq.w	8001a8c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cfe:	f7ff feaf 	bl	8001a60 <HAL_GetTick>
 8001d02:	1bc0      	subs	r0, r0, r7
 8001d04:	2802      	cmp	r0, #2
 8001d06:	d9e8      	bls.n	8001cda <HAL_RCC_OscConfig+0x26a>
 8001d08:	e716      	b.n	8001b38 <HAL_RCC_OscConfig+0xc8>
 8001d0a:	bf00      	nop
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	10908120 	.word	0x10908120
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d14:	498a      	ldr	r1, [pc, #552]	; (8001f40 <HAL_RCC_OscConfig+0x4d0>)
 8001d16:	69cb      	ldr	r3, [r1, #28]
 8001d18:	00d8      	lsls	r0, r3, #3
 8001d1a:	d433      	bmi.n	8001d84 <HAL_RCC_OscConfig+0x314>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d1c:	69cb      	ldr	r3, [r1, #28]
 8001d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d22:	61cb      	str	r3, [r1, #28]
 8001d24:	69cb      	ldr	r3, [r1, #28]
 8001d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	9301      	str	r3, [sp, #4]
 8001d2c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d2e:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d30:	4e84      	ldr	r6, [pc, #528]	; (8001f44 <HAL_RCC_OscConfig+0x4d4>)
 8001d32:	6833      	ldr	r3, [r6, #0]
 8001d34:	05da      	lsls	r2, r3, #23
 8001d36:	d527      	bpl.n	8001d88 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d38:	68e3      	ldr	r3, [r4, #12]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d134      	bne.n	8001da8 <HAL_RCC_OscConfig+0x338>
 8001d3e:	6a0b      	ldr	r3, [r1, #32]
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8001d46:	f7ff fe8b 	bl	8001a60 <HAL_GetTick>
 8001d4a:	2602      	movs	r6, #2
 8001d4c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4e:	f04f 0801 	mov.w	r8, #1
 8001d52:	fa96 f3a6 	rbit	r3, r6
 8001d56:	fa96 f3a6 	rbit	r3, r6
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d061      	beq.n	8001e22 <HAL_RCC_OscConfig+0x3b2>
 8001d5e:	6a0a      	ldr	r2, [r1, #32]
 8001d60:	fa96 f3a6 	rbit	r3, r6
 8001d64:	fab3 f383 	clz	r3, r3
 8001d68:	f003 031f 	and.w	r3, r3, #31
 8001d6c:	fa08 f303 	lsl.w	r3, r8, r3
 8001d70:	4213      	tst	r3, r2
 8001d72:	d04e      	beq.n	8001e12 <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8001d74:	2d00      	cmp	r5, #0
 8001d76:	f43f ae8d 	beq.w	8001a94 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d7a:	69cb      	ldr	r3, [r1, #28]
 8001d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d80:	61cb      	str	r3, [r1, #28]
 8001d82:	e687      	b.n	8001a94 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001d84:	2500      	movs	r5, #0
 8001d86:	e7d3      	b.n	8001d30 <HAL_RCC_OscConfig+0x2c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d88:	6833      	ldr	r3, [r6, #0]
 8001d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d8e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001d90:	f7ff fe66 	bl	8001a60 <HAL_GetTick>
 8001d94:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d96:	6833      	ldr	r3, [r6, #0]
 8001d98:	05db      	lsls	r3, r3, #23
 8001d9a:	d4cd      	bmi.n	8001d38 <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9c:	f7ff fe60 	bl	8001a60 <HAL_GetTick>
 8001da0:	1bc0      	subs	r0, r0, r7
 8001da2:	2864      	cmp	r0, #100	; 0x64
 8001da4:	d9f7      	bls.n	8001d96 <HAL_RCC_OscConfig+0x326>
 8001da6:	e6c7      	b.n	8001b38 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da8:	bb2b      	cbnz	r3, 8001df6 <HAL_RCC_OscConfig+0x386>
 8001daa:	6a0b      	ldr	r3, [r1, #32]
 8001dac:	f023 0301 	bic.w	r3, r3, #1
 8001db0:	620b      	str	r3, [r1, #32]
 8001db2:	6a0b      	ldr	r3, [r1, #32]
 8001db4:	f023 0304 	bic.w	r3, r3, #4
 8001db8:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8001dba:	f7ff fe51 	bl	8001a60 <HAL_GetTick>
 8001dbe:	2602      	movs	r6, #2
 8001dc0:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc2:	f04f 0801 	mov.w	r8, #1
 8001dc6:	fa96 f3a6 	rbit	r3, r6
 8001dca:	fa96 f3a6 	rbit	r3, r6
 8001dce:	b363      	cbz	r3, 8001e2a <HAL_RCC_OscConfig+0x3ba>
 8001dd0:	6a0a      	ldr	r2, [r1, #32]
 8001dd2:	fa96 f3a6 	rbit	r3, r6
 8001dd6:	fab3 f383 	clz	r3, r3
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	fa08 f303 	lsl.w	r3, r8, r3
 8001de2:	4213      	tst	r3, r2
 8001de4:	d0c6      	beq.n	8001d74 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de6:	f7ff fe3b 	bl	8001a60 <HAL_GetTick>
 8001dea:	f241 3388 	movw	r3, #5000	; 0x1388
 8001dee:	1bc0      	subs	r0, r0, r7
 8001df0:	4298      	cmp	r0, r3
 8001df2:	d9e8      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x356>
 8001df4:	e6a0      	b.n	8001b38 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df6:	2b05      	cmp	r3, #5
 8001df8:	6a0b      	ldr	r3, [r1, #32]
 8001dfa:	d103      	bne.n	8001e04 <HAL_RCC_OscConfig+0x394>
 8001dfc:	f043 0304 	orr.w	r3, r3, #4
 8001e00:	620b      	str	r3, [r1, #32]
 8001e02:	e79c      	b.n	8001d3e <HAL_RCC_OscConfig+0x2ce>
 8001e04:	f023 0301 	bic.w	r3, r3, #1
 8001e08:	620b      	str	r3, [r1, #32]
 8001e0a:	6a0b      	ldr	r3, [r1, #32]
 8001e0c:	f023 0304 	bic.w	r3, r3, #4
 8001e10:	e798      	b.n	8001d44 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e12:	f7ff fe25 	bl	8001a60 <HAL_GetTick>
 8001e16:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e1a:	1bc0      	subs	r0, r0, r7
 8001e1c:	4298      	cmp	r0, r3
 8001e1e:	d998      	bls.n	8001d52 <HAL_RCC_OscConfig+0x2e2>
 8001e20:	e68a      	b.n	8001b38 <HAL_RCC_OscConfig+0xc8>
 8001e22:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e26:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001e28:	e79a      	b.n	8001d60 <HAL_RCC_OscConfig+0x2f0>
 8001e2a:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e2e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001e30:	e7cf      	b.n	8001dd2 <HAL_RCC_OscConfig+0x362>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e32:	4943      	ldr	r1, [pc, #268]	; (8001f40 <HAL_RCC_OscConfig+0x4d0>)
 8001e34:	684b      	ldr	r3, [r1, #4]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	f43f ae51 	beq.w	8001ae2 <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e40:	2a02      	cmp	r2, #2
 8001e42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e46:	d154      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x482>
 8001e48:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001e4c:	fab3 f383 	clz	r3, r3
 8001e50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e5e:	f7ff fdff 	bl	8001a60 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e62:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8001f48 <HAL_RCC_OscConfig+0x4d8>
        tickstart = HAL_GetTick();
 8001e66:	4606      	mov	r6, r0
 8001e68:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6c:	2501      	movs	r5, #1
 8001e6e:	fa97 f3a7 	rbit	r3, r7
 8001e72:	680a      	ldr	r2, [r1, #0]
 8001e74:	fa97 f3a7 	rbit	r3, r7
 8001e78:	fab3 f383 	clz	r3, r3
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	fa05 f303 	lsl.w	r3, r5, r3
 8001e84:	4213      	tst	r3, r2
 8001e86:	d12e      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x476>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e88:	e9d4 0308 	ldrd	r0, r3, [r4, #32]
 8001e8c:	684a      	ldr	r2, [r1, #4]
 8001e8e:	4303      	orrs	r3, r0
 8001e90:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001e94:	4313      	orrs	r3, r2
 8001e96:	604b      	str	r3, [r1, #4]
 8001e98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e9c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001ea0:	fab3 f383 	clz	r3, r3
 8001ea4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ea8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001eac:	009b      	lsls	r3, r3, #2
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eae:	4f26      	ldr	r7, [pc, #152]	; (8001f48 <HAL_RCC_OscConfig+0x4d8>)
        __HAL_RCC_PLL_ENABLE();
 8001eb0:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001eb2:	f7ff fdd5 	bl	8001a60 <HAL_GetTick>
 8001eb6:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001eba:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ebc:	2601      	movs	r6, #1
 8001ebe:	fa95 f3a5 	rbit	r3, r5
 8001ec2:	680a      	ldr	r2, [r1, #0]
 8001ec4:	fa95 f3a5 	rbit	r3, r5
 8001ec8:	fab3 f383 	clz	r3, r3
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	fa06 f303 	lsl.w	r3, r6, r3
 8001ed4:	4213      	tst	r3, r2
 8001ed6:	f47f ade1 	bne.w	8001a9c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eda:	f7ff fdc1 	bl	8001a60 <HAL_GetTick>
 8001ede:	1b00      	subs	r0, r0, r4
 8001ee0:	42b8      	cmp	r0, r7
 8001ee2:	d9ec      	bls.n	8001ebe <HAL_RCC_OscConfig+0x44e>
 8001ee4:	e628      	b.n	8001b38 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee6:	f7ff fdbb 	bl	8001a60 <HAL_GetTick>
 8001eea:	1b80      	subs	r0, r0, r6
 8001eec:	4540      	cmp	r0, r8
 8001eee:	d9be      	bls.n	8001e6e <HAL_RCC_OscConfig+0x3fe>
 8001ef0:	e622      	b.n	8001b38 <HAL_RCC_OscConfig+0xc8>
 8001ef2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001efe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f08:	f7ff fdaa 	bl	8001a60 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0c:	4f0e      	ldr	r7, [pc, #56]	; (8001f48 <HAL_RCC_OscConfig+0x4d8>)
        tickstart = HAL_GetTick();
 8001f0e:	4604      	mov	r4, r0
 8001f10:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f14:	2601      	movs	r6, #1
 8001f16:	fa95 f3a5 	rbit	r3, r5
 8001f1a:	680a      	ldr	r2, [r1, #0]
 8001f1c:	fa95 f3a5 	rbit	r3, r5
 8001f20:	fab3 f383 	clz	r3, r3
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	fa06 f303 	lsl.w	r3, r6, r3
 8001f2c:	4213      	tst	r3, r2
 8001f2e:	f43f adb5 	beq.w	8001a9c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f32:	f7ff fd95 	bl	8001a60 <HAL_GetTick>
 8001f36:	1b00      	subs	r0, r0, r4
 8001f38:	42b8      	cmp	r0, r7
 8001f3a:	d9ec      	bls.n	8001f16 <HAL_RCC_OscConfig+0x4a6>
 8001f3c:	e5fc      	b.n	8001b38 <HAL_RCC_OscConfig+0xc8>
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40007000 	.word	0x40007000
 8001f48:	00030d40 	.word	0x00030d40

08001f4c <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f4c:	4a50      	ldr	r2, [pc, #320]	; (8002090 <HAL_RCC_ClockConfig+0x144>)
{
 8001f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f50:	6813      	ldr	r3, [r2, #0]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	428b      	cmp	r3, r1
{
 8001f58:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f5a:	d31b      	bcc.n	8001f94 <HAL_RCC_ClockConfig+0x48>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f5c:	6822      	ldr	r2, [r4, #0]
 8001f5e:	0790      	lsls	r0, r2, #30
 8001f60:	d424      	bmi.n	8001fac <HAL_RCC_ClockConfig+0x60>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f62:	07d2      	lsls	r2, r2, #31
 8001f64:	d42a      	bmi.n	8001fbc <HAL_RCC_ClockConfig+0x70>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f66:	4a4a      	ldr	r2, [pc, #296]	; (8002090 <HAL_RCC_ClockConfig+0x144>)
 8001f68:	6813      	ldr	r3, [r2, #0]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	428b      	cmp	r3, r1
 8001f70:	d87a      	bhi.n	8002068 <HAL_RCC_ClockConfig+0x11c>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f72:	6820      	ldr	r0, [r4, #0]
 8001f74:	0743      	lsls	r3, r0, #29
 8001f76:	f100 8082 	bmi.w	800207e <HAL_RCC_ClockConfig+0x132>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f7a:	f010 0008 	ands.w	r0, r0, #8
 8001f7e:	d014      	beq.n	8001faa <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f80:	4a44      	ldr	r2, [pc, #272]	; (8002094 <HAL_RCC_ClockConfig+0x148>)
 8001f82:	6921      	ldr	r1, [r4, #16]
 8001f84:	6853      	ldr	r3, [r2, #4]
 8001f86:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001f8a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f8e:	6053      	str	r3, [r2, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8001f90:	2000      	movs	r0, #0
 8001f92:	e00a      	b.n	8001faa <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f94:	6813      	ldr	r3, [r2, #0]
 8001f96:	f023 0307 	bic.w	r3, r3, #7
 8001f9a:	430b      	orrs	r3, r1
 8001f9c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f9e:	6813      	ldr	r3, [r2, #0]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	428b      	cmp	r3, r1
 8001fa6:	d0d9      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 8001fa8:	2001      	movs	r0, #1
}
 8001faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fac:	4839      	ldr	r0, [pc, #228]	; (8002094 <HAL_RCC_ClockConfig+0x148>)
 8001fae:	68a5      	ldr	r5, [r4, #8]
 8001fb0:	6843      	ldr	r3, [r0, #4]
 8001fb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fb6:	432b      	orrs	r3, r5
 8001fb8:	6043      	str	r3, [r0, #4]
 8001fba:	e7d2      	b.n	8001f62 <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fbc:	6862      	ldr	r2, [r4, #4]
 8001fbe:	4d35      	ldr	r5, [pc, #212]	; (8002094 <HAL_RCC_ClockConfig+0x148>)
 8001fc0:	2a01      	cmp	r2, #1
 8001fc2:	d127      	bne.n	8002014 <HAL_RCC_ClockConfig+0xc8>
 8001fc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fc8:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fcc:	6828      	ldr	r0, [r5, #0]
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	fab3 f383 	clz	r3, r3
 8001fd6:	f003 031f 	and.w	r3, r3, #31
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe0:	d0e2      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fe2:	686b      	ldr	r3, [r5, #4]
 8001fe4:	f023 0303 	bic.w	r3, r3, #3
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	606a      	str	r2, [r5, #4]
    tickstart = HAL_GetTick();
 8001fec:	f7ff fd38 	bl	8001a60 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff0:	6863      	ldr	r3, [r4, #4]
 8001ff2:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8001ff4:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff6:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffa:	d11e      	bne.n	800203a <HAL_RCC_ClockConfig+0xee>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ffc:	686b      	ldr	r3, [r5, #4]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	2b04      	cmp	r3, #4
 8002004:	d0af      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002006:	f7ff fd2b 	bl	8001a60 <HAL_GetTick>
 800200a:	1b80      	subs	r0, r0, r6
 800200c:	42b8      	cmp	r0, r7
 800200e:	d9f5      	bls.n	8001ffc <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8002010:	2003      	movs	r0, #3
 8002012:	e7ca      	b.n	8001faa <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002014:	2a02      	cmp	r2, #2
 8002016:	bf0c      	ite	eq
 8002018:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 800201c:	2302      	movne	r3, #2
 800201e:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002022:	682e      	ldr	r6, [r5, #0]
 8002024:	fa93 f3a3 	rbit	r3, r3
 8002028:	fab3 f383 	clz	r3, r3
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	2001      	movs	r0, #1
 8002032:	fa00 f303 	lsl.w	r3, r0, r3
 8002036:	4233      	tst	r3, r6
 8002038:	e7d2      	b.n	8001fe0 <HAL_RCC_ClockConfig+0x94>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800203a:	2b02      	cmp	r3, #2
 800203c:	d10f      	bne.n	800205e <HAL_RCC_ClockConfig+0x112>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800203e:	686b      	ldr	r3, [r5, #4]
 8002040:	f003 030c 	and.w	r3, r3, #12
 8002044:	2b08      	cmp	r3, #8
 8002046:	d08e      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002048:	f7ff fd0a 	bl	8001a60 <HAL_GetTick>
 800204c:	1b80      	subs	r0, r0, r6
 800204e:	42b8      	cmp	r0, r7
 8002050:	d9f5      	bls.n	800203e <HAL_RCC_ClockConfig+0xf2>
 8002052:	e7dd      	b.n	8002010 <HAL_RCC_ClockConfig+0xc4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002054:	f7ff fd04 	bl	8001a60 <HAL_GetTick>
 8002058:	1b80      	subs	r0, r0, r6
 800205a:	42b8      	cmp	r0, r7
 800205c:	d8d8      	bhi.n	8002010 <HAL_RCC_ClockConfig+0xc4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800205e:	686b      	ldr	r3, [r5, #4]
 8002060:	f013 0f0c 	tst.w	r3, #12
 8002064:	d1f6      	bne.n	8002054 <HAL_RCC_ClockConfig+0x108>
 8002066:	e77e      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002068:	6813      	ldr	r3, [r2, #0]
 800206a:	f023 0307 	bic.w	r3, r3, #7
 800206e:	430b      	orrs	r3, r1
 8002070:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002072:	6813      	ldr	r3, [r2, #0]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	428b      	cmp	r3, r1
 800207a:	d195      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x5c>
 800207c:	e779      	b.n	8001f72 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800207e:	4905      	ldr	r1, [pc, #20]	; (8002094 <HAL_RCC_ClockConfig+0x148>)
 8002080:	68e3      	ldr	r3, [r4, #12]
 8002082:	684a      	ldr	r2, [r1, #4]
 8002084:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002088:	431a      	orrs	r2, r3
 800208a:	604a      	str	r2, [r1, #4]
 800208c:	e775      	b.n	8001f7a <HAL_RCC_ClockConfig+0x2e>
 800208e:	bf00      	nop
 8002090:	40022000 	.word	0x40022000
 8002094:	40021000 	.word	0x40021000

08002098 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209c:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8002214 <HAL_GPIO_Init+0x17c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020a0:	4c5d      	ldr	r4, [pc, #372]	; (8002218 <HAL_GPIO_Init+0x180>)
  uint32_t position = 0x00U;
 80020a2:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80020a4:	f04f 0901 	mov.w	r9, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 80020a8:	680a      	ldr	r2, [r1, #0]
 80020aa:	fa32 f503 	lsrs.w	r5, r2, r3
 80020ae:	d102      	bne.n	80020b6 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 80020b0:	b003      	add	sp, #12
 80020b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80020b6:	fa09 fa03 	lsl.w	sl, r9, r3
    if(iocurrent)
 80020ba:	ea1a 0202 	ands.w	r2, sl, r2
 80020be:	f000 809e 	beq.w	80021fe <HAL_GPIO_Init+0x166>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020c2:	684d      	ldr	r5, [r1, #4]
 80020c4:	f025 0e10 	bic.w	lr, r5, #16
 80020c8:	f1be 0f02 	cmp.w	lr, #2
 80020cc:	d114      	bne.n	80020f8 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 80020ce:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80020d2:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020d6:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80020da:	f8dc 6020 	ldr.w	r6, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020de:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80020e2:	270f      	movs	r7, #15
 80020e4:	fa07 f70b 	lsl.w	r7, r7, fp
 80020e8:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020ec:	690e      	ldr	r6, [r1, #16]
 80020ee:	fa06 f60b 	lsl.w	r6, r6, fp
 80020f2:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 80020f4:	f8cc 6020 	str.w	r6, [ip, #32]
      temp = GPIOx->MODER;
 80020f8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002100:	2603      	movs	r6, #3
 8002102:	fa06 f70c 	lsl.w	r7, r6, ip
 8002106:	ea2b 0b07 	bic.w	fp, fp, r7
 800210a:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800210c:	f005 0703 	and.w	r7, r5, #3
 8002110:	fa07 f70c 	lsl.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002114:	f10e 3eff 	add.w	lr, lr, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002118:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800211c:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 8002120:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002122:	d811      	bhi.n	8002148 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR;
 8002124:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002126:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 800212a:	68cf      	ldr	r7, [r1, #12]
 800212c:	fa07 f70c 	lsl.w	r7, r7, ip
 8002130:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002134:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002136:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002138:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800213c:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002140:	409f      	lsls	r7, r3
 8002142:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8002146:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002148:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800214a:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800214c:	688e      	ldr	r6, [r1, #8]
 800214e:	fa06 f60c 	lsl.w	r6, r6, ip
 8002152:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8002154:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002156:	00ee      	lsls	r6, r5, #3
 8002158:	d551      	bpl.n	80021fe <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215a:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800215e:	f046 0601 	orr.w	r6, r6, #1
 8002162:	f8c8 6018 	str.w	r6, [r8, #24]
 8002166:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800216a:	f023 0703 	bic.w	r7, r3, #3
 800216e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8002172:	f006 0601 	and.w	r6, r6, #1
 8002176:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800217a:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800217c:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002180:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8002182:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8002184:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002188:	f04f 0c0f 	mov.w	ip, #15
 800218c:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002190:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8002194:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002198:	d033      	beq.n	8002202 <HAL_GPIO_Init+0x16a>
 800219a:	4e20      	ldr	r6, [pc, #128]	; (800221c <HAL_GPIO_Init+0x184>)
 800219c:	42b0      	cmp	r0, r6
 800219e:	d032      	beq.n	8002206 <HAL_GPIO_Init+0x16e>
 80021a0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021a4:	42b0      	cmp	r0, r6
 80021a6:	d030      	beq.n	800220a <HAL_GPIO_Init+0x172>
 80021a8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021ac:	42b0      	cmp	r0, r6
 80021ae:	d02e      	beq.n	800220e <HAL_GPIO_Init+0x176>
 80021b0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021b4:	42b0      	cmp	r0, r6
 80021b6:	bf0c      	ite	eq
 80021b8:	2604      	moveq	r6, #4
 80021ba:	2605      	movne	r6, #5
 80021bc:	fa06 f60e 	lsl.w	r6, r6, lr
 80021c0:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80021c4:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80021c6:	6826      	ldr	r6, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80021c8:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021ca:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80021ce:	bf0c      	ite	eq
 80021d0:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80021d2:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 80021d4:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 80021d6:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021d8:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80021dc:	bf0c      	ite	eq
 80021de:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80021e0:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 80021e2:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80021e4:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021e6:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80021ea:	bf0c      	ite	eq
 80021ec:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80021ee:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 80021f0:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80021f2:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021f4:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80021f6:	bf54      	ite	pl
 80021f8:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80021fa:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 80021fc:	60e6      	str	r6, [r4, #12]
    position++;
 80021fe:	3301      	adds	r3, #1
 8002200:	e752      	b.n	80020a8 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002202:	2600      	movs	r6, #0
 8002204:	e7da      	b.n	80021bc <HAL_GPIO_Init+0x124>
 8002206:	2601      	movs	r6, #1
 8002208:	e7d8      	b.n	80021bc <HAL_GPIO_Init+0x124>
 800220a:	2602      	movs	r6, #2
 800220c:	e7d6      	b.n	80021bc <HAL_GPIO_Init+0x124>
 800220e:	2603      	movs	r6, #3
 8002210:	e7d4      	b.n	80021bc <HAL_GPIO_Init+0x124>
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000
 8002218:	40010400 	.word	0x40010400
 800221c:	48000400 	.word	0x48000400

08002220 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002220:	b10a      	cbz	r2, 8002226 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002222:	6181      	str	r1, [r0, #24]
 8002224:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002226:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002228:	4770      	bx	lr
 800222a:	0000      	movs	r0, r0

0800222c <UART_SetConfig>:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800222c:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800222e:	6881      	ldr	r1, [r0, #8]
 8002230:	69c3      	ldr	r3, [r0, #28]
{
 8002232:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002234:	6905      	ldr	r5, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002236:	6814      	ldr	r4, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002238:	4329      	orrs	r1, r5
 800223a:	6945      	ldr	r5, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800223c:	f424 4416 	bic.w	r4, r4, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002240:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002242:	f024 040c 	bic.w	r4, r4, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002246:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002248:	4321      	orrs	r1, r4
 800224a:	6011      	str	r1, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800224c:	6851      	ldr	r1, [r2, #4]
 800224e:	68c4      	ldr	r4, [r0, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002250:	6a05      	ldr	r5, [r0, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002252:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002256:	4321      	orrs	r1, r4
 8002258:	6051      	str	r1, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800225a:	6894      	ldr	r4, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800225c:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800225e:	f424 6430 	bic.w	r4, r4, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002262:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002264:	4321      	orrs	r1, r4
 8002266:	6091      	str	r1, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002268:	4962      	ldr	r1, [pc, #392]	; (80023f4 <UART_SetConfig+0x1c8>)
 800226a:	428a      	cmp	r2, r1
 800226c:	d116      	bne.n	800229c <UART_SetConfig+0x70>
 800226e:	f501 4158 	add.w	r1, r1, #55296	; 0xd800
 8002272:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002274:	f001 0103 	and.w	r1, r1, #3
 8002278:	3901      	subs	r1, #1
 800227a:	2902      	cmp	r1, #2
 800227c:	f200 80b2 	bhi.w	80023e4 <UART_SetConfig+0x1b8>
 8002280:	4c5d      	ldr	r4, [pc, #372]	; (80023f8 <UART_SetConfig+0x1cc>)

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002286:	5c61      	ldrb	r1, [r4, r1]
 8002288:	d177      	bne.n	800237a <UART_SetConfig+0x14e>
  {
    switch (clocksource)
 800228a:	2908      	cmp	r1, #8
 800228c:	d872      	bhi.n	8002374 <UART_SetConfig+0x148>
 800228e:	e8df f001 	tbb	[pc, r1]
 8002292:	acac      	.short	0xacac
 8002294:	71ac7124 	.word	0x71ac7124
 8002298:	7171      	.short	0x7171
 800229a:	a4          	.byte	0xa4
 800229b:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800229c:	4957      	ldr	r1, [pc, #348]	; (80023fc <UART_SetConfig+0x1d0>)
 800229e:	428a      	cmp	r2, r1
 80022a0:	d12c      	bne.n	80022fc <UART_SetConfig+0xd0>
 80022a2:	f501 31e6 	add.w	r1, r1, #117760	; 0x1cc00
 80022a6:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80022a8:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 80022ac:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80022b0:	f000 8090 	beq.w	80023d4 <UART_SetConfig+0x1a8>
 80022b4:	d80b      	bhi.n	80022ce <UART_SetConfig+0xa2>
 80022b6:	2900      	cmp	r1, #0
 80022b8:	f000 8094 	beq.w	80023e4 <UART_SetConfig+0x1b8>
 80022bc:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80022c0:	f000 8090 	beq.w	80023e4 <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022c8:	d054      	beq.n	8002374 <UART_SetConfig+0x148>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80022ca:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 80022cc:	e015      	b.n	80022fa <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022ce:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 80022d2:	d1f7      	bne.n	80022c4 <UART_SetConfig+0x98>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022d8:	d166      	bne.n	80023a8 <UART_SetConfig+0x17c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80022da:	6841      	ldr	r1, [r0, #4]
 80022dc:	084b      	lsrs	r3, r1, #1
 80022de:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80022e2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80022e6:	fbb3 f3f1 	udiv	r3, r3, r1
  HAL_StatusTypeDef ret               = HAL_OK;
 80022ea:	2000      	movs	r0, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80022ec:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 80022ee:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80022f2:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80022f6:	430b      	orrs	r3, r1
 80022f8:	60d3      	str	r3, [r2, #12]

}
 80022fa:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022fc:	4940      	ldr	r1, [pc, #256]	; (8002400 <UART_SetConfig+0x1d4>)
 80022fe:	428a      	cmp	r2, r1
 8002300:	d110      	bne.n	8002324 <UART_SetConfig+0xf8>
 8002302:	f501 31e4 	add.w	r1, r1, #116736	; 0x1c800
 8002306:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002308:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 800230c:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 8002310:	d060      	beq.n	80023d4 <UART_SetConfig+0x1a8>
 8002312:	d804      	bhi.n	800231e <UART_SetConfig+0xf2>
 8002314:	2900      	cmp	r1, #0
 8002316:	d065      	beq.n	80023e4 <UART_SetConfig+0x1b8>
 8002318:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800231c:	e7d0      	b.n	80022c0 <UART_SetConfig+0x94>
 800231e:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 8002322:	e7d6      	b.n	80022d2 <UART_SetConfig+0xa6>
 8002324:	4937      	ldr	r1, [pc, #220]	; (8002404 <UART_SetConfig+0x1d8>)
 8002326:	428a      	cmp	r2, r1
 8002328:	d110      	bne.n	800234c <UART_SetConfig+0x120>
 800232a:	f501 31e2 	add.w	r1, r1, #115712	; 0x1c400
 800232e:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002330:	f401 1140 	and.w	r1, r1, #3145728	; 0x300000
 8002334:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002338:	d04c      	beq.n	80023d4 <UART_SetConfig+0x1a8>
 800233a:	d804      	bhi.n	8002346 <UART_SetConfig+0x11a>
 800233c:	2900      	cmp	r1, #0
 800233e:	d051      	beq.n	80023e4 <UART_SetConfig+0x1b8>
 8002340:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8002344:	e7bc      	b.n	80022c0 <UART_SetConfig+0x94>
 8002346:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800234a:	e7c2      	b.n	80022d2 <UART_SetConfig+0xa6>
 800234c:	492e      	ldr	r1, [pc, #184]	; (8002408 <UART_SetConfig+0x1dc>)
 800234e:	428a      	cmp	r2, r1
 8002350:	d1b8      	bne.n	80022c4 <UART_SetConfig+0x98>
 8002352:	f501 31e0 	add.w	r1, r1, #114688	; 0x1c000
 8002356:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002358:	f401 0140 	and.w	r1, r1, #12582912	; 0xc00000
 800235c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002360:	d038      	beq.n	80023d4 <UART_SetConfig+0x1a8>
 8002362:	d804      	bhi.n	800236e <UART_SetConfig+0x142>
 8002364:	2900      	cmp	r1, #0
 8002366:	d03d      	beq.n	80023e4 <UART_SetConfig+0x1b8>
 8002368:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800236c:	e7a8      	b.n	80022c0 <UART_SetConfig+0x94>
 800236e:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002372:	e7ae      	b.n	80022d2 <UART_SetConfig+0xa6>
        ret = HAL_ERROR;
 8002374:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002376:	2300      	movs	r3, #0
 8002378:	e7b9      	b.n	80022ee <UART_SetConfig+0xc2>
    switch (clocksource)
 800237a:	2908      	cmp	r1, #8
 800237c:	d8a5      	bhi.n	80022ca <UART_SetConfig+0x9e>
 800237e:	a301      	add	r3, pc, #4	; (adr r3, 8002384 <UART_SetConfig+0x158>)
 8002380:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8002384:	080023c1 	.word	0x080023c1
 8002388:	080023c1 	.word	0x080023c1
 800238c:	080023a9 	.word	0x080023a9
 8002390:	080022cb 	.word	0x080022cb
 8002394:	080023c1 	.word	0x080023c1
 8002398:	080022cb 	.word	0x080022cb
 800239c:	080022cb 	.word	0x080022cb
 80023a0:	080022cb 	.word	0x080022cb
 80023a4:	080023cb 	.word	0x080023cb
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80023a8:	6841      	ldr	r1, [r0, #4]
 80023aa:	084b      	lsrs	r3, r1, #1
 80023ac:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80023b0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80023b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80023bc:	2000      	movs	r0, #0
        break;
 80023be:	e79c      	b.n	80022fa <UART_SetConfig+0xce>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80023c0:	6841      	ldr	r1, [r0, #4]
 80023c2:	084b      	lsrs	r3, r1, #1
 80023c4:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 80023c8:	e7f4      	b.n	80023b4 <UART_SetConfig+0x188>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80023ca:	6841      	ldr	r1, [r0, #4]
 80023cc:	084b      	lsrs	r3, r1, #1
 80023ce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80023d2:	e7ef      	b.n	80023b4 <UART_SetConfig+0x188>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023d8:	d1f7      	bne.n	80023ca <UART_SetConfig+0x19e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80023da:	6841      	ldr	r1, [r0, #4]
 80023dc:	084b      	lsrs	r3, r1, #1
 80023de:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80023e2:	e780      	b.n	80022e6 <UART_SetConfig+0xba>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023e8:	d1ea      	bne.n	80023c0 <UART_SetConfig+0x194>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80023ea:	6841      	ldr	r1, [r0, #4]
 80023ec:	084b      	lsrs	r3, r1, #1
 80023ee:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 80023f2:	e778      	b.n	80022e6 <UART_SetConfig+0xba>
 80023f4:	40013800 	.word	0x40013800
 80023f8:	08003e68 	.word	0x08003e68
 80023fc:	40004400 	.word	0x40004400
 8002400:	40004800 	.word	0x40004800
 8002404:	40004c00 	.word	0x40004c00
 8002408:	40005000 	.word	0x40005000

0800240c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240e:	9f06      	ldr	r7, [sp, #24]
 8002410:	4604      	mov	r4, r0
 8002412:	4615      	mov	r5, r2
 8002414:	461e      	mov	r6, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002416:	6822      	ldr	r2, [r4, #0]
 8002418:	69d3      	ldr	r3, [r2, #28]
 800241a:	ea31 0303 	bics.w	r3, r1, r3
 800241e:	bf0c      	ite	eq
 8002420:	2301      	moveq	r3, #1
 8002422:	2300      	movne	r3, #0
 8002424:	42ab      	cmp	r3, r5
 8002426:	d001      	beq.n	800242c <UART_WaitOnFlagUntilTimeout+0x20>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002428:	2000      	movs	r0, #0
 800242a:	e014      	b.n	8002456 <UART_WaitOnFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 800242c:	1c7b      	adds	r3, r7, #1
 800242e:	d0f3      	beq.n	8002418 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002430:	b997      	cbnz	r7, 8002458 <UART_WaitOnFlagUntilTimeout+0x4c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002432:	6823      	ldr	r3, [r4, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800243a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	f022 0201 	bic.w	r2, r2, #1
 8002442:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002444:	2320      	movs	r3, #32
 8002446:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800244a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 800244e:	2300      	movs	r3, #0
 8002450:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002454:	2003      	movs	r0, #3
}
 8002456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002458:	f7ff fb02 	bl	8001a60 <HAL_GetTick>
 800245c:	1b80      	subs	r0, r0, r6
 800245e:	42b8      	cmp	r0, r7
 8002460:	d9d9      	bls.n	8002416 <UART_WaitOnFlagUntilTimeout+0xa>
 8002462:	e7e6      	b.n	8002432 <UART_WaitOnFlagUntilTimeout+0x26>

08002464 <UART_CheckIdleState>:
{
 8002464:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002466:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002468:	2100      	movs	r1, #0
 800246a:	66c1      	str	r1, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800246c:	f7ff faf8 	bl	8001a60 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002470:	6823      	ldr	r3, [r4, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002476:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002478:	d417      	bmi.n	80024aa <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800247a:	6823      	ldr	r3, [r4, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	075b      	lsls	r3, r3, #29
 8002480:	d50a      	bpl.n	8002498 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002482:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	2200      	movs	r2, #0
 800248a:	462b      	mov	r3, r5
 800248c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002490:	4620      	mov	r0, r4
 8002492:	f7ff ffbb 	bl	800240c <UART_WaitOnFlagUntilTimeout>
 8002496:	b9a0      	cbnz	r0, 80024c2 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8002498:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800249a:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800249c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80024a0:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80024a4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 80024a8:	e00c      	b.n	80024c4 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	460a      	mov	r2, r1
 80024b2:	4603      	mov	r3, r0
 80024b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80024b8:	4620      	mov	r0, r4
 80024ba:	f7ff ffa7 	bl	800240c <UART_WaitOnFlagUntilTimeout>
 80024be:	2800      	cmp	r0, #0
 80024c0:	d0db      	beq.n	800247a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80024c2:	2003      	movs	r0, #3
}
 80024c4:	b003      	add	sp, #12
 80024c6:	bd30      	pop	{r4, r5, pc}

080024c8 <HAL_UART_Init>:
{
 80024c8:	b510      	push	{r4, lr}
  if(huart == NULL)
 80024ca:	4604      	mov	r4, r0
 80024cc:	b328      	cbz	r0, 800251a <HAL_UART_Init+0x52>
  if(huart->gState == HAL_UART_STATE_RESET)
 80024ce:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80024d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024d6:	b90b      	cbnz	r3, 80024dc <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 80024d8:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  __HAL_UART_DISABLE(huart);
 80024dc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80024de:	2324      	movs	r3, #36	; 0x24
 80024e0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80024e4:	6813      	ldr	r3, [r2, #0]
 80024e6:	f023 0301 	bic.w	r3, r3, #1
 80024ea:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024ec:	4620      	mov	r0, r4
 80024ee:	f7ff fe9d 	bl	800222c <UART_SetConfig>
 80024f2:	2801      	cmp	r0, #1
 80024f4:	d011      	beq.n	800251a <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024f6:	6823      	ldr	r3, [r4, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002506:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	f042 0201 	orr.w	r2, r2, #1
  return UART_CheckIdleState(huart);
 800250e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002510:	601a      	str	r2, [r3, #0]
}
 8002512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UART_CheckIdleState(huart);
 8002516:	f7ff bfa5 	b.w	8002464 <UART_CheckIdleState>
}
 800251a:	2001      	movs	r0, #1
 800251c:	bd10      	pop	{r4, pc}

0800251e <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800251e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002520:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002522:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002526:	2b20      	cmp	r3, #32
{
 8002528:	460d      	mov	r5, r1
 800252a:	4604      	mov	r4, r0
 800252c:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800252e:	d14a      	bne.n	80025c6 <HAL_UART_Transmit+0xa8>
  {
    if((pData == NULL ) || (Size == 0U))
 8002530:	2d00      	cmp	r5, #0
 8002532:	d046      	beq.n	80025c2 <HAL_UART_Transmit+0xa4>
 8002534:	2a00      	cmp	r2, #0
 8002536:	d044      	beq.n	80025c2 <HAL_UART_Transmit+0xa4>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002538:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800253c:	2b01      	cmp	r3, #1
 800253e:	d042      	beq.n	80025c6 <HAL_UART_Transmit+0xa8>
 8002540:	2301      	movs	r3, #1
 8002542:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002546:	2300      	movs	r3, #0
 8002548:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800254a:	2321      	movs	r3, #33	; 0x21
 800254c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002550:	f7ff fa86 	bl	8001a60 <HAL_GetTick>

    huart->TxXferSize = Size;
 8002554:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8002558:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 800255a:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800255e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002562:	b292      	uxth	r2, r2
 8002564:	b962      	cbnz	r2, 8002580 <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002566:	9600      	str	r6, [sp, #0]
 8002568:	463b      	mov	r3, r7
 800256a:	2140      	movs	r1, #64	; 0x40
 800256c:	4620      	mov	r0, r4
 800256e:	f7ff ff4d 	bl	800240c <UART_WaitOnFlagUntilTimeout>
 8002572:	b998      	cbnz	r0, 800259c <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002574:	2320      	movs	r3, #32
 8002576:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800257a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 800257e:	e00e      	b.n	800259e <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 8002580:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002584:	9600      	str	r6, [sp, #0]
      huart->TxXferCount--;
 8002586:	3a01      	subs	r2, #1
 8002588:	b292      	uxth	r2, r2
 800258a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800258e:	463b      	mov	r3, r7
 8002590:	2200      	movs	r2, #0
 8002592:	2180      	movs	r1, #128	; 0x80
 8002594:	4620      	mov	r0, r4
 8002596:	f7ff ff39 	bl	800240c <UART_WaitOnFlagUntilTimeout>
 800259a:	b110      	cbz	r0, 80025a2 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 800259c:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800259e:	b003      	add	sp, #12
 80025a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025a2:	68a3      	ldr	r3, [r4, #8]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80025a4:	6822      	ldr	r2, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025aa:	d107      	bne.n	80025bc <HAL_UART_Transmit+0x9e>
 80025ac:	6923      	ldr	r3, [r4, #16]
 80025ae:	b92b      	cbnz	r3, 80025bc <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80025b0:	f835 3b02 	ldrh.w	r3, [r5], #2
 80025b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80025b8:	8513      	strh	r3, [r2, #40]	; 0x28
 80025ba:	e7d0      	b.n	800255e <HAL_UART_Transmit+0x40>
 80025bc:	f815 3b01 	ldrb.w	r3, [r5], #1
 80025c0:	e7fa      	b.n	80025b8 <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 80025c2:	2001      	movs	r0, #1
 80025c4:	e7eb      	b.n	800259e <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 80025c6:	2002      	movs	r0, #2
 80025c8:	e7e9      	b.n	800259e <HAL_UART_Transmit+0x80>

080025ca <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80025ce:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80025d0:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80025d4:	2b20      	cmp	r3, #32
{
 80025d6:	460d      	mov	r5, r1
 80025d8:	4604      	mov	r4, r0
 80025da:	4611      	mov	r1, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 80025dc:	d15c      	bne.n	8002698 <HAL_UART_Receive+0xce>
  {
    if((pData == NULL ) || (Size == 0U))
 80025de:	2d00      	cmp	r5, #0
 80025e0:	d058      	beq.n	8002694 <HAL_UART_Receive+0xca>
 80025e2:	2a00      	cmp	r2, #0
 80025e4:	d056      	beq.n	8002694 <HAL_UART_Receive+0xca>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025e6:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d054      	beq.n	8002698 <HAL_UART_Receive+0xce>
 80025ee:	2301      	movs	r3, #1
 80025f0:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 80025f4:	6803      	ldr	r3, [r0, #0]
 80025f6:	f04f 32ff 	mov.w	r2, #4294967295
 80025fa:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025fc:	2300      	movs	r3, #0
 80025fe:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002600:	2322      	movs	r3, #34	; 0x22
 8002602:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002606:	f7ff fa2b 	bl	8001a60 <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800260a:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 800260c:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8002610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002614:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 8002616:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800261a:	d115      	bne.n	8002648 <HAL_UART_Receive+0x7e>
 800261c:	6923      	ldr	r3, [r4, #16]
 800261e:	b98b      	cbnz	r3, 8002644 <HAL_UART_Receive+0x7a>
 8002620:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002624:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8002628:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 800262c:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8002630:	b280      	uxth	r0, r0
 8002632:	b980      	cbnz	r0, 8002656 <HAL_UART_Receive+0x8c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002634:	2320      	movs	r3, #32
 8002636:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800263a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  }
  else
  {
    return HAL_BUSY;
  }
}
 800263e:	b002      	add	sp, #8
 8002640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8002644:	23ff      	movs	r3, #255	; 0xff
 8002646:	e7ed      	b.n	8002624 <HAL_UART_Receive+0x5a>
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1ed      	bne.n	8002628 <HAL_UART_Receive+0x5e>
 800264c:	6923      	ldr	r3, [r4, #16]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f8      	beq.n	8002644 <HAL_UART_Receive+0x7a>
 8002652:	237f      	movs	r3, #127	; 0x7f
 8002654:	e7e6      	b.n	8002624 <HAL_UART_Receive+0x5a>
      huart->RxXferCount--;
 8002656:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800265a:	9600      	str	r6, [sp, #0]
      huart->RxXferCount--;
 800265c:	3a01      	subs	r2, #1
 800265e:	b292      	uxth	r2, r2
 8002660:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002664:	4643      	mov	r3, r8
 8002666:	2200      	movs	r2, #0
 8002668:	2120      	movs	r1, #32
 800266a:	4620      	mov	r0, r4
 800266c:	f7ff fece 	bl	800240c <UART_WaitOnFlagUntilTimeout>
 8002670:	b9a0      	cbnz	r0, 800269c <HAL_UART_Receive+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002672:	68a2      	ldr	r2, [r4, #8]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002674:	6823      	ldr	r3, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002676:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800267a:	d106      	bne.n	800268a <HAL_UART_Receive+0xc0>
 800267c:	6922      	ldr	r2, [r4, #16]
 800267e:	b922      	cbnz	r2, 800268a <HAL_UART_Receive+0xc0>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002680:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002682:	403b      	ands	r3, r7
 8002684:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8002688:	e7d0      	b.n	800262c <HAL_UART_Receive+0x62>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800268a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800268c:	403b      	ands	r3, r7
 800268e:	f805 3b01 	strb.w	r3, [r5], #1
 8002692:	e7cb      	b.n	800262c <HAL_UART_Receive+0x62>
      return  HAL_ERROR;
 8002694:	2001      	movs	r0, #1
 8002696:	e7d2      	b.n	800263e <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 8002698:	2002      	movs	r0, #2
 800269a:	e7d0      	b.n	800263e <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 800269c:	2003      	movs	r0, #3
 800269e:	e7ce      	b.n	800263e <HAL_UART_Receive+0x74>

080026a0 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80026a0:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <_sbrk+0x2c>)
 80026a2:	6811      	ldr	r1, [r2, #0]
{
 80026a4:	b508      	push	{r3, lr}
 80026a6:	4603      	mov	r3, r0
	if (heap_end == 0)
 80026a8:	b909      	cbnz	r1, 80026ae <_sbrk+0xe>
		heap_end = &end;
 80026aa:	4909      	ldr	r1, [pc, #36]	; (80026d0 <_sbrk+0x30>)
 80026ac:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 80026ae:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80026b0:	4669      	mov	r1, sp
 80026b2:	4403      	add	r3, r0
 80026b4:	428b      	cmp	r3, r1
 80026b6:	d906      	bls.n	80026c6 <_sbrk+0x26>
	{
		errno = ENOMEM;
 80026b8:	f000 fa4a 	bl	8002b50 <__errno>
 80026bc:	230c      	movs	r3, #12
 80026be:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80026c0:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80026c4:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80026c6:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 80026c8:	e7fc      	b.n	80026c4 <_sbrk+0x24>
 80026ca:	bf00      	nop
 80026cc:	200002f8 	.word	0x200002f8
 80026d0:	20000310 	.word	0x20000310

080026d4 <Reset_Handler>:
 80026d4:	2100      	movs	r1, #0
 80026d6:	e003      	b.n	80026e0 <LoopCopyDataInit>

080026d8 <CopyDataInit>:
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <LoopForever+0x2>)
 80026da:	585b      	ldr	r3, [r3, r1]
 80026dc:	5043      	str	r3, [r0, r1]
 80026de:	3104      	adds	r1, #4

080026e0 <LoopCopyDataInit>:
 80026e0:	480a      	ldr	r0, [pc, #40]	; (800270c <LoopForever+0x6>)
 80026e2:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <LoopForever+0xa>)
 80026e4:	1842      	adds	r2, r0, r1
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d3f6      	bcc.n	80026d8 <CopyDataInit>
 80026ea:	4a0a      	ldr	r2, [pc, #40]	; (8002714 <LoopForever+0xe>)
 80026ec:	e002      	b.n	80026f4 <LoopFillZerobss>

080026ee <FillZerobss>:
 80026ee:	2300      	movs	r3, #0
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	3204      	adds	r2, #4

080026f4 <LoopFillZerobss>:
 80026f4:	4b08      	ldr	r3, [pc, #32]	; (8002718 <LoopForever+0x12>)
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d3f9      	bcc.n	80026ee <FillZerobss>
 80026fa:	f3af 8000 	nop.w
 80026fe:	f000 fa2d 	bl	8002b5c <__libc_init_array>
 8002702:	f7fe fd79 	bl	80011f8 <main>

08002706 <LoopForever>:
 8002706:	e7fe      	b.n	8002706 <LoopForever>
 8002708:	08004010 	.word	0x08004010
 800270c:	20000000 	.word	0x20000000
 8002710:	20000068 	.word	0x20000068
 8002714:	20000068 	.word	0x20000068
 8002718:	2000030c 	.word	0x2000030c

0800271c <BusFault_Handler>:
 800271c:	e7fe      	b.n	800271c <BusFault_Handler>
 800271e:	0000      	movs	r0, r0

08002720 <exp>:
 8002720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002722:	4604      	mov	r4, r0
 8002724:	460d      	mov	r5, r1
 8002726:	f000 f83b 	bl	80027a0 <__ieee754_exp>
 800272a:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <exp+0x78>)
 800272c:	f993 3000 	ldrsb.w	r3, [r3]
 8002730:	3301      	adds	r3, #1
 8002732:	4606      	mov	r6, r0
 8002734:	460f      	mov	r7, r1
 8002736:	d014      	beq.n	8002762 <exp+0x42>
 8002738:	4620      	mov	r0, r4
 800273a:	4629      	mov	r1, r5
 800273c:	f000 fa02 	bl	8002b44 <finite>
 8002740:	b178      	cbz	r0, 8002762 <exp+0x42>
 8002742:	a311      	add	r3, pc, #68	; (adr r3, 8002788 <exp+0x68>)
 8002744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002748:	4620      	mov	r0, r4
 800274a:	4629      	mov	r1, r5
 800274c:	f7fe fa40 	bl	8000bd0 <__aeabi_dcmpgt>
 8002750:	b988      	cbnz	r0, 8002776 <exp+0x56>
 8002752:	a30f      	add	r3, pc, #60	; (adr r3, 8002790 <exp+0x70>)
 8002754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002758:	4620      	mov	r0, r4
 800275a:	4629      	mov	r1, r5
 800275c:	f7fe fa1a 	bl	8000b94 <__aeabi_dcmplt>
 8002760:	b910      	cbnz	r0, 8002768 <exp+0x48>
 8002762:	4630      	mov	r0, r6
 8002764:	4639      	mov	r1, r7
 8002766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002768:	f000 f9f2 	bl	8002b50 <__errno>
 800276c:	2322      	movs	r3, #34	; 0x22
 800276e:	6003      	str	r3, [r0, #0]
 8002770:	2600      	movs	r6, #0
 8002772:	2700      	movs	r7, #0
 8002774:	e7f5      	b.n	8002762 <exp+0x42>
 8002776:	f000 f9eb 	bl	8002b50 <__errno>
 800277a:	2322      	movs	r3, #34	; 0x22
 800277c:	4f07      	ldr	r7, [pc, #28]	; (800279c <exp+0x7c>)
 800277e:	6003      	str	r3, [r0, #0]
 8002780:	2600      	movs	r6, #0
 8002782:	e7ee      	b.n	8002762 <exp+0x42>
 8002784:	f3af 8000 	nop.w
 8002788:	fefa39ef 	.word	0xfefa39ef
 800278c:	40862e42 	.word	0x40862e42
 8002790:	d52d3051 	.word	0xd52d3051
 8002794:	c0874910 	.word	0xc0874910
 8002798:	20000000 	.word	0x20000000
 800279c:	7ff00000 	.word	0x7ff00000

080027a0 <__ieee754_exp>:
 80027a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027a4:	4fd4      	ldr	r7, [pc, #848]	; (8002af8 <__ieee754_exp+0x358>)
 80027a6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80027aa:	42ba      	cmp	r2, r7
 80027ac:	b087      	sub	sp, #28
 80027ae:	4605      	mov	r5, r0
 80027b0:	460c      	mov	r4, r1
 80027b2:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80027b6:	d912      	bls.n	80027de <__ieee754_exp+0x3e>
 80027b8:	4fd0      	ldr	r7, [pc, #832]	; (8002afc <__ieee754_exp+0x35c>)
 80027ba:	42ba      	cmp	r2, r7
 80027bc:	d92b      	bls.n	8002816 <__ieee754_exp+0x76>
 80027be:	f3c1 0313 	ubfx	r3, r1, #0, #20
 80027c2:	4303      	orrs	r3, r0
 80027c4:	4602      	mov	r2, r0
 80027c6:	f040 8157 	bne.w	8002a78 <__ieee754_exp+0x2d8>
 80027ca:	2e00      	cmp	r6, #0
 80027cc:	f000 80ee 	beq.w	80029ac <__ieee754_exp+0x20c>
 80027d0:	2500      	movs	r5, #0
 80027d2:	462c      	mov	r4, r5
 80027d4:	4628      	mov	r0, r5
 80027d6:	4621      	mov	r1, r4
 80027d8:	b007      	add	sp, #28
 80027da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027de:	4bc8      	ldr	r3, [pc, #800]	; (8002b00 <__ieee754_exp+0x360>)
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d855      	bhi.n	8002890 <__ieee754_exp+0xf0>
 80027e4:	4bc7      	ldr	r3, [pc, #796]	; (8002b04 <__ieee754_exp+0x364>)
 80027e6:	429a      	cmp	r2, r3
 80027e8:	f200 80e5 	bhi.w	80029b6 <__ieee754_exp+0x216>
 80027ec:	a3ac      	add	r3, pc, #688	; (adr r3, 8002aa0 <__ieee754_exp+0x300>)
 80027ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f2:	f7fd fda7 	bl	8000344 <__adddf3>
 80027f6:	4bc4      	ldr	r3, [pc, #784]	; (8002b08 <__ieee754_exp+0x368>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	f7fe f9e9 	bl	8000bd0 <__aeabi_dcmpgt>
 80027fe:	2800      	cmp	r0, #0
 8002800:	f000 80d9 	beq.w	80029b6 <__ieee754_exp+0x216>
 8002804:	4628      	mov	r0, r5
 8002806:	4621      	mov	r1, r4
 8002808:	4bbf      	ldr	r3, [pc, #764]	; (8002b08 <__ieee754_exp+0x368>)
 800280a:	2200      	movs	r2, #0
 800280c:	f7fd fd9a 	bl	8000344 <__adddf3>
 8002810:	4605      	mov	r5, r0
 8002812:	460c      	mov	r4, r1
 8002814:	e0ca      	b.n	80029ac <__ieee754_exp+0x20c>
 8002816:	a3a4      	add	r3, pc, #656	; (adr r3, 8002aa8 <__ieee754_exp+0x308>)
 8002818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281c:	f7fe f9d8 	bl	8000bd0 <__aeabi_dcmpgt>
 8002820:	2800      	cmp	r0, #0
 8002822:	f040 8133 	bne.w	8002a8c <__ieee754_exp+0x2ec>
 8002826:	a3a2      	add	r3, pc, #648	; (adr r3, 8002ab0 <__ieee754_exp+0x310>)
 8002828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282c:	4628      	mov	r0, r5
 800282e:	4621      	mov	r1, r4
 8002830:	f7fe f9b0 	bl	8000b94 <__aeabi_dcmplt>
 8002834:	2800      	cmp	r0, #0
 8002836:	d1cb      	bne.n	80027d0 <__ieee754_exp+0x30>
 8002838:	4bb4      	ldr	r3, [pc, #720]	; (8002b0c <__ieee754_exp+0x36c>)
 800283a:	4628      	mov	r0, r5
 800283c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8002840:	4621      	mov	r1, r4
 8002842:	a39d      	add	r3, pc, #628	; (adr r3, 8002ab8 <__ieee754_exp+0x318>)
 8002844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002848:	f7fd ff32 	bl	80006b0 <__aeabi_dmul>
 800284c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002850:	f7fd fd78 	bl	8000344 <__adddf3>
 8002854:	f7fe f9c6 	bl	8000be4 <__aeabi_d2iz>
 8002858:	9001      	str	r0, [sp, #4]
 800285a:	f7fd febf 	bl	80005dc <__aeabi_i2d>
 800285e:	a398      	add	r3, pc, #608	; (adr r3, 8002ac0 <__ieee754_exp+0x320>)
 8002860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002864:	4606      	mov	r6, r0
 8002866:	460f      	mov	r7, r1
 8002868:	f7fd ff22 	bl	80006b0 <__aeabi_dmul>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4628      	mov	r0, r5
 8002872:	4621      	mov	r1, r4
 8002874:	f7fd fd64 	bl	8000340 <__aeabi_dsub>
 8002878:	a393      	add	r3, pc, #588	; (adr r3, 8002ac8 <__ieee754_exp+0x328>)
 800287a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287e:	4680      	mov	r8, r0
 8002880:	4689      	mov	r9, r1
 8002882:	4630      	mov	r0, r6
 8002884:	4639      	mov	r1, r7
 8002886:	f7fd ff13 	bl	80006b0 <__aeabi_dmul>
 800288a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800288e:	e017      	b.n	80028c0 <__ieee754_exp+0x120>
 8002890:	4b9f      	ldr	r3, [pc, #636]	; (8002b10 <__ieee754_exp+0x370>)
 8002892:	429a      	cmp	r2, r3
 8002894:	d8d0      	bhi.n	8002838 <__ieee754_exp+0x98>
 8002896:	4b9f      	ldr	r3, [pc, #636]	; (8002b14 <__ieee754_exp+0x374>)
 8002898:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800289c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a0:	f7fd fd4e 	bl	8000340 <__aeabi_dsub>
 80028a4:	4b9c      	ldr	r3, [pc, #624]	; (8002b18 <__ieee754_exp+0x378>)
 80028a6:	00f4      	lsls	r4, r6, #3
 80028a8:	4423      	add	r3, r4
 80028aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80028ae:	f1c6 0a01 	rsb	sl, r6, #1
 80028b2:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80028b6:	ebaa 0306 	sub.w	r3, sl, r6
 80028ba:	4680      	mov	r8, r0
 80028bc:	4689      	mov	r9, r1
 80028be:	9301      	str	r3, [sp, #4]
 80028c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80028c4:	4640      	mov	r0, r8
 80028c6:	4649      	mov	r1, r9
 80028c8:	f7fd fd3a 	bl	8000340 <__aeabi_dsub>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4682      	mov	sl, r0
 80028d2:	468b      	mov	fp, r1
 80028d4:	4605      	mov	r5, r0
 80028d6:	460c      	mov	r4, r1
 80028d8:	f7fd feea 	bl	80006b0 <__aeabi_dmul>
 80028dc:	a37c      	add	r3, pc, #496	; (adr r3, 8002ad0 <__ieee754_exp+0x330>)
 80028de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e2:	4606      	mov	r6, r0
 80028e4:	460f      	mov	r7, r1
 80028e6:	f7fd fee3 	bl	80006b0 <__aeabi_dmul>
 80028ea:	a37b      	add	r3, pc, #492	; (adr r3, 8002ad8 <__ieee754_exp+0x338>)
 80028ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f0:	f7fd fd26 	bl	8000340 <__aeabi_dsub>
 80028f4:	4632      	mov	r2, r6
 80028f6:	463b      	mov	r3, r7
 80028f8:	f7fd feda 	bl	80006b0 <__aeabi_dmul>
 80028fc:	a378      	add	r3, pc, #480	; (adr r3, 8002ae0 <__ieee754_exp+0x340>)
 80028fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002902:	f7fd fd1f 	bl	8000344 <__adddf3>
 8002906:	4632      	mov	r2, r6
 8002908:	463b      	mov	r3, r7
 800290a:	f7fd fed1 	bl	80006b0 <__aeabi_dmul>
 800290e:	a376      	add	r3, pc, #472	; (adr r3, 8002ae8 <__ieee754_exp+0x348>)
 8002910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002914:	f7fd fd14 	bl	8000340 <__aeabi_dsub>
 8002918:	4632      	mov	r2, r6
 800291a:	463b      	mov	r3, r7
 800291c:	f7fd fec8 	bl	80006b0 <__aeabi_dmul>
 8002920:	a373      	add	r3, pc, #460	; (adr r3, 8002af0 <__ieee754_exp+0x350>)
 8002922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002926:	f7fd fd0d 	bl	8000344 <__adddf3>
 800292a:	4632      	mov	r2, r6
 800292c:	463b      	mov	r3, r7
 800292e:	f7fd febf 	bl	80006b0 <__aeabi_dmul>
 8002932:	460b      	mov	r3, r1
 8002934:	4602      	mov	r2, r0
 8002936:	4659      	mov	r1, fp
 8002938:	4650      	mov	r0, sl
 800293a:	f7fd fd01 	bl	8000340 <__aeabi_dsub>
 800293e:	9b01      	ldr	r3, [sp, #4]
 8002940:	4606      	mov	r6, r0
 8002942:	460f      	mov	r7, r1
 8002944:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d06d      	beq.n	8002a28 <__ieee754_exp+0x288>
 800294c:	4632      	mov	r2, r6
 800294e:	463b      	mov	r3, r7
 8002950:	4650      	mov	r0, sl
 8002952:	4659      	mov	r1, fp
 8002954:	f7fd feac 	bl	80006b0 <__aeabi_dmul>
 8002958:	4632      	mov	r2, r6
 800295a:	4604      	mov	r4, r0
 800295c:	460d      	mov	r5, r1
 800295e:	463b      	mov	r3, r7
 8002960:	2000      	movs	r0, #0
 8002962:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002966:	f7fd fceb 	bl	8000340 <__aeabi_dsub>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4620      	mov	r0, r4
 8002970:	4629      	mov	r1, r5
 8002972:	f7fd ffc7 	bl	8000904 <__aeabi_ddiv>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800297e:	f7fd fcdf 	bl	8000340 <__aeabi_dsub>
 8002982:	4642      	mov	r2, r8
 8002984:	464b      	mov	r3, r9
 8002986:	f7fd fcdb 	bl	8000340 <__aeabi_dsub>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	2000      	movs	r0, #0
 8002990:	495d      	ldr	r1, [pc, #372]	; (8002b08 <__ieee754_exp+0x368>)
 8002992:	f7fd fcd5 	bl	8000340 <__aeabi_dsub>
 8002996:	9c01      	ldr	r4, [sp, #4]
 8002998:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
 800299c:	429c      	cmp	r4, r3
 800299e:	4602      	mov	r2, r0
 80029a0:	f2c0 80bc 	blt.w	8002b1c <__ieee754_exp+0x37c>
 80029a4:	eb01 5304 	add.w	r3, r1, r4, lsl #20
 80029a8:	4605      	mov	r5, r0
 80029aa:	461c      	mov	r4, r3
 80029ac:	4628      	mov	r0, r5
 80029ae:	4621      	mov	r1, r4
 80029b0:	b007      	add	sp, #28
 80029b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029b6:	462a      	mov	r2, r5
 80029b8:	4623      	mov	r3, r4
 80029ba:	4628      	mov	r0, r5
 80029bc:	4621      	mov	r1, r4
 80029be:	f7fd fe77 	bl	80006b0 <__aeabi_dmul>
 80029c2:	a343      	add	r3, pc, #268	; (adr r3, 8002ad0 <__ieee754_exp+0x330>)
 80029c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c8:	4606      	mov	r6, r0
 80029ca:	460f      	mov	r7, r1
 80029cc:	f7fd fe70 	bl	80006b0 <__aeabi_dmul>
 80029d0:	a341      	add	r3, pc, #260	; (adr r3, 8002ad8 <__ieee754_exp+0x338>)
 80029d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d6:	f7fd fcb3 	bl	8000340 <__aeabi_dsub>
 80029da:	4632      	mov	r2, r6
 80029dc:	463b      	mov	r3, r7
 80029de:	f7fd fe67 	bl	80006b0 <__aeabi_dmul>
 80029e2:	a33f      	add	r3, pc, #252	; (adr r3, 8002ae0 <__ieee754_exp+0x340>)
 80029e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e8:	f7fd fcac 	bl	8000344 <__adddf3>
 80029ec:	4632      	mov	r2, r6
 80029ee:	463b      	mov	r3, r7
 80029f0:	f7fd fe5e 	bl	80006b0 <__aeabi_dmul>
 80029f4:	a33c      	add	r3, pc, #240	; (adr r3, 8002ae8 <__ieee754_exp+0x348>)
 80029f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fa:	f7fd fca1 	bl	8000340 <__aeabi_dsub>
 80029fe:	4632      	mov	r2, r6
 8002a00:	463b      	mov	r3, r7
 8002a02:	f7fd fe55 	bl	80006b0 <__aeabi_dmul>
 8002a06:	a33a      	add	r3, pc, #232	; (adr r3, 8002af0 <__ieee754_exp+0x350>)
 8002a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0c:	f7fd fc9a 	bl	8000344 <__adddf3>
 8002a10:	4632      	mov	r2, r6
 8002a12:	463b      	mov	r3, r7
 8002a14:	f7fd fe4c 	bl	80006b0 <__aeabi_dmul>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4628      	mov	r0, r5
 8002a1e:	4621      	mov	r1, r4
 8002a20:	f7fd fc8e 	bl	8000340 <__aeabi_dsub>
 8002a24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002a28:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8002a2c:	4628      	mov	r0, r5
 8002a2e:	4642      	mov	r2, r8
 8002a30:	464b      	mov	r3, r9
 8002a32:	4621      	mov	r1, r4
 8002a34:	f7fd fe3c 	bl	80006b0 <__aeabi_dmul>
 8002a38:	2200      	movs	r2, #0
 8002a3a:	4606      	mov	r6, r0
 8002a3c:	460f      	mov	r7, r1
 8002a3e:	4640      	mov	r0, r8
 8002a40:	4649      	mov	r1, r9
 8002a42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a46:	f7fd fc7b 	bl	8000340 <__aeabi_dsub>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4630      	mov	r0, r6
 8002a50:	4639      	mov	r1, r7
 8002a52:	f7fd ff57 	bl	8000904 <__aeabi_ddiv>
 8002a56:	462a      	mov	r2, r5
 8002a58:	4623      	mov	r3, r4
 8002a5a:	f7fd fc71 	bl	8000340 <__aeabi_dsub>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	2000      	movs	r0, #0
 8002a64:	4928      	ldr	r1, [pc, #160]	; (8002b08 <__ieee754_exp+0x368>)
 8002a66:	f7fd fc6b 	bl	8000340 <__aeabi_dsub>
 8002a6a:	4605      	mov	r5, r0
 8002a6c:	460c      	mov	r4, r1
 8002a6e:	4628      	mov	r0, r5
 8002a70:	4621      	mov	r1, r4
 8002a72:	b007      	add	sp, #28
 8002a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a78:	460b      	mov	r3, r1
 8002a7a:	f7fd fc63 	bl	8000344 <__adddf3>
 8002a7e:	4605      	mov	r5, r0
 8002a80:	460c      	mov	r4, r1
 8002a82:	4628      	mov	r0, r5
 8002a84:	4621      	mov	r1, r4
 8002a86:	b007      	add	sp, #28
 8002a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a8c:	a304      	add	r3, pc, #16	; (adr r3, 8002aa0 <__ieee754_exp+0x300>)
 8002a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a92:	4610      	mov	r0, r2
 8002a94:	4619      	mov	r1, r3
 8002a96:	f7fd fe0b 	bl	80006b0 <__aeabi_dmul>
 8002a9a:	4605      	mov	r5, r0
 8002a9c:	460c      	mov	r4, r1
 8002a9e:	e785      	b.n	80029ac <__ieee754_exp+0x20c>
 8002aa0:	8800759c 	.word	0x8800759c
 8002aa4:	7e37e43c 	.word	0x7e37e43c
 8002aa8:	fefa39ef 	.word	0xfefa39ef
 8002aac:	40862e42 	.word	0x40862e42
 8002ab0:	d52d3051 	.word	0xd52d3051
 8002ab4:	c0874910 	.word	0xc0874910
 8002ab8:	652b82fe 	.word	0x652b82fe
 8002abc:	3ff71547 	.word	0x3ff71547
 8002ac0:	fee00000 	.word	0xfee00000
 8002ac4:	3fe62e42 	.word	0x3fe62e42
 8002ac8:	35793c76 	.word	0x35793c76
 8002acc:	3dea39ef 	.word	0x3dea39ef
 8002ad0:	72bea4d0 	.word	0x72bea4d0
 8002ad4:	3e663769 	.word	0x3e663769
 8002ad8:	c5d26bf1 	.word	0xc5d26bf1
 8002adc:	3ebbbd41 	.word	0x3ebbbd41
 8002ae0:	af25de2c 	.word	0xaf25de2c
 8002ae4:	3f11566a 	.word	0x3f11566a
 8002ae8:	16bebd93 	.word	0x16bebd93
 8002aec:	3f66c16c 	.word	0x3f66c16c
 8002af0:	5555553e 	.word	0x5555553e
 8002af4:	3fc55555 	.word	0x3fc55555
 8002af8:	40862e41 	.word	0x40862e41
 8002afc:	7fefffff 	.word	0x7fefffff
 8002b00:	3fd62e42 	.word	0x3fd62e42
 8002b04:	3e2fffff 	.word	0x3e2fffff
 8002b08:	3ff00000 	.word	0x3ff00000
 8002b0c:	08003e70 	.word	0x08003e70
 8002b10:	3ff0a2b1 	.word	0x3ff0a2b1
 8002b14:	08003e80 	.word	0x08003e80
 8002b18:	08003e90 	.word	0x08003e90
 8002b1c:	9801      	ldr	r0, [sp, #4]
 8002b1e:	f500 7a7a 	add.w	sl, r0, #1000	; 0x3e8
 8002b22:	eb01 530a 	add.w	r3, r1, sl, lsl #20
 8002b26:	4610      	mov	r0, r2
 8002b28:	4619      	mov	r1, r3
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8002b30:	f7fd fdbe 	bl	80006b0 <__aeabi_dmul>
 8002b34:	4605      	mov	r5, r0
 8002b36:	460c      	mov	r4, r1
 8002b38:	4628      	mov	r0, r5
 8002b3a:	4621      	mov	r1, r4
 8002b3c:	b007      	add	sp, #28
 8002b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b42:	bf00      	nop

08002b44 <finite>:
 8002b44:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8002b48:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8002b4c:	0fc0      	lsrs	r0, r0, #31
 8002b4e:	4770      	bx	lr

08002b50 <__errno>:
 8002b50:	4b01      	ldr	r3, [pc, #4]	; (8002b58 <__errno+0x8>)
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	20000004 	.word	0x20000004

08002b5c <__libc_init_array>:
 8002b5c:	b570      	push	{r4, r5, r6, lr}
 8002b5e:	4d0d      	ldr	r5, [pc, #52]	; (8002b94 <__libc_init_array+0x38>)
 8002b60:	4c0d      	ldr	r4, [pc, #52]	; (8002b98 <__libc_init_array+0x3c>)
 8002b62:	1b64      	subs	r4, r4, r5
 8002b64:	10a4      	asrs	r4, r4, #2
 8002b66:	2600      	movs	r6, #0
 8002b68:	42a6      	cmp	r6, r4
 8002b6a:	d109      	bne.n	8002b80 <__libc_init_array+0x24>
 8002b6c:	4d0b      	ldr	r5, [pc, #44]	; (8002b9c <__libc_init_array+0x40>)
 8002b6e:	4c0c      	ldr	r4, [pc, #48]	; (8002ba0 <__libc_init_array+0x44>)
 8002b70:	f001 f8d0 	bl	8003d14 <_init>
 8002b74:	1b64      	subs	r4, r4, r5
 8002b76:	10a4      	asrs	r4, r4, #2
 8002b78:	2600      	movs	r6, #0
 8002b7a:	42a6      	cmp	r6, r4
 8002b7c:	d105      	bne.n	8002b8a <__libc_init_array+0x2e>
 8002b7e:	bd70      	pop	{r4, r5, r6, pc}
 8002b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b84:	4798      	blx	r3
 8002b86:	3601      	adds	r6, #1
 8002b88:	e7ee      	b.n	8002b68 <__libc_init_array+0xc>
 8002b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b8e:	4798      	blx	r3
 8002b90:	3601      	adds	r6, #1
 8002b92:	e7f2      	b.n	8002b7a <__libc_init_array+0x1e>
 8002b94:	08004008 	.word	0x08004008
 8002b98:	08004008 	.word	0x08004008
 8002b9c:	08004008 	.word	0x08004008
 8002ba0:	0800400c 	.word	0x0800400c

08002ba4 <malloc>:
 8002ba4:	4b02      	ldr	r3, [pc, #8]	; (8002bb0 <malloc+0xc>)
 8002ba6:	4601      	mov	r1, r0
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	f000 b86b 	b.w	8002c84 <_malloc_r>
 8002bae:	bf00      	nop
 8002bb0:	20000004 	.word	0x20000004

08002bb4 <free>:
 8002bb4:	4b02      	ldr	r3, [pc, #8]	; (8002bc0 <free+0xc>)
 8002bb6:	4601      	mov	r1, r0
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	f000 b819 	b.w	8002bf0 <_free_r>
 8002bbe:	bf00      	nop
 8002bc0:	20000004 	.word	0x20000004

08002bc4 <memcpy>:
 8002bc4:	440a      	add	r2, r1
 8002bc6:	4291      	cmp	r1, r2
 8002bc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8002bcc:	d100      	bne.n	8002bd0 <memcpy+0xc>
 8002bce:	4770      	bx	lr
 8002bd0:	b510      	push	{r4, lr}
 8002bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002bd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002bda:	4291      	cmp	r1, r2
 8002bdc:	d1f9      	bne.n	8002bd2 <memcpy+0xe>
 8002bde:	bd10      	pop	{r4, pc}

08002be0 <memset>:
 8002be0:	4402      	add	r2, r0
 8002be2:	4603      	mov	r3, r0
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d100      	bne.n	8002bea <memset+0xa>
 8002be8:	4770      	bx	lr
 8002bea:	f803 1b01 	strb.w	r1, [r3], #1
 8002bee:	e7f9      	b.n	8002be4 <memset+0x4>

08002bf0 <_free_r>:
 8002bf0:	b538      	push	{r3, r4, r5, lr}
 8002bf2:	4605      	mov	r5, r0
 8002bf4:	2900      	cmp	r1, #0
 8002bf6:	d041      	beq.n	8002c7c <_free_r+0x8c>
 8002bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bfc:	1f0c      	subs	r4, r1, #4
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	bfb8      	it	lt
 8002c02:	18e4      	addlt	r4, r4, r3
 8002c04:	f000 fc4c 	bl	80034a0 <__malloc_lock>
 8002c08:	4a1d      	ldr	r2, [pc, #116]	; (8002c80 <_free_r+0x90>)
 8002c0a:	6813      	ldr	r3, [r2, #0]
 8002c0c:	b933      	cbnz	r3, 8002c1c <_free_r+0x2c>
 8002c0e:	6063      	str	r3, [r4, #4]
 8002c10:	6014      	str	r4, [r2, #0]
 8002c12:	4628      	mov	r0, r5
 8002c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c18:	f000 bc48 	b.w	80034ac <__malloc_unlock>
 8002c1c:	42a3      	cmp	r3, r4
 8002c1e:	d908      	bls.n	8002c32 <_free_r+0x42>
 8002c20:	6820      	ldr	r0, [r4, #0]
 8002c22:	1821      	adds	r1, r4, r0
 8002c24:	428b      	cmp	r3, r1
 8002c26:	bf01      	itttt	eq
 8002c28:	6819      	ldreq	r1, [r3, #0]
 8002c2a:	685b      	ldreq	r3, [r3, #4]
 8002c2c:	1809      	addeq	r1, r1, r0
 8002c2e:	6021      	streq	r1, [r4, #0]
 8002c30:	e7ed      	b.n	8002c0e <_free_r+0x1e>
 8002c32:	461a      	mov	r2, r3
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	b10b      	cbz	r3, 8002c3c <_free_r+0x4c>
 8002c38:	42a3      	cmp	r3, r4
 8002c3a:	d9fa      	bls.n	8002c32 <_free_r+0x42>
 8002c3c:	6811      	ldr	r1, [r2, #0]
 8002c3e:	1850      	adds	r0, r2, r1
 8002c40:	42a0      	cmp	r0, r4
 8002c42:	d10b      	bne.n	8002c5c <_free_r+0x6c>
 8002c44:	6820      	ldr	r0, [r4, #0]
 8002c46:	4401      	add	r1, r0
 8002c48:	1850      	adds	r0, r2, r1
 8002c4a:	4283      	cmp	r3, r0
 8002c4c:	6011      	str	r1, [r2, #0]
 8002c4e:	d1e0      	bne.n	8002c12 <_free_r+0x22>
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	6053      	str	r3, [r2, #4]
 8002c56:	4401      	add	r1, r0
 8002c58:	6011      	str	r1, [r2, #0]
 8002c5a:	e7da      	b.n	8002c12 <_free_r+0x22>
 8002c5c:	d902      	bls.n	8002c64 <_free_r+0x74>
 8002c5e:	230c      	movs	r3, #12
 8002c60:	602b      	str	r3, [r5, #0]
 8002c62:	e7d6      	b.n	8002c12 <_free_r+0x22>
 8002c64:	6820      	ldr	r0, [r4, #0]
 8002c66:	1821      	adds	r1, r4, r0
 8002c68:	428b      	cmp	r3, r1
 8002c6a:	bf04      	itt	eq
 8002c6c:	6819      	ldreq	r1, [r3, #0]
 8002c6e:	685b      	ldreq	r3, [r3, #4]
 8002c70:	6063      	str	r3, [r4, #4]
 8002c72:	bf04      	itt	eq
 8002c74:	1809      	addeq	r1, r1, r0
 8002c76:	6021      	streq	r1, [r4, #0]
 8002c78:	6054      	str	r4, [r2, #4]
 8002c7a:	e7ca      	b.n	8002c12 <_free_r+0x22>
 8002c7c:	bd38      	pop	{r3, r4, r5, pc}
 8002c7e:	bf00      	nop
 8002c80:	200002fc 	.word	0x200002fc

08002c84 <_malloc_r>:
 8002c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c86:	1ccd      	adds	r5, r1, #3
 8002c88:	f025 0503 	bic.w	r5, r5, #3
 8002c8c:	3508      	adds	r5, #8
 8002c8e:	2d0c      	cmp	r5, #12
 8002c90:	bf38      	it	cc
 8002c92:	250c      	movcc	r5, #12
 8002c94:	2d00      	cmp	r5, #0
 8002c96:	4606      	mov	r6, r0
 8002c98:	db01      	blt.n	8002c9e <_malloc_r+0x1a>
 8002c9a:	42a9      	cmp	r1, r5
 8002c9c:	d903      	bls.n	8002ca6 <_malloc_r+0x22>
 8002c9e:	230c      	movs	r3, #12
 8002ca0:	6033      	str	r3, [r6, #0]
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ca6:	f000 fbfb 	bl	80034a0 <__malloc_lock>
 8002caa:	4921      	ldr	r1, [pc, #132]	; (8002d30 <_malloc_r+0xac>)
 8002cac:	680a      	ldr	r2, [r1, #0]
 8002cae:	4614      	mov	r4, r2
 8002cb0:	b99c      	cbnz	r4, 8002cda <_malloc_r+0x56>
 8002cb2:	4f20      	ldr	r7, [pc, #128]	; (8002d34 <_malloc_r+0xb0>)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	b923      	cbnz	r3, 8002cc2 <_malloc_r+0x3e>
 8002cb8:	4621      	mov	r1, r4
 8002cba:	4630      	mov	r0, r6
 8002cbc:	f000 f8a8 	bl	8002e10 <_sbrk_r>
 8002cc0:	6038      	str	r0, [r7, #0]
 8002cc2:	4629      	mov	r1, r5
 8002cc4:	4630      	mov	r0, r6
 8002cc6:	f000 f8a3 	bl	8002e10 <_sbrk_r>
 8002cca:	1c43      	adds	r3, r0, #1
 8002ccc:	d123      	bne.n	8002d16 <_malloc_r+0x92>
 8002cce:	230c      	movs	r3, #12
 8002cd0:	6033      	str	r3, [r6, #0]
 8002cd2:	4630      	mov	r0, r6
 8002cd4:	f000 fbea 	bl	80034ac <__malloc_unlock>
 8002cd8:	e7e3      	b.n	8002ca2 <_malloc_r+0x1e>
 8002cda:	6823      	ldr	r3, [r4, #0]
 8002cdc:	1b5b      	subs	r3, r3, r5
 8002cde:	d417      	bmi.n	8002d10 <_malloc_r+0x8c>
 8002ce0:	2b0b      	cmp	r3, #11
 8002ce2:	d903      	bls.n	8002cec <_malloc_r+0x68>
 8002ce4:	6023      	str	r3, [r4, #0]
 8002ce6:	441c      	add	r4, r3
 8002ce8:	6025      	str	r5, [r4, #0]
 8002cea:	e004      	b.n	8002cf6 <_malloc_r+0x72>
 8002cec:	6863      	ldr	r3, [r4, #4]
 8002cee:	42a2      	cmp	r2, r4
 8002cf0:	bf0c      	ite	eq
 8002cf2:	600b      	streq	r3, [r1, #0]
 8002cf4:	6053      	strne	r3, [r2, #4]
 8002cf6:	4630      	mov	r0, r6
 8002cf8:	f000 fbd8 	bl	80034ac <__malloc_unlock>
 8002cfc:	f104 000b 	add.w	r0, r4, #11
 8002d00:	1d23      	adds	r3, r4, #4
 8002d02:	f020 0007 	bic.w	r0, r0, #7
 8002d06:	1ac2      	subs	r2, r0, r3
 8002d08:	d0cc      	beq.n	8002ca4 <_malloc_r+0x20>
 8002d0a:	1a1b      	subs	r3, r3, r0
 8002d0c:	50a3      	str	r3, [r4, r2]
 8002d0e:	e7c9      	b.n	8002ca4 <_malloc_r+0x20>
 8002d10:	4622      	mov	r2, r4
 8002d12:	6864      	ldr	r4, [r4, #4]
 8002d14:	e7cc      	b.n	8002cb0 <_malloc_r+0x2c>
 8002d16:	1cc4      	adds	r4, r0, #3
 8002d18:	f024 0403 	bic.w	r4, r4, #3
 8002d1c:	42a0      	cmp	r0, r4
 8002d1e:	d0e3      	beq.n	8002ce8 <_malloc_r+0x64>
 8002d20:	1a21      	subs	r1, r4, r0
 8002d22:	4630      	mov	r0, r6
 8002d24:	f000 f874 	bl	8002e10 <_sbrk_r>
 8002d28:	3001      	adds	r0, #1
 8002d2a:	d1dd      	bne.n	8002ce8 <_malloc_r+0x64>
 8002d2c:	e7cf      	b.n	8002cce <_malloc_r+0x4a>
 8002d2e:	bf00      	nop
 8002d30:	200002fc 	.word	0x200002fc
 8002d34:	20000300 	.word	0x20000300

08002d38 <srand>:
 8002d38:	b538      	push	{r3, r4, r5, lr}
 8002d3a:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <srand+0x44>)
 8002d3c:	681d      	ldr	r5, [r3, #0]
 8002d3e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002d40:	4604      	mov	r4, r0
 8002d42:	b9b3      	cbnz	r3, 8002d72 <srand+0x3a>
 8002d44:	2018      	movs	r0, #24
 8002d46:	f7ff ff2d 	bl	8002ba4 <malloc>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	63a8      	str	r0, [r5, #56]	; 0x38
 8002d4e:	b920      	cbnz	r0, 8002d5a <srand+0x22>
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <srand+0x48>)
 8002d52:	480c      	ldr	r0, [pc, #48]	; (8002d84 <srand+0x4c>)
 8002d54:	2142      	movs	r1, #66	; 0x42
 8002d56:	f000 f945 	bl	8002fe4 <__assert_func>
 8002d5a:	490b      	ldr	r1, [pc, #44]	; (8002d88 <srand+0x50>)
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <srand+0x54>)
 8002d5e:	e9c0 1300 	strd	r1, r3, [r0]
 8002d62:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <srand+0x58>)
 8002d64:	6083      	str	r3, [r0, #8]
 8002d66:	230b      	movs	r3, #11
 8002d68:	8183      	strh	r3, [r0, #12]
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	2001      	movs	r0, #1
 8002d6e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002d72:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002d74:	2200      	movs	r2, #0
 8002d76:	611c      	str	r4, [r3, #16]
 8002d78:	615a      	str	r2, [r3, #20]
 8002d7a:	bd38      	pop	{r3, r4, r5, pc}
 8002d7c:	20000004 	.word	0x20000004
 8002d80:	08003ea4 	.word	0x08003ea4
 8002d84:	08003ebb 	.word	0x08003ebb
 8002d88:	abcd330e 	.word	0xabcd330e
 8002d8c:	e66d1234 	.word	0xe66d1234
 8002d90:	0005deec 	.word	0x0005deec

08002d94 <rand>:
 8002d94:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <rand+0x5c>)
 8002d96:	b510      	push	{r4, lr}
 8002d98:	681c      	ldr	r4, [r3, #0]
 8002d9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d9c:	b9b3      	cbnz	r3, 8002dcc <rand+0x38>
 8002d9e:	2018      	movs	r0, #24
 8002da0:	f7ff ff00 	bl	8002ba4 <malloc>
 8002da4:	4602      	mov	r2, r0
 8002da6:	63a0      	str	r0, [r4, #56]	; 0x38
 8002da8:	b920      	cbnz	r0, 8002db4 <rand+0x20>
 8002daa:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <rand+0x60>)
 8002dac:	4812      	ldr	r0, [pc, #72]	; (8002df8 <rand+0x64>)
 8002dae:	214e      	movs	r1, #78	; 0x4e
 8002db0:	f000 f918 	bl	8002fe4 <__assert_func>
 8002db4:	4911      	ldr	r1, [pc, #68]	; (8002dfc <rand+0x68>)
 8002db6:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <rand+0x6c>)
 8002db8:	e9c0 1300 	strd	r1, r3, [r0]
 8002dbc:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <rand+0x70>)
 8002dbe:	6083      	str	r3, [r0, #8]
 8002dc0:	230b      	movs	r3, #11
 8002dc2:	8183      	strh	r3, [r0, #12]
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002dcc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8002dce:	4a0e      	ldr	r2, [pc, #56]	; (8002e08 <rand+0x74>)
 8002dd0:	6920      	ldr	r0, [r4, #16]
 8002dd2:	6963      	ldr	r3, [r4, #20]
 8002dd4:	490d      	ldr	r1, [pc, #52]	; (8002e0c <rand+0x78>)
 8002dd6:	4342      	muls	r2, r0
 8002dd8:	fb01 2203 	mla	r2, r1, r3, r2
 8002ddc:	fba0 0101 	umull	r0, r1, r0, r1
 8002de0:	1c43      	adds	r3, r0, #1
 8002de2:	eb42 0001 	adc.w	r0, r2, r1
 8002de6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8002dea:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002dee:	bd10      	pop	{r4, pc}
 8002df0:	20000004 	.word	0x20000004
 8002df4:	08003ea4 	.word	0x08003ea4
 8002df8:	08003ebb 	.word	0x08003ebb
 8002dfc:	abcd330e 	.word	0xabcd330e
 8002e00:	e66d1234 	.word	0xe66d1234
 8002e04:	0005deec 	.word	0x0005deec
 8002e08:	5851f42d 	.word	0x5851f42d
 8002e0c:	4c957f2d 	.word	0x4c957f2d

08002e10 <_sbrk_r>:
 8002e10:	b538      	push	{r3, r4, r5, lr}
 8002e12:	4d06      	ldr	r5, [pc, #24]	; (8002e2c <_sbrk_r+0x1c>)
 8002e14:	2300      	movs	r3, #0
 8002e16:	4604      	mov	r4, r0
 8002e18:	4608      	mov	r0, r1
 8002e1a:	602b      	str	r3, [r5, #0]
 8002e1c:	f7ff fc40 	bl	80026a0 <_sbrk>
 8002e20:	1c43      	adds	r3, r0, #1
 8002e22:	d102      	bne.n	8002e2a <_sbrk_r+0x1a>
 8002e24:	682b      	ldr	r3, [r5, #0]
 8002e26:	b103      	cbz	r3, 8002e2a <_sbrk_r+0x1a>
 8002e28:	6023      	str	r3, [r4, #0]
 8002e2a:	bd38      	pop	{r3, r4, r5, pc}
 8002e2c:	20000308 	.word	0x20000308

08002e30 <time>:
 8002e30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002e32:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <time+0x30>)
 8002e34:	4604      	mov	r4, r0
 8002e36:	2200      	movs	r2, #0
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	4669      	mov	r1, sp
 8002e3c:	f000 fab6 	bl	80033ac <_gettimeofday_r>
 8002e40:	2800      	cmp	r0, #0
 8002e42:	da05      	bge.n	8002e50 <time+0x20>
 8002e44:	f04f 32ff 	mov.w	r2, #4294967295
 8002e48:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4c:	e9cd 2300 	strd	r2, r3, [sp]
 8002e50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002e54:	b10c      	cbz	r4, 8002e5a <time+0x2a>
 8002e56:	e9c4 0100 	strd	r0, r1, [r4]
 8002e5a:	b004      	add	sp, #16
 8002e5c:	bd10      	pop	{r4, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000004 	.word	0x20000004

08002e64 <__swbuf_r>:
 8002e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e66:	460e      	mov	r6, r1
 8002e68:	4614      	mov	r4, r2
 8002e6a:	4605      	mov	r5, r0
 8002e6c:	b118      	cbz	r0, 8002e76 <__swbuf_r+0x12>
 8002e6e:	6983      	ldr	r3, [r0, #24]
 8002e70:	b90b      	cbnz	r3, 8002e76 <__swbuf_r+0x12>
 8002e72:	f000 f9eb 	bl	800324c <__sinit>
 8002e76:	4b21      	ldr	r3, [pc, #132]	; (8002efc <__swbuf_r+0x98>)
 8002e78:	429c      	cmp	r4, r3
 8002e7a:	d12b      	bne.n	8002ed4 <__swbuf_r+0x70>
 8002e7c:	686c      	ldr	r4, [r5, #4]
 8002e7e:	69a3      	ldr	r3, [r4, #24]
 8002e80:	60a3      	str	r3, [r4, #8]
 8002e82:	89a3      	ldrh	r3, [r4, #12]
 8002e84:	071a      	lsls	r2, r3, #28
 8002e86:	d52f      	bpl.n	8002ee8 <__swbuf_r+0x84>
 8002e88:	6923      	ldr	r3, [r4, #16]
 8002e8a:	b36b      	cbz	r3, 8002ee8 <__swbuf_r+0x84>
 8002e8c:	6923      	ldr	r3, [r4, #16]
 8002e8e:	6820      	ldr	r0, [r4, #0]
 8002e90:	1ac0      	subs	r0, r0, r3
 8002e92:	6963      	ldr	r3, [r4, #20]
 8002e94:	b2f6      	uxtb	r6, r6
 8002e96:	4283      	cmp	r3, r0
 8002e98:	4637      	mov	r7, r6
 8002e9a:	dc04      	bgt.n	8002ea6 <__swbuf_r+0x42>
 8002e9c:	4621      	mov	r1, r4
 8002e9e:	4628      	mov	r0, r5
 8002ea0:	f000 f940 	bl	8003124 <_fflush_r>
 8002ea4:	bb30      	cbnz	r0, 8002ef4 <__swbuf_r+0x90>
 8002ea6:	68a3      	ldr	r3, [r4, #8]
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	60a3      	str	r3, [r4, #8]
 8002eac:	6823      	ldr	r3, [r4, #0]
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	6022      	str	r2, [r4, #0]
 8002eb2:	701e      	strb	r6, [r3, #0]
 8002eb4:	6963      	ldr	r3, [r4, #20]
 8002eb6:	3001      	adds	r0, #1
 8002eb8:	4283      	cmp	r3, r0
 8002eba:	d004      	beq.n	8002ec6 <__swbuf_r+0x62>
 8002ebc:	89a3      	ldrh	r3, [r4, #12]
 8002ebe:	07db      	lsls	r3, r3, #31
 8002ec0:	d506      	bpl.n	8002ed0 <__swbuf_r+0x6c>
 8002ec2:	2e0a      	cmp	r6, #10
 8002ec4:	d104      	bne.n	8002ed0 <__swbuf_r+0x6c>
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	4628      	mov	r0, r5
 8002eca:	f000 f92b 	bl	8003124 <_fflush_r>
 8002ece:	b988      	cbnz	r0, 8002ef4 <__swbuf_r+0x90>
 8002ed0:	4638      	mov	r0, r7
 8002ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ed4:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <__swbuf_r+0x9c>)
 8002ed6:	429c      	cmp	r4, r3
 8002ed8:	d101      	bne.n	8002ede <__swbuf_r+0x7a>
 8002eda:	68ac      	ldr	r4, [r5, #8]
 8002edc:	e7cf      	b.n	8002e7e <__swbuf_r+0x1a>
 8002ede:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <__swbuf_r+0xa0>)
 8002ee0:	429c      	cmp	r4, r3
 8002ee2:	bf08      	it	eq
 8002ee4:	68ec      	ldreq	r4, [r5, #12]
 8002ee6:	e7ca      	b.n	8002e7e <__swbuf_r+0x1a>
 8002ee8:	4621      	mov	r1, r4
 8002eea:	4628      	mov	r0, r5
 8002eec:	f000 f80c 	bl	8002f08 <__swsetup_r>
 8002ef0:	2800      	cmp	r0, #0
 8002ef2:	d0cb      	beq.n	8002e8c <__swbuf_r+0x28>
 8002ef4:	f04f 37ff 	mov.w	r7, #4294967295
 8002ef8:	e7ea      	b.n	8002ed0 <__swbuf_r+0x6c>
 8002efa:	bf00      	nop
 8002efc:	08003f94 	.word	0x08003f94
 8002f00:	08003fb4 	.word	0x08003fb4
 8002f04:	08003f74 	.word	0x08003f74

08002f08 <__swsetup_r>:
 8002f08:	4b32      	ldr	r3, [pc, #200]	; (8002fd4 <__swsetup_r+0xcc>)
 8002f0a:	b570      	push	{r4, r5, r6, lr}
 8002f0c:	681d      	ldr	r5, [r3, #0]
 8002f0e:	4606      	mov	r6, r0
 8002f10:	460c      	mov	r4, r1
 8002f12:	b125      	cbz	r5, 8002f1e <__swsetup_r+0x16>
 8002f14:	69ab      	ldr	r3, [r5, #24]
 8002f16:	b913      	cbnz	r3, 8002f1e <__swsetup_r+0x16>
 8002f18:	4628      	mov	r0, r5
 8002f1a:	f000 f997 	bl	800324c <__sinit>
 8002f1e:	4b2e      	ldr	r3, [pc, #184]	; (8002fd8 <__swsetup_r+0xd0>)
 8002f20:	429c      	cmp	r4, r3
 8002f22:	d10f      	bne.n	8002f44 <__swsetup_r+0x3c>
 8002f24:	686c      	ldr	r4, [r5, #4]
 8002f26:	89a3      	ldrh	r3, [r4, #12]
 8002f28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f2c:	0719      	lsls	r1, r3, #28
 8002f2e:	d42c      	bmi.n	8002f8a <__swsetup_r+0x82>
 8002f30:	06dd      	lsls	r5, r3, #27
 8002f32:	d411      	bmi.n	8002f58 <__swsetup_r+0x50>
 8002f34:	2309      	movs	r3, #9
 8002f36:	6033      	str	r3, [r6, #0]
 8002f38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002f3c:	81a3      	strh	r3, [r4, #12]
 8002f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f42:	e03e      	b.n	8002fc2 <__swsetup_r+0xba>
 8002f44:	4b25      	ldr	r3, [pc, #148]	; (8002fdc <__swsetup_r+0xd4>)
 8002f46:	429c      	cmp	r4, r3
 8002f48:	d101      	bne.n	8002f4e <__swsetup_r+0x46>
 8002f4a:	68ac      	ldr	r4, [r5, #8]
 8002f4c:	e7eb      	b.n	8002f26 <__swsetup_r+0x1e>
 8002f4e:	4b24      	ldr	r3, [pc, #144]	; (8002fe0 <__swsetup_r+0xd8>)
 8002f50:	429c      	cmp	r4, r3
 8002f52:	bf08      	it	eq
 8002f54:	68ec      	ldreq	r4, [r5, #12]
 8002f56:	e7e6      	b.n	8002f26 <__swsetup_r+0x1e>
 8002f58:	0758      	lsls	r0, r3, #29
 8002f5a:	d512      	bpl.n	8002f82 <__swsetup_r+0x7a>
 8002f5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f5e:	b141      	cbz	r1, 8002f72 <__swsetup_r+0x6a>
 8002f60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f64:	4299      	cmp	r1, r3
 8002f66:	d002      	beq.n	8002f6e <__swsetup_r+0x66>
 8002f68:	4630      	mov	r0, r6
 8002f6a:	f7ff fe41 	bl	8002bf0 <_free_r>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	6363      	str	r3, [r4, #52]	; 0x34
 8002f72:	89a3      	ldrh	r3, [r4, #12]
 8002f74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002f78:	81a3      	strh	r3, [r4, #12]
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	6063      	str	r3, [r4, #4]
 8002f7e:	6923      	ldr	r3, [r4, #16]
 8002f80:	6023      	str	r3, [r4, #0]
 8002f82:	89a3      	ldrh	r3, [r4, #12]
 8002f84:	f043 0308 	orr.w	r3, r3, #8
 8002f88:	81a3      	strh	r3, [r4, #12]
 8002f8a:	6923      	ldr	r3, [r4, #16]
 8002f8c:	b94b      	cbnz	r3, 8002fa2 <__swsetup_r+0x9a>
 8002f8e:	89a3      	ldrh	r3, [r4, #12]
 8002f90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f98:	d003      	beq.n	8002fa2 <__swsetup_r+0x9a>
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	4630      	mov	r0, r6
 8002f9e:	f000 fa3f 	bl	8003420 <__smakebuf_r>
 8002fa2:	89a0      	ldrh	r0, [r4, #12]
 8002fa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002fa8:	f010 0301 	ands.w	r3, r0, #1
 8002fac:	d00a      	beq.n	8002fc4 <__swsetup_r+0xbc>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60a3      	str	r3, [r4, #8]
 8002fb2:	6963      	ldr	r3, [r4, #20]
 8002fb4:	425b      	negs	r3, r3
 8002fb6:	61a3      	str	r3, [r4, #24]
 8002fb8:	6923      	ldr	r3, [r4, #16]
 8002fba:	b943      	cbnz	r3, 8002fce <__swsetup_r+0xc6>
 8002fbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002fc0:	d1ba      	bne.n	8002f38 <__swsetup_r+0x30>
 8002fc2:	bd70      	pop	{r4, r5, r6, pc}
 8002fc4:	0781      	lsls	r1, r0, #30
 8002fc6:	bf58      	it	pl
 8002fc8:	6963      	ldrpl	r3, [r4, #20]
 8002fca:	60a3      	str	r3, [r4, #8]
 8002fcc:	e7f4      	b.n	8002fb8 <__swsetup_r+0xb0>
 8002fce:	2000      	movs	r0, #0
 8002fd0:	e7f7      	b.n	8002fc2 <__swsetup_r+0xba>
 8002fd2:	bf00      	nop
 8002fd4:	20000004 	.word	0x20000004
 8002fd8:	08003f94 	.word	0x08003f94
 8002fdc:	08003fb4 	.word	0x08003fb4
 8002fe0:	08003f74 	.word	0x08003f74

08002fe4 <__assert_func>:
 8002fe4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002fe6:	4614      	mov	r4, r2
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4b09      	ldr	r3, [pc, #36]	; (8003010 <__assert_func+0x2c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4605      	mov	r5, r0
 8002ff0:	68d8      	ldr	r0, [r3, #12]
 8002ff2:	b14c      	cbz	r4, 8003008 <__assert_func+0x24>
 8002ff4:	4b07      	ldr	r3, [pc, #28]	; (8003014 <__assert_func+0x30>)
 8002ff6:	9100      	str	r1, [sp, #0]
 8002ff8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002ffc:	4906      	ldr	r1, [pc, #24]	; (8003018 <__assert_func+0x34>)
 8002ffe:	462b      	mov	r3, r5
 8003000:	f000 f9a2 	bl	8003348 <fiprintf>
 8003004:	f000 fd9a 	bl	8003b3c <abort>
 8003008:	4b04      	ldr	r3, [pc, #16]	; (800301c <__assert_func+0x38>)
 800300a:	461c      	mov	r4, r3
 800300c:	e7f3      	b.n	8002ff6 <__assert_func+0x12>
 800300e:	bf00      	nop
 8003010:	20000004 	.word	0x20000004
 8003014:	08003f38 	.word	0x08003f38
 8003018:	08003f45 	.word	0x08003f45
 800301c:	08003f73 	.word	0x08003f73

08003020 <__sflush_r>:
 8003020:	898a      	ldrh	r2, [r1, #12]
 8003022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003024:	4605      	mov	r5, r0
 8003026:	0710      	lsls	r0, r2, #28
 8003028:	460c      	mov	r4, r1
 800302a:	d457      	bmi.n	80030dc <__sflush_r+0xbc>
 800302c:	684b      	ldr	r3, [r1, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	dc04      	bgt.n	800303c <__sflush_r+0x1c>
 8003032:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003034:	2b00      	cmp	r3, #0
 8003036:	dc01      	bgt.n	800303c <__sflush_r+0x1c>
 8003038:	2000      	movs	r0, #0
 800303a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800303c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800303e:	2e00      	cmp	r6, #0
 8003040:	d0fa      	beq.n	8003038 <__sflush_r+0x18>
 8003042:	2300      	movs	r3, #0
 8003044:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003048:	682f      	ldr	r7, [r5, #0]
 800304a:	602b      	str	r3, [r5, #0]
 800304c:	d032      	beq.n	80030b4 <__sflush_r+0x94>
 800304e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003050:	89a3      	ldrh	r3, [r4, #12]
 8003052:	075a      	lsls	r2, r3, #29
 8003054:	d505      	bpl.n	8003062 <__sflush_r+0x42>
 8003056:	6863      	ldr	r3, [r4, #4]
 8003058:	1ac0      	subs	r0, r0, r3
 800305a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800305c:	b10b      	cbz	r3, 8003062 <__sflush_r+0x42>
 800305e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003060:	1ac0      	subs	r0, r0, r3
 8003062:	2300      	movs	r3, #0
 8003064:	4602      	mov	r2, r0
 8003066:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003068:	6a21      	ldr	r1, [r4, #32]
 800306a:	4628      	mov	r0, r5
 800306c:	47b0      	blx	r6
 800306e:	1c43      	adds	r3, r0, #1
 8003070:	89a3      	ldrh	r3, [r4, #12]
 8003072:	d106      	bne.n	8003082 <__sflush_r+0x62>
 8003074:	6829      	ldr	r1, [r5, #0]
 8003076:	291d      	cmp	r1, #29
 8003078:	d82c      	bhi.n	80030d4 <__sflush_r+0xb4>
 800307a:	4a29      	ldr	r2, [pc, #164]	; (8003120 <__sflush_r+0x100>)
 800307c:	40ca      	lsrs	r2, r1
 800307e:	07d6      	lsls	r6, r2, #31
 8003080:	d528      	bpl.n	80030d4 <__sflush_r+0xb4>
 8003082:	2200      	movs	r2, #0
 8003084:	6062      	str	r2, [r4, #4]
 8003086:	04d9      	lsls	r1, r3, #19
 8003088:	6922      	ldr	r2, [r4, #16]
 800308a:	6022      	str	r2, [r4, #0]
 800308c:	d504      	bpl.n	8003098 <__sflush_r+0x78>
 800308e:	1c42      	adds	r2, r0, #1
 8003090:	d101      	bne.n	8003096 <__sflush_r+0x76>
 8003092:	682b      	ldr	r3, [r5, #0]
 8003094:	b903      	cbnz	r3, 8003098 <__sflush_r+0x78>
 8003096:	6560      	str	r0, [r4, #84]	; 0x54
 8003098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800309a:	602f      	str	r7, [r5, #0]
 800309c:	2900      	cmp	r1, #0
 800309e:	d0cb      	beq.n	8003038 <__sflush_r+0x18>
 80030a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030a4:	4299      	cmp	r1, r3
 80030a6:	d002      	beq.n	80030ae <__sflush_r+0x8e>
 80030a8:	4628      	mov	r0, r5
 80030aa:	f7ff fda1 	bl	8002bf0 <_free_r>
 80030ae:	2000      	movs	r0, #0
 80030b0:	6360      	str	r0, [r4, #52]	; 0x34
 80030b2:	e7c2      	b.n	800303a <__sflush_r+0x1a>
 80030b4:	6a21      	ldr	r1, [r4, #32]
 80030b6:	2301      	movs	r3, #1
 80030b8:	4628      	mov	r0, r5
 80030ba:	47b0      	blx	r6
 80030bc:	1c41      	adds	r1, r0, #1
 80030be:	d1c7      	bne.n	8003050 <__sflush_r+0x30>
 80030c0:	682b      	ldr	r3, [r5, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0c4      	beq.n	8003050 <__sflush_r+0x30>
 80030c6:	2b1d      	cmp	r3, #29
 80030c8:	d001      	beq.n	80030ce <__sflush_r+0xae>
 80030ca:	2b16      	cmp	r3, #22
 80030cc:	d101      	bne.n	80030d2 <__sflush_r+0xb2>
 80030ce:	602f      	str	r7, [r5, #0]
 80030d0:	e7b2      	b.n	8003038 <__sflush_r+0x18>
 80030d2:	89a3      	ldrh	r3, [r4, #12]
 80030d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030d8:	81a3      	strh	r3, [r4, #12]
 80030da:	e7ae      	b.n	800303a <__sflush_r+0x1a>
 80030dc:	690f      	ldr	r7, [r1, #16]
 80030de:	2f00      	cmp	r7, #0
 80030e0:	d0aa      	beq.n	8003038 <__sflush_r+0x18>
 80030e2:	0793      	lsls	r3, r2, #30
 80030e4:	680e      	ldr	r6, [r1, #0]
 80030e6:	bf08      	it	eq
 80030e8:	694b      	ldreq	r3, [r1, #20]
 80030ea:	600f      	str	r7, [r1, #0]
 80030ec:	bf18      	it	ne
 80030ee:	2300      	movne	r3, #0
 80030f0:	1bf6      	subs	r6, r6, r7
 80030f2:	608b      	str	r3, [r1, #8]
 80030f4:	2e00      	cmp	r6, #0
 80030f6:	dd9f      	ble.n	8003038 <__sflush_r+0x18>
 80030f8:	6a21      	ldr	r1, [r4, #32]
 80030fa:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80030fe:	4633      	mov	r3, r6
 8003100:	463a      	mov	r2, r7
 8003102:	4628      	mov	r0, r5
 8003104:	47e0      	blx	ip
 8003106:	2800      	cmp	r0, #0
 8003108:	dc06      	bgt.n	8003118 <__sflush_r+0xf8>
 800310a:	89a3      	ldrh	r3, [r4, #12]
 800310c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003110:	81a3      	strh	r3, [r4, #12]
 8003112:	f04f 30ff 	mov.w	r0, #4294967295
 8003116:	e790      	b.n	800303a <__sflush_r+0x1a>
 8003118:	4407      	add	r7, r0
 800311a:	1a36      	subs	r6, r6, r0
 800311c:	e7ea      	b.n	80030f4 <__sflush_r+0xd4>
 800311e:	bf00      	nop
 8003120:	20400001 	.word	0x20400001

08003124 <_fflush_r>:
 8003124:	b538      	push	{r3, r4, r5, lr}
 8003126:	690b      	ldr	r3, [r1, #16]
 8003128:	4605      	mov	r5, r0
 800312a:	460c      	mov	r4, r1
 800312c:	b913      	cbnz	r3, 8003134 <_fflush_r+0x10>
 800312e:	2500      	movs	r5, #0
 8003130:	4628      	mov	r0, r5
 8003132:	bd38      	pop	{r3, r4, r5, pc}
 8003134:	b118      	cbz	r0, 800313e <_fflush_r+0x1a>
 8003136:	6983      	ldr	r3, [r0, #24]
 8003138:	b90b      	cbnz	r3, 800313e <_fflush_r+0x1a>
 800313a:	f000 f887 	bl	800324c <__sinit>
 800313e:	4b14      	ldr	r3, [pc, #80]	; (8003190 <_fflush_r+0x6c>)
 8003140:	429c      	cmp	r4, r3
 8003142:	d11b      	bne.n	800317c <_fflush_r+0x58>
 8003144:	686c      	ldr	r4, [r5, #4]
 8003146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0ef      	beq.n	800312e <_fflush_r+0xa>
 800314e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003150:	07d0      	lsls	r0, r2, #31
 8003152:	d404      	bmi.n	800315e <_fflush_r+0x3a>
 8003154:	0599      	lsls	r1, r3, #22
 8003156:	d402      	bmi.n	800315e <_fflush_r+0x3a>
 8003158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800315a:	f000 f93a 	bl	80033d2 <__retarget_lock_acquire_recursive>
 800315e:	4628      	mov	r0, r5
 8003160:	4621      	mov	r1, r4
 8003162:	f7ff ff5d 	bl	8003020 <__sflush_r>
 8003166:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003168:	07da      	lsls	r2, r3, #31
 800316a:	4605      	mov	r5, r0
 800316c:	d4e0      	bmi.n	8003130 <_fflush_r+0xc>
 800316e:	89a3      	ldrh	r3, [r4, #12]
 8003170:	059b      	lsls	r3, r3, #22
 8003172:	d4dd      	bmi.n	8003130 <_fflush_r+0xc>
 8003174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003176:	f000 f92d 	bl	80033d4 <__retarget_lock_release_recursive>
 800317a:	e7d9      	b.n	8003130 <_fflush_r+0xc>
 800317c:	4b05      	ldr	r3, [pc, #20]	; (8003194 <_fflush_r+0x70>)
 800317e:	429c      	cmp	r4, r3
 8003180:	d101      	bne.n	8003186 <_fflush_r+0x62>
 8003182:	68ac      	ldr	r4, [r5, #8]
 8003184:	e7df      	b.n	8003146 <_fflush_r+0x22>
 8003186:	4b04      	ldr	r3, [pc, #16]	; (8003198 <_fflush_r+0x74>)
 8003188:	429c      	cmp	r4, r3
 800318a:	bf08      	it	eq
 800318c:	68ec      	ldreq	r4, [r5, #12]
 800318e:	e7da      	b.n	8003146 <_fflush_r+0x22>
 8003190:	08003f94 	.word	0x08003f94
 8003194:	08003fb4 	.word	0x08003fb4
 8003198:	08003f74 	.word	0x08003f74

0800319c <std>:
 800319c:	2300      	movs	r3, #0
 800319e:	b510      	push	{r4, lr}
 80031a0:	4604      	mov	r4, r0
 80031a2:	e9c0 3300 	strd	r3, r3, [r0]
 80031a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031aa:	6083      	str	r3, [r0, #8]
 80031ac:	8181      	strh	r1, [r0, #12]
 80031ae:	6643      	str	r3, [r0, #100]	; 0x64
 80031b0:	81c2      	strh	r2, [r0, #14]
 80031b2:	6183      	str	r3, [r0, #24]
 80031b4:	4619      	mov	r1, r3
 80031b6:	2208      	movs	r2, #8
 80031b8:	305c      	adds	r0, #92	; 0x5c
 80031ba:	f7ff fd11 	bl	8002be0 <memset>
 80031be:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <std+0x38>)
 80031c0:	6263      	str	r3, [r4, #36]	; 0x24
 80031c2:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <std+0x3c>)
 80031c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80031c6:	4b05      	ldr	r3, [pc, #20]	; (80031dc <std+0x40>)
 80031c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <std+0x44>)
 80031cc:	6224      	str	r4, [r4, #32]
 80031ce:	6323      	str	r3, [r4, #48]	; 0x30
 80031d0:	bd10      	pop	{r4, pc}
 80031d2:	bf00      	nop
 80031d4:	08003a91 	.word	0x08003a91
 80031d8:	08003ab3 	.word	0x08003ab3
 80031dc:	08003aeb 	.word	0x08003aeb
 80031e0:	08003b0f 	.word	0x08003b0f

080031e4 <_cleanup_r>:
 80031e4:	4901      	ldr	r1, [pc, #4]	; (80031ec <_cleanup_r+0x8>)
 80031e6:	f000 b8c1 	b.w	800336c <_fwalk_reent>
 80031ea:	bf00      	nop
 80031ec:	08003125 	.word	0x08003125

080031f0 <__sfmoreglue>:
 80031f0:	b570      	push	{r4, r5, r6, lr}
 80031f2:	2268      	movs	r2, #104	; 0x68
 80031f4:	1e4d      	subs	r5, r1, #1
 80031f6:	4355      	muls	r5, r2
 80031f8:	460e      	mov	r6, r1
 80031fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80031fe:	f7ff fd41 	bl	8002c84 <_malloc_r>
 8003202:	4604      	mov	r4, r0
 8003204:	b140      	cbz	r0, 8003218 <__sfmoreglue+0x28>
 8003206:	2100      	movs	r1, #0
 8003208:	e9c0 1600 	strd	r1, r6, [r0]
 800320c:	300c      	adds	r0, #12
 800320e:	60a0      	str	r0, [r4, #8]
 8003210:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003214:	f7ff fce4 	bl	8002be0 <memset>
 8003218:	4620      	mov	r0, r4
 800321a:	bd70      	pop	{r4, r5, r6, pc}

0800321c <__sfp_lock_acquire>:
 800321c:	4801      	ldr	r0, [pc, #4]	; (8003224 <__sfp_lock_acquire+0x8>)
 800321e:	f000 b8d8 	b.w	80033d2 <__retarget_lock_acquire_recursive>
 8003222:	bf00      	nop
 8003224:	20000305 	.word	0x20000305

08003228 <__sfp_lock_release>:
 8003228:	4801      	ldr	r0, [pc, #4]	; (8003230 <__sfp_lock_release+0x8>)
 800322a:	f000 b8d3 	b.w	80033d4 <__retarget_lock_release_recursive>
 800322e:	bf00      	nop
 8003230:	20000305 	.word	0x20000305

08003234 <__sinit_lock_acquire>:
 8003234:	4801      	ldr	r0, [pc, #4]	; (800323c <__sinit_lock_acquire+0x8>)
 8003236:	f000 b8cc 	b.w	80033d2 <__retarget_lock_acquire_recursive>
 800323a:	bf00      	nop
 800323c:	20000306 	.word	0x20000306

08003240 <__sinit_lock_release>:
 8003240:	4801      	ldr	r0, [pc, #4]	; (8003248 <__sinit_lock_release+0x8>)
 8003242:	f000 b8c7 	b.w	80033d4 <__retarget_lock_release_recursive>
 8003246:	bf00      	nop
 8003248:	20000306 	.word	0x20000306

0800324c <__sinit>:
 800324c:	b510      	push	{r4, lr}
 800324e:	4604      	mov	r4, r0
 8003250:	f7ff fff0 	bl	8003234 <__sinit_lock_acquire>
 8003254:	69a3      	ldr	r3, [r4, #24]
 8003256:	b11b      	cbz	r3, 8003260 <__sinit+0x14>
 8003258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800325c:	f7ff bff0 	b.w	8003240 <__sinit_lock_release>
 8003260:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003264:	6523      	str	r3, [r4, #80]	; 0x50
 8003266:	4b13      	ldr	r3, [pc, #76]	; (80032b4 <__sinit+0x68>)
 8003268:	4a13      	ldr	r2, [pc, #76]	; (80032b8 <__sinit+0x6c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	62a2      	str	r2, [r4, #40]	; 0x28
 800326e:	42a3      	cmp	r3, r4
 8003270:	bf04      	itt	eq
 8003272:	2301      	moveq	r3, #1
 8003274:	61a3      	streq	r3, [r4, #24]
 8003276:	4620      	mov	r0, r4
 8003278:	f000 f820 	bl	80032bc <__sfp>
 800327c:	6060      	str	r0, [r4, #4]
 800327e:	4620      	mov	r0, r4
 8003280:	f000 f81c 	bl	80032bc <__sfp>
 8003284:	60a0      	str	r0, [r4, #8]
 8003286:	4620      	mov	r0, r4
 8003288:	f000 f818 	bl	80032bc <__sfp>
 800328c:	2200      	movs	r2, #0
 800328e:	60e0      	str	r0, [r4, #12]
 8003290:	2104      	movs	r1, #4
 8003292:	6860      	ldr	r0, [r4, #4]
 8003294:	f7ff ff82 	bl	800319c <std>
 8003298:	68a0      	ldr	r0, [r4, #8]
 800329a:	2201      	movs	r2, #1
 800329c:	2109      	movs	r1, #9
 800329e:	f7ff ff7d 	bl	800319c <std>
 80032a2:	68e0      	ldr	r0, [r4, #12]
 80032a4:	2202      	movs	r2, #2
 80032a6:	2112      	movs	r1, #18
 80032a8:	f7ff ff78 	bl	800319c <std>
 80032ac:	2301      	movs	r3, #1
 80032ae:	61a3      	str	r3, [r4, #24]
 80032b0:	e7d2      	b.n	8003258 <__sinit+0xc>
 80032b2:	bf00      	nop
 80032b4:	08003ea0 	.word	0x08003ea0
 80032b8:	080031e5 	.word	0x080031e5

080032bc <__sfp>:
 80032bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032be:	4607      	mov	r7, r0
 80032c0:	f7ff ffac 	bl	800321c <__sfp_lock_acquire>
 80032c4:	4b1e      	ldr	r3, [pc, #120]	; (8003340 <__sfp+0x84>)
 80032c6:	681e      	ldr	r6, [r3, #0]
 80032c8:	69b3      	ldr	r3, [r6, #24]
 80032ca:	b913      	cbnz	r3, 80032d2 <__sfp+0x16>
 80032cc:	4630      	mov	r0, r6
 80032ce:	f7ff ffbd 	bl	800324c <__sinit>
 80032d2:	3648      	adds	r6, #72	; 0x48
 80032d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80032d8:	3b01      	subs	r3, #1
 80032da:	d503      	bpl.n	80032e4 <__sfp+0x28>
 80032dc:	6833      	ldr	r3, [r6, #0]
 80032de:	b30b      	cbz	r3, 8003324 <__sfp+0x68>
 80032e0:	6836      	ldr	r6, [r6, #0]
 80032e2:	e7f7      	b.n	80032d4 <__sfp+0x18>
 80032e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80032e8:	b9d5      	cbnz	r5, 8003320 <__sfp+0x64>
 80032ea:	4b16      	ldr	r3, [pc, #88]	; (8003344 <__sfp+0x88>)
 80032ec:	60e3      	str	r3, [r4, #12]
 80032ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80032f2:	6665      	str	r5, [r4, #100]	; 0x64
 80032f4:	f000 f86c 	bl	80033d0 <__retarget_lock_init_recursive>
 80032f8:	f7ff ff96 	bl	8003228 <__sfp_lock_release>
 80032fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003300:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003304:	6025      	str	r5, [r4, #0]
 8003306:	61a5      	str	r5, [r4, #24]
 8003308:	2208      	movs	r2, #8
 800330a:	4629      	mov	r1, r5
 800330c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003310:	f7ff fc66 	bl	8002be0 <memset>
 8003314:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003318:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800331c:	4620      	mov	r0, r4
 800331e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003320:	3468      	adds	r4, #104	; 0x68
 8003322:	e7d9      	b.n	80032d8 <__sfp+0x1c>
 8003324:	2104      	movs	r1, #4
 8003326:	4638      	mov	r0, r7
 8003328:	f7ff ff62 	bl	80031f0 <__sfmoreglue>
 800332c:	4604      	mov	r4, r0
 800332e:	6030      	str	r0, [r6, #0]
 8003330:	2800      	cmp	r0, #0
 8003332:	d1d5      	bne.n	80032e0 <__sfp+0x24>
 8003334:	f7ff ff78 	bl	8003228 <__sfp_lock_release>
 8003338:	230c      	movs	r3, #12
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	e7ee      	b.n	800331c <__sfp+0x60>
 800333e:	bf00      	nop
 8003340:	08003ea0 	.word	0x08003ea0
 8003344:	ffff0001 	.word	0xffff0001

08003348 <fiprintf>:
 8003348:	b40e      	push	{r1, r2, r3}
 800334a:	b503      	push	{r0, r1, lr}
 800334c:	4601      	mov	r1, r0
 800334e:	ab03      	add	r3, sp, #12
 8003350:	4805      	ldr	r0, [pc, #20]	; (8003368 <fiprintf+0x20>)
 8003352:	f853 2b04 	ldr.w	r2, [r3], #4
 8003356:	6800      	ldr	r0, [r0, #0]
 8003358:	9301      	str	r3, [sp, #4]
 800335a:	f000 f8d5 	bl	8003508 <_vfiprintf_r>
 800335e:	b002      	add	sp, #8
 8003360:	f85d eb04 	ldr.w	lr, [sp], #4
 8003364:	b003      	add	sp, #12
 8003366:	4770      	bx	lr
 8003368:	20000004 	.word	0x20000004

0800336c <_fwalk_reent>:
 800336c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003370:	4606      	mov	r6, r0
 8003372:	4688      	mov	r8, r1
 8003374:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003378:	2700      	movs	r7, #0
 800337a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800337e:	f1b9 0901 	subs.w	r9, r9, #1
 8003382:	d505      	bpl.n	8003390 <_fwalk_reent+0x24>
 8003384:	6824      	ldr	r4, [r4, #0]
 8003386:	2c00      	cmp	r4, #0
 8003388:	d1f7      	bne.n	800337a <_fwalk_reent+0xe>
 800338a:	4638      	mov	r0, r7
 800338c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003390:	89ab      	ldrh	r3, [r5, #12]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d907      	bls.n	80033a6 <_fwalk_reent+0x3a>
 8003396:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800339a:	3301      	adds	r3, #1
 800339c:	d003      	beq.n	80033a6 <_fwalk_reent+0x3a>
 800339e:	4629      	mov	r1, r5
 80033a0:	4630      	mov	r0, r6
 80033a2:	47c0      	blx	r8
 80033a4:	4307      	orrs	r7, r0
 80033a6:	3568      	adds	r5, #104	; 0x68
 80033a8:	e7e9      	b.n	800337e <_fwalk_reent+0x12>
 80033aa:	0000      	movs	r0, r0

080033ac <_gettimeofday_r>:
 80033ac:	b538      	push	{r3, r4, r5, lr}
 80033ae:	4d07      	ldr	r5, [pc, #28]	; (80033cc <_gettimeofday_r+0x20>)
 80033b0:	2300      	movs	r3, #0
 80033b2:	4604      	mov	r4, r0
 80033b4:	4608      	mov	r0, r1
 80033b6:	4611      	mov	r1, r2
 80033b8:	602b      	str	r3, [r5, #0]
 80033ba:	f000 fc79 	bl	8003cb0 <_gettimeofday>
 80033be:	1c43      	adds	r3, r0, #1
 80033c0:	d102      	bne.n	80033c8 <_gettimeofday_r+0x1c>
 80033c2:	682b      	ldr	r3, [r5, #0]
 80033c4:	b103      	cbz	r3, 80033c8 <_gettimeofday_r+0x1c>
 80033c6:	6023      	str	r3, [r4, #0]
 80033c8:	bd38      	pop	{r3, r4, r5, pc}
 80033ca:	bf00      	nop
 80033cc:	20000308 	.word	0x20000308

080033d0 <__retarget_lock_init_recursive>:
 80033d0:	4770      	bx	lr

080033d2 <__retarget_lock_acquire_recursive>:
 80033d2:	4770      	bx	lr

080033d4 <__retarget_lock_release_recursive>:
 80033d4:	4770      	bx	lr

080033d6 <__swhatbuf_r>:
 80033d6:	b570      	push	{r4, r5, r6, lr}
 80033d8:	460e      	mov	r6, r1
 80033da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033de:	2900      	cmp	r1, #0
 80033e0:	b096      	sub	sp, #88	; 0x58
 80033e2:	4614      	mov	r4, r2
 80033e4:	461d      	mov	r5, r3
 80033e6:	da08      	bge.n	80033fa <__swhatbuf_r+0x24>
 80033e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	602a      	str	r2, [r5, #0]
 80033f0:	061a      	lsls	r2, r3, #24
 80033f2:	d410      	bmi.n	8003416 <__swhatbuf_r+0x40>
 80033f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033f8:	e00e      	b.n	8003418 <__swhatbuf_r+0x42>
 80033fa:	466a      	mov	r2, sp
 80033fc:	f000 fbb6 	bl	8003b6c <_fstat_r>
 8003400:	2800      	cmp	r0, #0
 8003402:	dbf1      	blt.n	80033e8 <__swhatbuf_r+0x12>
 8003404:	9a01      	ldr	r2, [sp, #4]
 8003406:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800340a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800340e:	425a      	negs	r2, r3
 8003410:	415a      	adcs	r2, r3
 8003412:	602a      	str	r2, [r5, #0]
 8003414:	e7ee      	b.n	80033f4 <__swhatbuf_r+0x1e>
 8003416:	2340      	movs	r3, #64	; 0x40
 8003418:	2000      	movs	r0, #0
 800341a:	6023      	str	r3, [r4, #0]
 800341c:	b016      	add	sp, #88	; 0x58
 800341e:	bd70      	pop	{r4, r5, r6, pc}

08003420 <__smakebuf_r>:
 8003420:	898b      	ldrh	r3, [r1, #12]
 8003422:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003424:	079d      	lsls	r5, r3, #30
 8003426:	4606      	mov	r6, r0
 8003428:	460c      	mov	r4, r1
 800342a:	d507      	bpl.n	800343c <__smakebuf_r+0x1c>
 800342c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003430:	6023      	str	r3, [r4, #0]
 8003432:	6123      	str	r3, [r4, #16]
 8003434:	2301      	movs	r3, #1
 8003436:	6163      	str	r3, [r4, #20]
 8003438:	b002      	add	sp, #8
 800343a:	bd70      	pop	{r4, r5, r6, pc}
 800343c:	ab01      	add	r3, sp, #4
 800343e:	466a      	mov	r2, sp
 8003440:	f7ff ffc9 	bl	80033d6 <__swhatbuf_r>
 8003444:	9900      	ldr	r1, [sp, #0]
 8003446:	4605      	mov	r5, r0
 8003448:	4630      	mov	r0, r6
 800344a:	f7ff fc1b 	bl	8002c84 <_malloc_r>
 800344e:	b948      	cbnz	r0, 8003464 <__smakebuf_r+0x44>
 8003450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003454:	059a      	lsls	r2, r3, #22
 8003456:	d4ef      	bmi.n	8003438 <__smakebuf_r+0x18>
 8003458:	f023 0303 	bic.w	r3, r3, #3
 800345c:	f043 0302 	orr.w	r3, r3, #2
 8003460:	81a3      	strh	r3, [r4, #12]
 8003462:	e7e3      	b.n	800342c <__smakebuf_r+0xc>
 8003464:	4b0d      	ldr	r3, [pc, #52]	; (800349c <__smakebuf_r+0x7c>)
 8003466:	62b3      	str	r3, [r6, #40]	; 0x28
 8003468:	89a3      	ldrh	r3, [r4, #12]
 800346a:	6020      	str	r0, [r4, #0]
 800346c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003470:	81a3      	strh	r3, [r4, #12]
 8003472:	9b00      	ldr	r3, [sp, #0]
 8003474:	6163      	str	r3, [r4, #20]
 8003476:	9b01      	ldr	r3, [sp, #4]
 8003478:	6120      	str	r0, [r4, #16]
 800347a:	b15b      	cbz	r3, 8003494 <__smakebuf_r+0x74>
 800347c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003480:	4630      	mov	r0, r6
 8003482:	f000 fb85 	bl	8003b90 <_isatty_r>
 8003486:	b128      	cbz	r0, 8003494 <__smakebuf_r+0x74>
 8003488:	89a3      	ldrh	r3, [r4, #12]
 800348a:	f023 0303 	bic.w	r3, r3, #3
 800348e:	f043 0301 	orr.w	r3, r3, #1
 8003492:	81a3      	strh	r3, [r4, #12]
 8003494:	89a0      	ldrh	r0, [r4, #12]
 8003496:	4305      	orrs	r5, r0
 8003498:	81a5      	strh	r5, [r4, #12]
 800349a:	e7cd      	b.n	8003438 <__smakebuf_r+0x18>
 800349c:	080031e5 	.word	0x080031e5

080034a0 <__malloc_lock>:
 80034a0:	4801      	ldr	r0, [pc, #4]	; (80034a8 <__malloc_lock+0x8>)
 80034a2:	f7ff bf96 	b.w	80033d2 <__retarget_lock_acquire_recursive>
 80034a6:	bf00      	nop
 80034a8:	20000304 	.word	0x20000304

080034ac <__malloc_unlock>:
 80034ac:	4801      	ldr	r0, [pc, #4]	; (80034b4 <__malloc_unlock+0x8>)
 80034ae:	f7ff bf91 	b.w	80033d4 <__retarget_lock_release_recursive>
 80034b2:	bf00      	nop
 80034b4:	20000304 	.word	0x20000304

080034b8 <__sfputc_r>:
 80034b8:	6893      	ldr	r3, [r2, #8]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	b410      	push	{r4}
 80034c0:	6093      	str	r3, [r2, #8]
 80034c2:	da07      	bge.n	80034d4 <__sfputc_r+0x1c>
 80034c4:	6994      	ldr	r4, [r2, #24]
 80034c6:	42a3      	cmp	r3, r4
 80034c8:	db01      	blt.n	80034ce <__sfputc_r+0x16>
 80034ca:	290a      	cmp	r1, #10
 80034cc:	d102      	bne.n	80034d4 <__sfputc_r+0x1c>
 80034ce:	bc10      	pop	{r4}
 80034d0:	f7ff bcc8 	b.w	8002e64 <__swbuf_r>
 80034d4:	6813      	ldr	r3, [r2, #0]
 80034d6:	1c58      	adds	r0, r3, #1
 80034d8:	6010      	str	r0, [r2, #0]
 80034da:	7019      	strb	r1, [r3, #0]
 80034dc:	4608      	mov	r0, r1
 80034de:	bc10      	pop	{r4}
 80034e0:	4770      	bx	lr

080034e2 <__sfputs_r>:
 80034e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e4:	4606      	mov	r6, r0
 80034e6:	460f      	mov	r7, r1
 80034e8:	4614      	mov	r4, r2
 80034ea:	18d5      	adds	r5, r2, r3
 80034ec:	42ac      	cmp	r4, r5
 80034ee:	d101      	bne.n	80034f4 <__sfputs_r+0x12>
 80034f0:	2000      	movs	r0, #0
 80034f2:	e007      	b.n	8003504 <__sfputs_r+0x22>
 80034f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034f8:	463a      	mov	r2, r7
 80034fa:	4630      	mov	r0, r6
 80034fc:	f7ff ffdc 	bl	80034b8 <__sfputc_r>
 8003500:	1c43      	adds	r3, r0, #1
 8003502:	d1f3      	bne.n	80034ec <__sfputs_r+0xa>
 8003504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003506:	0000      	movs	r0, r0

08003508 <_vfiprintf_r>:
 8003508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800350c:	460d      	mov	r5, r1
 800350e:	b09d      	sub	sp, #116	; 0x74
 8003510:	4614      	mov	r4, r2
 8003512:	4698      	mov	r8, r3
 8003514:	4606      	mov	r6, r0
 8003516:	b118      	cbz	r0, 8003520 <_vfiprintf_r+0x18>
 8003518:	6983      	ldr	r3, [r0, #24]
 800351a:	b90b      	cbnz	r3, 8003520 <_vfiprintf_r+0x18>
 800351c:	f7ff fe96 	bl	800324c <__sinit>
 8003520:	4b89      	ldr	r3, [pc, #548]	; (8003748 <_vfiprintf_r+0x240>)
 8003522:	429d      	cmp	r5, r3
 8003524:	d11b      	bne.n	800355e <_vfiprintf_r+0x56>
 8003526:	6875      	ldr	r5, [r6, #4]
 8003528:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800352a:	07d9      	lsls	r1, r3, #31
 800352c:	d405      	bmi.n	800353a <_vfiprintf_r+0x32>
 800352e:	89ab      	ldrh	r3, [r5, #12]
 8003530:	059a      	lsls	r2, r3, #22
 8003532:	d402      	bmi.n	800353a <_vfiprintf_r+0x32>
 8003534:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003536:	f7ff ff4c 	bl	80033d2 <__retarget_lock_acquire_recursive>
 800353a:	89ab      	ldrh	r3, [r5, #12]
 800353c:	071b      	lsls	r3, r3, #28
 800353e:	d501      	bpl.n	8003544 <_vfiprintf_r+0x3c>
 8003540:	692b      	ldr	r3, [r5, #16]
 8003542:	b9eb      	cbnz	r3, 8003580 <_vfiprintf_r+0x78>
 8003544:	4629      	mov	r1, r5
 8003546:	4630      	mov	r0, r6
 8003548:	f7ff fcde 	bl	8002f08 <__swsetup_r>
 800354c:	b1c0      	cbz	r0, 8003580 <_vfiprintf_r+0x78>
 800354e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003550:	07dc      	lsls	r4, r3, #31
 8003552:	d50e      	bpl.n	8003572 <_vfiprintf_r+0x6a>
 8003554:	f04f 30ff 	mov.w	r0, #4294967295
 8003558:	b01d      	add	sp, #116	; 0x74
 800355a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800355e:	4b7b      	ldr	r3, [pc, #492]	; (800374c <_vfiprintf_r+0x244>)
 8003560:	429d      	cmp	r5, r3
 8003562:	d101      	bne.n	8003568 <_vfiprintf_r+0x60>
 8003564:	68b5      	ldr	r5, [r6, #8]
 8003566:	e7df      	b.n	8003528 <_vfiprintf_r+0x20>
 8003568:	4b79      	ldr	r3, [pc, #484]	; (8003750 <_vfiprintf_r+0x248>)
 800356a:	429d      	cmp	r5, r3
 800356c:	bf08      	it	eq
 800356e:	68f5      	ldreq	r5, [r6, #12]
 8003570:	e7da      	b.n	8003528 <_vfiprintf_r+0x20>
 8003572:	89ab      	ldrh	r3, [r5, #12]
 8003574:	0598      	lsls	r0, r3, #22
 8003576:	d4ed      	bmi.n	8003554 <_vfiprintf_r+0x4c>
 8003578:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800357a:	f7ff ff2b 	bl	80033d4 <__retarget_lock_release_recursive>
 800357e:	e7e9      	b.n	8003554 <_vfiprintf_r+0x4c>
 8003580:	2300      	movs	r3, #0
 8003582:	9309      	str	r3, [sp, #36]	; 0x24
 8003584:	2320      	movs	r3, #32
 8003586:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800358a:	f8cd 800c 	str.w	r8, [sp, #12]
 800358e:	2330      	movs	r3, #48	; 0x30
 8003590:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003754 <_vfiprintf_r+0x24c>
 8003594:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003598:	f04f 0901 	mov.w	r9, #1
 800359c:	4623      	mov	r3, r4
 800359e:	469a      	mov	sl, r3
 80035a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035a4:	b10a      	cbz	r2, 80035aa <_vfiprintf_r+0xa2>
 80035a6:	2a25      	cmp	r2, #37	; 0x25
 80035a8:	d1f9      	bne.n	800359e <_vfiprintf_r+0x96>
 80035aa:	ebba 0b04 	subs.w	fp, sl, r4
 80035ae:	d00b      	beq.n	80035c8 <_vfiprintf_r+0xc0>
 80035b0:	465b      	mov	r3, fp
 80035b2:	4622      	mov	r2, r4
 80035b4:	4629      	mov	r1, r5
 80035b6:	4630      	mov	r0, r6
 80035b8:	f7ff ff93 	bl	80034e2 <__sfputs_r>
 80035bc:	3001      	adds	r0, #1
 80035be:	f000 80aa 	beq.w	8003716 <_vfiprintf_r+0x20e>
 80035c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035c4:	445a      	add	r2, fp
 80035c6:	9209      	str	r2, [sp, #36]	; 0x24
 80035c8:	f89a 3000 	ldrb.w	r3, [sl]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 80a2 	beq.w	8003716 <_vfiprintf_r+0x20e>
 80035d2:	2300      	movs	r3, #0
 80035d4:	f04f 32ff 	mov.w	r2, #4294967295
 80035d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035dc:	f10a 0a01 	add.w	sl, sl, #1
 80035e0:	9304      	str	r3, [sp, #16]
 80035e2:	9307      	str	r3, [sp, #28]
 80035e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035e8:	931a      	str	r3, [sp, #104]	; 0x68
 80035ea:	4654      	mov	r4, sl
 80035ec:	2205      	movs	r2, #5
 80035ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035f2:	4858      	ldr	r0, [pc, #352]	; (8003754 <_vfiprintf_r+0x24c>)
 80035f4:	f7fd fcf4 	bl	8000fe0 <memchr>
 80035f8:	9a04      	ldr	r2, [sp, #16]
 80035fa:	b9d8      	cbnz	r0, 8003634 <_vfiprintf_r+0x12c>
 80035fc:	06d1      	lsls	r1, r2, #27
 80035fe:	bf44      	itt	mi
 8003600:	2320      	movmi	r3, #32
 8003602:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003606:	0713      	lsls	r3, r2, #28
 8003608:	bf44      	itt	mi
 800360a:	232b      	movmi	r3, #43	; 0x2b
 800360c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003610:	f89a 3000 	ldrb.w	r3, [sl]
 8003614:	2b2a      	cmp	r3, #42	; 0x2a
 8003616:	d015      	beq.n	8003644 <_vfiprintf_r+0x13c>
 8003618:	9a07      	ldr	r2, [sp, #28]
 800361a:	4654      	mov	r4, sl
 800361c:	2000      	movs	r0, #0
 800361e:	f04f 0c0a 	mov.w	ip, #10
 8003622:	4621      	mov	r1, r4
 8003624:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003628:	3b30      	subs	r3, #48	; 0x30
 800362a:	2b09      	cmp	r3, #9
 800362c:	d94e      	bls.n	80036cc <_vfiprintf_r+0x1c4>
 800362e:	b1b0      	cbz	r0, 800365e <_vfiprintf_r+0x156>
 8003630:	9207      	str	r2, [sp, #28]
 8003632:	e014      	b.n	800365e <_vfiprintf_r+0x156>
 8003634:	eba0 0308 	sub.w	r3, r0, r8
 8003638:	fa09 f303 	lsl.w	r3, r9, r3
 800363c:	4313      	orrs	r3, r2
 800363e:	9304      	str	r3, [sp, #16]
 8003640:	46a2      	mov	sl, r4
 8003642:	e7d2      	b.n	80035ea <_vfiprintf_r+0xe2>
 8003644:	9b03      	ldr	r3, [sp, #12]
 8003646:	1d19      	adds	r1, r3, #4
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	9103      	str	r1, [sp, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	bfbb      	ittet	lt
 8003650:	425b      	neglt	r3, r3
 8003652:	f042 0202 	orrlt.w	r2, r2, #2
 8003656:	9307      	strge	r3, [sp, #28]
 8003658:	9307      	strlt	r3, [sp, #28]
 800365a:	bfb8      	it	lt
 800365c:	9204      	strlt	r2, [sp, #16]
 800365e:	7823      	ldrb	r3, [r4, #0]
 8003660:	2b2e      	cmp	r3, #46	; 0x2e
 8003662:	d10c      	bne.n	800367e <_vfiprintf_r+0x176>
 8003664:	7863      	ldrb	r3, [r4, #1]
 8003666:	2b2a      	cmp	r3, #42	; 0x2a
 8003668:	d135      	bne.n	80036d6 <_vfiprintf_r+0x1ce>
 800366a:	9b03      	ldr	r3, [sp, #12]
 800366c:	1d1a      	adds	r2, r3, #4
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	9203      	str	r2, [sp, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	bfb8      	it	lt
 8003676:	f04f 33ff 	movlt.w	r3, #4294967295
 800367a:	3402      	adds	r4, #2
 800367c:	9305      	str	r3, [sp, #20]
 800367e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003758 <_vfiprintf_r+0x250>
 8003682:	7821      	ldrb	r1, [r4, #0]
 8003684:	2203      	movs	r2, #3
 8003686:	4650      	mov	r0, sl
 8003688:	f7fd fcaa 	bl	8000fe0 <memchr>
 800368c:	b140      	cbz	r0, 80036a0 <_vfiprintf_r+0x198>
 800368e:	2340      	movs	r3, #64	; 0x40
 8003690:	eba0 000a 	sub.w	r0, r0, sl
 8003694:	fa03 f000 	lsl.w	r0, r3, r0
 8003698:	9b04      	ldr	r3, [sp, #16]
 800369a:	4303      	orrs	r3, r0
 800369c:	3401      	adds	r4, #1
 800369e:	9304      	str	r3, [sp, #16]
 80036a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036a4:	482d      	ldr	r0, [pc, #180]	; (800375c <_vfiprintf_r+0x254>)
 80036a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036aa:	2206      	movs	r2, #6
 80036ac:	f7fd fc98 	bl	8000fe0 <memchr>
 80036b0:	2800      	cmp	r0, #0
 80036b2:	d03f      	beq.n	8003734 <_vfiprintf_r+0x22c>
 80036b4:	4b2a      	ldr	r3, [pc, #168]	; (8003760 <_vfiprintf_r+0x258>)
 80036b6:	bb1b      	cbnz	r3, 8003700 <_vfiprintf_r+0x1f8>
 80036b8:	9b03      	ldr	r3, [sp, #12]
 80036ba:	3307      	adds	r3, #7
 80036bc:	f023 0307 	bic.w	r3, r3, #7
 80036c0:	3308      	adds	r3, #8
 80036c2:	9303      	str	r3, [sp, #12]
 80036c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036c6:	443b      	add	r3, r7
 80036c8:	9309      	str	r3, [sp, #36]	; 0x24
 80036ca:	e767      	b.n	800359c <_vfiprintf_r+0x94>
 80036cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80036d0:	460c      	mov	r4, r1
 80036d2:	2001      	movs	r0, #1
 80036d4:	e7a5      	b.n	8003622 <_vfiprintf_r+0x11a>
 80036d6:	2300      	movs	r3, #0
 80036d8:	3401      	adds	r4, #1
 80036da:	9305      	str	r3, [sp, #20]
 80036dc:	4619      	mov	r1, r3
 80036de:	f04f 0c0a 	mov.w	ip, #10
 80036e2:	4620      	mov	r0, r4
 80036e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036e8:	3a30      	subs	r2, #48	; 0x30
 80036ea:	2a09      	cmp	r2, #9
 80036ec:	d903      	bls.n	80036f6 <_vfiprintf_r+0x1ee>
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0c5      	beq.n	800367e <_vfiprintf_r+0x176>
 80036f2:	9105      	str	r1, [sp, #20]
 80036f4:	e7c3      	b.n	800367e <_vfiprintf_r+0x176>
 80036f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80036fa:	4604      	mov	r4, r0
 80036fc:	2301      	movs	r3, #1
 80036fe:	e7f0      	b.n	80036e2 <_vfiprintf_r+0x1da>
 8003700:	ab03      	add	r3, sp, #12
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	462a      	mov	r2, r5
 8003706:	4b17      	ldr	r3, [pc, #92]	; (8003764 <_vfiprintf_r+0x25c>)
 8003708:	a904      	add	r1, sp, #16
 800370a:	4630      	mov	r0, r6
 800370c:	f3af 8000 	nop.w
 8003710:	4607      	mov	r7, r0
 8003712:	1c78      	adds	r0, r7, #1
 8003714:	d1d6      	bne.n	80036c4 <_vfiprintf_r+0x1bc>
 8003716:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003718:	07d9      	lsls	r1, r3, #31
 800371a:	d405      	bmi.n	8003728 <_vfiprintf_r+0x220>
 800371c:	89ab      	ldrh	r3, [r5, #12]
 800371e:	059a      	lsls	r2, r3, #22
 8003720:	d402      	bmi.n	8003728 <_vfiprintf_r+0x220>
 8003722:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003724:	f7ff fe56 	bl	80033d4 <__retarget_lock_release_recursive>
 8003728:	89ab      	ldrh	r3, [r5, #12]
 800372a:	065b      	lsls	r3, r3, #25
 800372c:	f53f af12 	bmi.w	8003554 <_vfiprintf_r+0x4c>
 8003730:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003732:	e711      	b.n	8003558 <_vfiprintf_r+0x50>
 8003734:	ab03      	add	r3, sp, #12
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	462a      	mov	r2, r5
 800373a:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <_vfiprintf_r+0x25c>)
 800373c:	a904      	add	r1, sp, #16
 800373e:	4630      	mov	r0, r6
 8003740:	f000 f880 	bl	8003844 <_printf_i>
 8003744:	e7e4      	b.n	8003710 <_vfiprintf_r+0x208>
 8003746:	bf00      	nop
 8003748:	08003f94 	.word	0x08003f94
 800374c:	08003fb4 	.word	0x08003fb4
 8003750:	08003f74 	.word	0x08003f74
 8003754:	08003fd4 	.word	0x08003fd4
 8003758:	08003fda 	.word	0x08003fda
 800375c:	08003fde 	.word	0x08003fde
 8003760:	00000000 	.word	0x00000000
 8003764:	080034e3 	.word	0x080034e3

08003768 <_printf_common>:
 8003768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800376c:	4616      	mov	r6, r2
 800376e:	4699      	mov	r9, r3
 8003770:	688a      	ldr	r2, [r1, #8]
 8003772:	690b      	ldr	r3, [r1, #16]
 8003774:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003778:	4293      	cmp	r3, r2
 800377a:	bfb8      	it	lt
 800377c:	4613      	movlt	r3, r2
 800377e:	6033      	str	r3, [r6, #0]
 8003780:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003784:	4607      	mov	r7, r0
 8003786:	460c      	mov	r4, r1
 8003788:	b10a      	cbz	r2, 800378e <_printf_common+0x26>
 800378a:	3301      	adds	r3, #1
 800378c:	6033      	str	r3, [r6, #0]
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	0699      	lsls	r1, r3, #26
 8003792:	bf42      	ittt	mi
 8003794:	6833      	ldrmi	r3, [r6, #0]
 8003796:	3302      	addmi	r3, #2
 8003798:	6033      	strmi	r3, [r6, #0]
 800379a:	6825      	ldr	r5, [r4, #0]
 800379c:	f015 0506 	ands.w	r5, r5, #6
 80037a0:	d106      	bne.n	80037b0 <_printf_common+0x48>
 80037a2:	f104 0a19 	add.w	sl, r4, #25
 80037a6:	68e3      	ldr	r3, [r4, #12]
 80037a8:	6832      	ldr	r2, [r6, #0]
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	42ab      	cmp	r3, r5
 80037ae:	dc26      	bgt.n	80037fe <_printf_common+0x96>
 80037b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037b4:	1e13      	subs	r3, r2, #0
 80037b6:	6822      	ldr	r2, [r4, #0]
 80037b8:	bf18      	it	ne
 80037ba:	2301      	movne	r3, #1
 80037bc:	0692      	lsls	r2, r2, #26
 80037be:	d42b      	bmi.n	8003818 <_printf_common+0xb0>
 80037c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037c4:	4649      	mov	r1, r9
 80037c6:	4638      	mov	r0, r7
 80037c8:	47c0      	blx	r8
 80037ca:	3001      	adds	r0, #1
 80037cc:	d01e      	beq.n	800380c <_printf_common+0xa4>
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	68e5      	ldr	r5, [r4, #12]
 80037d2:	6832      	ldr	r2, [r6, #0]
 80037d4:	f003 0306 	and.w	r3, r3, #6
 80037d8:	2b04      	cmp	r3, #4
 80037da:	bf08      	it	eq
 80037dc:	1aad      	subeq	r5, r5, r2
 80037de:	68a3      	ldr	r3, [r4, #8]
 80037e0:	6922      	ldr	r2, [r4, #16]
 80037e2:	bf0c      	ite	eq
 80037e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037e8:	2500      	movne	r5, #0
 80037ea:	4293      	cmp	r3, r2
 80037ec:	bfc4      	itt	gt
 80037ee:	1a9b      	subgt	r3, r3, r2
 80037f0:	18ed      	addgt	r5, r5, r3
 80037f2:	2600      	movs	r6, #0
 80037f4:	341a      	adds	r4, #26
 80037f6:	42b5      	cmp	r5, r6
 80037f8:	d11a      	bne.n	8003830 <_printf_common+0xc8>
 80037fa:	2000      	movs	r0, #0
 80037fc:	e008      	b.n	8003810 <_printf_common+0xa8>
 80037fe:	2301      	movs	r3, #1
 8003800:	4652      	mov	r2, sl
 8003802:	4649      	mov	r1, r9
 8003804:	4638      	mov	r0, r7
 8003806:	47c0      	blx	r8
 8003808:	3001      	adds	r0, #1
 800380a:	d103      	bne.n	8003814 <_printf_common+0xac>
 800380c:	f04f 30ff 	mov.w	r0, #4294967295
 8003810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003814:	3501      	adds	r5, #1
 8003816:	e7c6      	b.n	80037a6 <_printf_common+0x3e>
 8003818:	18e1      	adds	r1, r4, r3
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	2030      	movs	r0, #48	; 0x30
 800381e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003822:	4422      	add	r2, r4
 8003824:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003828:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800382c:	3302      	adds	r3, #2
 800382e:	e7c7      	b.n	80037c0 <_printf_common+0x58>
 8003830:	2301      	movs	r3, #1
 8003832:	4622      	mov	r2, r4
 8003834:	4649      	mov	r1, r9
 8003836:	4638      	mov	r0, r7
 8003838:	47c0      	blx	r8
 800383a:	3001      	adds	r0, #1
 800383c:	d0e6      	beq.n	800380c <_printf_common+0xa4>
 800383e:	3601      	adds	r6, #1
 8003840:	e7d9      	b.n	80037f6 <_printf_common+0x8e>
 8003842:	0000      	movs	r0, r0

08003844 <_printf_i>:
 8003844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003848:	7e0f      	ldrb	r7, [r1, #24]
 800384a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800384c:	2f78      	cmp	r7, #120	; 0x78
 800384e:	4691      	mov	r9, r2
 8003850:	4680      	mov	r8, r0
 8003852:	460c      	mov	r4, r1
 8003854:	469a      	mov	sl, r3
 8003856:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800385a:	d807      	bhi.n	800386c <_printf_i+0x28>
 800385c:	2f62      	cmp	r7, #98	; 0x62
 800385e:	d80a      	bhi.n	8003876 <_printf_i+0x32>
 8003860:	2f00      	cmp	r7, #0
 8003862:	f000 80d8 	beq.w	8003a16 <_printf_i+0x1d2>
 8003866:	2f58      	cmp	r7, #88	; 0x58
 8003868:	f000 80a3 	beq.w	80039b2 <_printf_i+0x16e>
 800386c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003870:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003874:	e03a      	b.n	80038ec <_printf_i+0xa8>
 8003876:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800387a:	2b15      	cmp	r3, #21
 800387c:	d8f6      	bhi.n	800386c <_printf_i+0x28>
 800387e:	a101      	add	r1, pc, #4	; (adr r1, 8003884 <_printf_i+0x40>)
 8003880:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003884:	080038dd 	.word	0x080038dd
 8003888:	080038f1 	.word	0x080038f1
 800388c:	0800386d 	.word	0x0800386d
 8003890:	0800386d 	.word	0x0800386d
 8003894:	0800386d 	.word	0x0800386d
 8003898:	0800386d 	.word	0x0800386d
 800389c:	080038f1 	.word	0x080038f1
 80038a0:	0800386d 	.word	0x0800386d
 80038a4:	0800386d 	.word	0x0800386d
 80038a8:	0800386d 	.word	0x0800386d
 80038ac:	0800386d 	.word	0x0800386d
 80038b0:	080039fd 	.word	0x080039fd
 80038b4:	08003921 	.word	0x08003921
 80038b8:	080039df 	.word	0x080039df
 80038bc:	0800386d 	.word	0x0800386d
 80038c0:	0800386d 	.word	0x0800386d
 80038c4:	08003a1f 	.word	0x08003a1f
 80038c8:	0800386d 	.word	0x0800386d
 80038cc:	08003921 	.word	0x08003921
 80038d0:	0800386d 	.word	0x0800386d
 80038d4:	0800386d 	.word	0x0800386d
 80038d8:	080039e7 	.word	0x080039e7
 80038dc:	682b      	ldr	r3, [r5, #0]
 80038de:	1d1a      	adds	r2, r3, #4
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	602a      	str	r2, [r5, #0]
 80038e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0a3      	b.n	8003a38 <_printf_i+0x1f4>
 80038f0:	6820      	ldr	r0, [r4, #0]
 80038f2:	6829      	ldr	r1, [r5, #0]
 80038f4:	0606      	lsls	r6, r0, #24
 80038f6:	f101 0304 	add.w	r3, r1, #4
 80038fa:	d50a      	bpl.n	8003912 <_printf_i+0xce>
 80038fc:	680e      	ldr	r6, [r1, #0]
 80038fe:	602b      	str	r3, [r5, #0]
 8003900:	2e00      	cmp	r6, #0
 8003902:	da03      	bge.n	800390c <_printf_i+0xc8>
 8003904:	232d      	movs	r3, #45	; 0x2d
 8003906:	4276      	negs	r6, r6
 8003908:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800390c:	485e      	ldr	r0, [pc, #376]	; (8003a88 <_printf_i+0x244>)
 800390e:	230a      	movs	r3, #10
 8003910:	e019      	b.n	8003946 <_printf_i+0x102>
 8003912:	680e      	ldr	r6, [r1, #0]
 8003914:	602b      	str	r3, [r5, #0]
 8003916:	f010 0f40 	tst.w	r0, #64	; 0x40
 800391a:	bf18      	it	ne
 800391c:	b236      	sxthne	r6, r6
 800391e:	e7ef      	b.n	8003900 <_printf_i+0xbc>
 8003920:	682b      	ldr	r3, [r5, #0]
 8003922:	6820      	ldr	r0, [r4, #0]
 8003924:	1d19      	adds	r1, r3, #4
 8003926:	6029      	str	r1, [r5, #0]
 8003928:	0601      	lsls	r1, r0, #24
 800392a:	d501      	bpl.n	8003930 <_printf_i+0xec>
 800392c:	681e      	ldr	r6, [r3, #0]
 800392e:	e002      	b.n	8003936 <_printf_i+0xf2>
 8003930:	0646      	lsls	r6, r0, #25
 8003932:	d5fb      	bpl.n	800392c <_printf_i+0xe8>
 8003934:	881e      	ldrh	r6, [r3, #0]
 8003936:	4854      	ldr	r0, [pc, #336]	; (8003a88 <_printf_i+0x244>)
 8003938:	2f6f      	cmp	r7, #111	; 0x6f
 800393a:	bf0c      	ite	eq
 800393c:	2308      	moveq	r3, #8
 800393e:	230a      	movne	r3, #10
 8003940:	2100      	movs	r1, #0
 8003942:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003946:	6865      	ldr	r5, [r4, #4]
 8003948:	60a5      	str	r5, [r4, #8]
 800394a:	2d00      	cmp	r5, #0
 800394c:	bfa2      	ittt	ge
 800394e:	6821      	ldrge	r1, [r4, #0]
 8003950:	f021 0104 	bicge.w	r1, r1, #4
 8003954:	6021      	strge	r1, [r4, #0]
 8003956:	b90e      	cbnz	r6, 800395c <_printf_i+0x118>
 8003958:	2d00      	cmp	r5, #0
 800395a:	d04d      	beq.n	80039f8 <_printf_i+0x1b4>
 800395c:	4615      	mov	r5, r2
 800395e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003962:	fb03 6711 	mls	r7, r3, r1, r6
 8003966:	5dc7      	ldrb	r7, [r0, r7]
 8003968:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800396c:	4637      	mov	r7, r6
 800396e:	42bb      	cmp	r3, r7
 8003970:	460e      	mov	r6, r1
 8003972:	d9f4      	bls.n	800395e <_printf_i+0x11a>
 8003974:	2b08      	cmp	r3, #8
 8003976:	d10b      	bne.n	8003990 <_printf_i+0x14c>
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	07de      	lsls	r6, r3, #31
 800397c:	d508      	bpl.n	8003990 <_printf_i+0x14c>
 800397e:	6923      	ldr	r3, [r4, #16]
 8003980:	6861      	ldr	r1, [r4, #4]
 8003982:	4299      	cmp	r1, r3
 8003984:	bfde      	ittt	le
 8003986:	2330      	movle	r3, #48	; 0x30
 8003988:	f805 3c01 	strble.w	r3, [r5, #-1]
 800398c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003990:	1b52      	subs	r2, r2, r5
 8003992:	6122      	str	r2, [r4, #16]
 8003994:	f8cd a000 	str.w	sl, [sp]
 8003998:	464b      	mov	r3, r9
 800399a:	aa03      	add	r2, sp, #12
 800399c:	4621      	mov	r1, r4
 800399e:	4640      	mov	r0, r8
 80039a0:	f7ff fee2 	bl	8003768 <_printf_common>
 80039a4:	3001      	adds	r0, #1
 80039a6:	d14c      	bne.n	8003a42 <_printf_i+0x1fe>
 80039a8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ac:	b004      	add	sp, #16
 80039ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039b2:	4835      	ldr	r0, [pc, #212]	; (8003a88 <_printf_i+0x244>)
 80039b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80039b8:	6829      	ldr	r1, [r5, #0]
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80039c0:	6029      	str	r1, [r5, #0]
 80039c2:	061d      	lsls	r5, r3, #24
 80039c4:	d514      	bpl.n	80039f0 <_printf_i+0x1ac>
 80039c6:	07df      	lsls	r7, r3, #31
 80039c8:	bf44      	itt	mi
 80039ca:	f043 0320 	orrmi.w	r3, r3, #32
 80039ce:	6023      	strmi	r3, [r4, #0]
 80039d0:	b91e      	cbnz	r6, 80039da <_printf_i+0x196>
 80039d2:	6823      	ldr	r3, [r4, #0]
 80039d4:	f023 0320 	bic.w	r3, r3, #32
 80039d8:	6023      	str	r3, [r4, #0]
 80039da:	2310      	movs	r3, #16
 80039dc:	e7b0      	b.n	8003940 <_printf_i+0xfc>
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	f043 0320 	orr.w	r3, r3, #32
 80039e4:	6023      	str	r3, [r4, #0]
 80039e6:	2378      	movs	r3, #120	; 0x78
 80039e8:	4828      	ldr	r0, [pc, #160]	; (8003a8c <_printf_i+0x248>)
 80039ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039ee:	e7e3      	b.n	80039b8 <_printf_i+0x174>
 80039f0:	0659      	lsls	r1, r3, #25
 80039f2:	bf48      	it	mi
 80039f4:	b2b6      	uxthmi	r6, r6
 80039f6:	e7e6      	b.n	80039c6 <_printf_i+0x182>
 80039f8:	4615      	mov	r5, r2
 80039fa:	e7bb      	b.n	8003974 <_printf_i+0x130>
 80039fc:	682b      	ldr	r3, [r5, #0]
 80039fe:	6826      	ldr	r6, [r4, #0]
 8003a00:	6961      	ldr	r1, [r4, #20]
 8003a02:	1d18      	adds	r0, r3, #4
 8003a04:	6028      	str	r0, [r5, #0]
 8003a06:	0635      	lsls	r5, r6, #24
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	d501      	bpl.n	8003a10 <_printf_i+0x1cc>
 8003a0c:	6019      	str	r1, [r3, #0]
 8003a0e:	e002      	b.n	8003a16 <_printf_i+0x1d2>
 8003a10:	0670      	lsls	r0, r6, #25
 8003a12:	d5fb      	bpl.n	8003a0c <_printf_i+0x1c8>
 8003a14:	8019      	strh	r1, [r3, #0]
 8003a16:	2300      	movs	r3, #0
 8003a18:	6123      	str	r3, [r4, #16]
 8003a1a:	4615      	mov	r5, r2
 8003a1c:	e7ba      	b.n	8003994 <_printf_i+0x150>
 8003a1e:	682b      	ldr	r3, [r5, #0]
 8003a20:	1d1a      	adds	r2, r3, #4
 8003a22:	602a      	str	r2, [r5, #0]
 8003a24:	681d      	ldr	r5, [r3, #0]
 8003a26:	6862      	ldr	r2, [r4, #4]
 8003a28:	2100      	movs	r1, #0
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	f7fd fad8 	bl	8000fe0 <memchr>
 8003a30:	b108      	cbz	r0, 8003a36 <_printf_i+0x1f2>
 8003a32:	1b40      	subs	r0, r0, r5
 8003a34:	6060      	str	r0, [r4, #4]
 8003a36:	6863      	ldr	r3, [r4, #4]
 8003a38:	6123      	str	r3, [r4, #16]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a40:	e7a8      	b.n	8003994 <_printf_i+0x150>
 8003a42:	6923      	ldr	r3, [r4, #16]
 8003a44:	462a      	mov	r2, r5
 8003a46:	4649      	mov	r1, r9
 8003a48:	4640      	mov	r0, r8
 8003a4a:	47d0      	blx	sl
 8003a4c:	3001      	adds	r0, #1
 8003a4e:	d0ab      	beq.n	80039a8 <_printf_i+0x164>
 8003a50:	6823      	ldr	r3, [r4, #0]
 8003a52:	079b      	lsls	r3, r3, #30
 8003a54:	d413      	bmi.n	8003a7e <_printf_i+0x23a>
 8003a56:	68e0      	ldr	r0, [r4, #12]
 8003a58:	9b03      	ldr	r3, [sp, #12]
 8003a5a:	4298      	cmp	r0, r3
 8003a5c:	bfb8      	it	lt
 8003a5e:	4618      	movlt	r0, r3
 8003a60:	e7a4      	b.n	80039ac <_printf_i+0x168>
 8003a62:	2301      	movs	r3, #1
 8003a64:	4632      	mov	r2, r6
 8003a66:	4649      	mov	r1, r9
 8003a68:	4640      	mov	r0, r8
 8003a6a:	47d0      	blx	sl
 8003a6c:	3001      	adds	r0, #1
 8003a6e:	d09b      	beq.n	80039a8 <_printf_i+0x164>
 8003a70:	3501      	adds	r5, #1
 8003a72:	68e3      	ldr	r3, [r4, #12]
 8003a74:	9903      	ldr	r1, [sp, #12]
 8003a76:	1a5b      	subs	r3, r3, r1
 8003a78:	42ab      	cmp	r3, r5
 8003a7a:	dcf2      	bgt.n	8003a62 <_printf_i+0x21e>
 8003a7c:	e7eb      	b.n	8003a56 <_printf_i+0x212>
 8003a7e:	2500      	movs	r5, #0
 8003a80:	f104 0619 	add.w	r6, r4, #25
 8003a84:	e7f5      	b.n	8003a72 <_printf_i+0x22e>
 8003a86:	bf00      	nop
 8003a88:	08003fe5 	.word	0x08003fe5
 8003a8c:	08003ff6 	.word	0x08003ff6

08003a90 <__sread>:
 8003a90:	b510      	push	{r4, lr}
 8003a92:	460c      	mov	r4, r1
 8003a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a98:	f000 f89c 	bl	8003bd4 <_read_r>
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	bfab      	itete	ge
 8003aa0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003aa2:	89a3      	ldrhlt	r3, [r4, #12]
 8003aa4:	181b      	addge	r3, r3, r0
 8003aa6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003aaa:	bfac      	ite	ge
 8003aac:	6563      	strge	r3, [r4, #84]	; 0x54
 8003aae:	81a3      	strhlt	r3, [r4, #12]
 8003ab0:	bd10      	pop	{r4, pc}

08003ab2 <__swrite>:
 8003ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ab6:	461f      	mov	r7, r3
 8003ab8:	898b      	ldrh	r3, [r1, #12]
 8003aba:	05db      	lsls	r3, r3, #23
 8003abc:	4605      	mov	r5, r0
 8003abe:	460c      	mov	r4, r1
 8003ac0:	4616      	mov	r6, r2
 8003ac2:	d505      	bpl.n	8003ad0 <__swrite+0x1e>
 8003ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ac8:	2302      	movs	r3, #2
 8003aca:	2200      	movs	r2, #0
 8003acc:	f000 f870 	bl	8003bb0 <_lseek_r>
 8003ad0:	89a3      	ldrh	r3, [r4, #12]
 8003ad2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ad6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ada:	81a3      	strh	r3, [r4, #12]
 8003adc:	4632      	mov	r2, r6
 8003ade:	463b      	mov	r3, r7
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ae6:	f000 b817 	b.w	8003b18 <_write_r>

08003aea <__sseek>:
 8003aea:	b510      	push	{r4, lr}
 8003aec:	460c      	mov	r4, r1
 8003aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003af2:	f000 f85d 	bl	8003bb0 <_lseek_r>
 8003af6:	1c43      	adds	r3, r0, #1
 8003af8:	89a3      	ldrh	r3, [r4, #12]
 8003afa:	bf15      	itete	ne
 8003afc:	6560      	strne	r0, [r4, #84]	; 0x54
 8003afe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b06:	81a3      	strheq	r3, [r4, #12]
 8003b08:	bf18      	it	ne
 8003b0a:	81a3      	strhne	r3, [r4, #12]
 8003b0c:	bd10      	pop	{r4, pc}

08003b0e <__sclose>:
 8003b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b12:	f000 b81b 	b.w	8003b4c <_close_r>
 8003b16:	0000      	movs	r0, r0

08003b18 <_write_r>:
 8003b18:	b538      	push	{r3, r4, r5, lr}
 8003b1a:	4d07      	ldr	r5, [pc, #28]	; (8003b38 <_write_r+0x20>)
 8003b1c:	4604      	mov	r4, r0
 8003b1e:	4608      	mov	r0, r1
 8003b20:	4611      	mov	r1, r2
 8003b22:	2200      	movs	r2, #0
 8003b24:	602a      	str	r2, [r5, #0]
 8003b26:	461a      	mov	r2, r3
 8003b28:	f000 f8ea 	bl	8003d00 <_write>
 8003b2c:	1c43      	adds	r3, r0, #1
 8003b2e:	d102      	bne.n	8003b36 <_write_r+0x1e>
 8003b30:	682b      	ldr	r3, [r5, #0]
 8003b32:	b103      	cbz	r3, 8003b36 <_write_r+0x1e>
 8003b34:	6023      	str	r3, [r4, #0]
 8003b36:	bd38      	pop	{r3, r4, r5, pc}
 8003b38:	20000308 	.word	0x20000308

08003b3c <abort>:
 8003b3c:	b508      	push	{r3, lr}
 8003b3e:	2006      	movs	r0, #6
 8003b40:	f000 f882 	bl	8003c48 <raise>
 8003b44:	2001      	movs	r0, #1
 8003b46:	f000 f8e3 	bl	8003d10 <_exit>
 8003b4a:	0000      	movs	r0, r0

08003b4c <_close_r>:
 8003b4c:	b538      	push	{r3, r4, r5, lr}
 8003b4e:	4d06      	ldr	r5, [pc, #24]	; (8003b68 <_close_r+0x1c>)
 8003b50:	2300      	movs	r3, #0
 8003b52:	4604      	mov	r4, r0
 8003b54:	4608      	mov	r0, r1
 8003b56:	602b      	str	r3, [r5, #0]
 8003b58:	f000 f892 	bl	8003c80 <_close>
 8003b5c:	1c43      	adds	r3, r0, #1
 8003b5e:	d102      	bne.n	8003b66 <_close_r+0x1a>
 8003b60:	682b      	ldr	r3, [r5, #0]
 8003b62:	b103      	cbz	r3, 8003b66 <_close_r+0x1a>
 8003b64:	6023      	str	r3, [r4, #0]
 8003b66:	bd38      	pop	{r3, r4, r5, pc}
 8003b68:	20000308 	.word	0x20000308

08003b6c <_fstat_r>:
 8003b6c:	b538      	push	{r3, r4, r5, lr}
 8003b6e:	4d07      	ldr	r5, [pc, #28]	; (8003b8c <_fstat_r+0x20>)
 8003b70:	2300      	movs	r3, #0
 8003b72:	4604      	mov	r4, r0
 8003b74:	4608      	mov	r0, r1
 8003b76:	4611      	mov	r1, r2
 8003b78:	602b      	str	r3, [r5, #0]
 8003b7a:	f000 f889 	bl	8003c90 <_fstat>
 8003b7e:	1c43      	adds	r3, r0, #1
 8003b80:	d102      	bne.n	8003b88 <_fstat_r+0x1c>
 8003b82:	682b      	ldr	r3, [r5, #0]
 8003b84:	b103      	cbz	r3, 8003b88 <_fstat_r+0x1c>
 8003b86:	6023      	str	r3, [r4, #0]
 8003b88:	bd38      	pop	{r3, r4, r5, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000308 	.word	0x20000308

08003b90 <_isatty_r>:
 8003b90:	b538      	push	{r3, r4, r5, lr}
 8003b92:	4d06      	ldr	r5, [pc, #24]	; (8003bac <_isatty_r+0x1c>)
 8003b94:	2300      	movs	r3, #0
 8003b96:	4604      	mov	r4, r0
 8003b98:	4608      	mov	r0, r1
 8003b9a:	602b      	str	r3, [r5, #0]
 8003b9c:	f000 f890 	bl	8003cc0 <_isatty>
 8003ba0:	1c43      	adds	r3, r0, #1
 8003ba2:	d102      	bne.n	8003baa <_isatty_r+0x1a>
 8003ba4:	682b      	ldr	r3, [r5, #0]
 8003ba6:	b103      	cbz	r3, 8003baa <_isatty_r+0x1a>
 8003ba8:	6023      	str	r3, [r4, #0]
 8003baa:	bd38      	pop	{r3, r4, r5, pc}
 8003bac:	20000308 	.word	0x20000308

08003bb0 <_lseek_r>:
 8003bb0:	b538      	push	{r3, r4, r5, lr}
 8003bb2:	4d07      	ldr	r5, [pc, #28]	; (8003bd0 <_lseek_r+0x20>)
 8003bb4:	4604      	mov	r4, r0
 8003bb6:	4608      	mov	r0, r1
 8003bb8:	4611      	mov	r1, r2
 8003bba:	2200      	movs	r2, #0
 8003bbc:	602a      	str	r2, [r5, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	f000 f88e 	bl	8003ce0 <_lseek>
 8003bc4:	1c43      	adds	r3, r0, #1
 8003bc6:	d102      	bne.n	8003bce <_lseek_r+0x1e>
 8003bc8:	682b      	ldr	r3, [r5, #0]
 8003bca:	b103      	cbz	r3, 8003bce <_lseek_r+0x1e>
 8003bcc:	6023      	str	r3, [r4, #0]
 8003bce:	bd38      	pop	{r3, r4, r5, pc}
 8003bd0:	20000308 	.word	0x20000308

08003bd4 <_read_r>:
 8003bd4:	b538      	push	{r3, r4, r5, lr}
 8003bd6:	4d07      	ldr	r5, [pc, #28]	; (8003bf4 <_read_r+0x20>)
 8003bd8:	4604      	mov	r4, r0
 8003bda:	4608      	mov	r0, r1
 8003bdc:	4611      	mov	r1, r2
 8003bde:	2200      	movs	r2, #0
 8003be0:	602a      	str	r2, [r5, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	f000 f884 	bl	8003cf0 <_read>
 8003be8:	1c43      	adds	r3, r0, #1
 8003bea:	d102      	bne.n	8003bf2 <_read_r+0x1e>
 8003bec:	682b      	ldr	r3, [r5, #0]
 8003bee:	b103      	cbz	r3, 8003bf2 <_read_r+0x1e>
 8003bf0:	6023      	str	r3, [r4, #0]
 8003bf2:	bd38      	pop	{r3, r4, r5, pc}
 8003bf4:	20000308 	.word	0x20000308

08003bf8 <_raise_r>:
 8003bf8:	291f      	cmp	r1, #31
 8003bfa:	b538      	push	{r3, r4, r5, lr}
 8003bfc:	4604      	mov	r4, r0
 8003bfe:	460d      	mov	r5, r1
 8003c00:	d904      	bls.n	8003c0c <_raise_r+0x14>
 8003c02:	2316      	movs	r3, #22
 8003c04:	6003      	str	r3, [r0, #0]
 8003c06:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0a:	bd38      	pop	{r3, r4, r5, pc}
 8003c0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003c0e:	b112      	cbz	r2, 8003c16 <_raise_r+0x1e>
 8003c10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003c14:	b94b      	cbnz	r3, 8003c2a <_raise_r+0x32>
 8003c16:	4620      	mov	r0, r4
 8003c18:	f000 f830 	bl	8003c7c <_getpid_r>
 8003c1c:	462a      	mov	r2, r5
 8003c1e:	4601      	mov	r1, r0
 8003c20:	4620      	mov	r0, r4
 8003c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c26:	f000 b817 	b.w	8003c58 <_kill_r>
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d00a      	beq.n	8003c44 <_raise_r+0x4c>
 8003c2e:	1c59      	adds	r1, r3, #1
 8003c30:	d103      	bne.n	8003c3a <_raise_r+0x42>
 8003c32:	2316      	movs	r3, #22
 8003c34:	6003      	str	r3, [r0, #0]
 8003c36:	2001      	movs	r0, #1
 8003c38:	e7e7      	b.n	8003c0a <_raise_r+0x12>
 8003c3a:	2400      	movs	r4, #0
 8003c3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003c40:	4628      	mov	r0, r5
 8003c42:	4798      	blx	r3
 8003c44:	2000      	movs	r0, #0
 8003c46:	e7e0      	b.n	8003c0a <_raise_r+0x12>

08003c48 <raise>:
 8003c48:	4b02      	ldr	r3, [pc, #8]	; (8003c54 <raise+0xc>)
 8003c4a:	4601      	mov	r1, r0
 8003c4c:	6818      	ldr	r0, [r3, #0]
 8003c4e:	f7ff bfd3 	b.w	8003bf8 <_raise_r>
 8003c52:	bf00      	nop
 8003c54:	20000004 	.word	0x20000004

08003c58 <_kill_r>:
 8003c58:	b538      	push	{r3, r4, r5, lr}
 8003c5a:	4d07      	ldr	r5, [pc, #28]	; (8003c78 <_kill_r+0x20>)
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	4604      	mov	r4, r0
 8003c60:	4608      	mov	r0, r1
 8003c62:	4611      	mov	r1, r2
 8003c64:	602b      	str	r3, [r5, #0]
 8003c66:	f000 f833 	bl	8003cd0 <_kill>
 8003c6a:	1c43      	adds	r3, r0, #1
 8003c6c:	d102      	bne.n	8003c74 <_kill_r+0x1c>
 8003c6e:	682b      	ldr	r3, [r5, #0]
 8003c70:	b103      	cbz	r3, 8003c74 <_kill_r+0x1c>
 8003c72:	6023      	str	r3, [r4, #0]
 8003c74:	bd38      	pop	{r3, r4, r5, pc}
 8003c76:	bf00      	nop
 8003c78:	20000308 	.word	0x20000308

08003c7c <_getpid_r>:
 8003c7c:	f000 b810 	b.w	8003ca0 <_getpid>

08003c80 <_close>:
 8003c80:	4b02      	ldr	r3, [pc, #8]	; (8003c8c <_close+0xc>)
 8003c82:	2258      	movs	r2, #88	; 0x58
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8a:	4770      	bx	lr
 8003c8c:	20000308 	.word	0x20000308

08003c90 <_fstat>:
 8003c90:	4b02      	ldr	r3, [pc, #8]	; (8003c9c <_fstat+0xc>)
 8003c92:	2258      	movs	r2, #88	; 0x58
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	f04f 30ff 	mov.w	r0, #4294967295
 8003c9a:	4770      	bx	lr
 8003c9c:	20000308 	.word	0x20000308

08003ca0 <_getpid>:
 8003ca0:	4b02      	ldr	r3, [pc, #8]	; (8003cac <_getpid+0xc>)
 8003ca2:	2258      	movs	r2, #88	; 0x58
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8003caa:	4770      	bx	lr
 8003cac:	20000308 	.word	0x20000308

08003cb0 <_gettimeofday>:
 8003cb0:	4b02      	ldr	r3, [pc, #8]	; (8003cbc <_gettimeofday+0xc>)
 8003cb2:	2258      	movs	r2, #88	; 0x58
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cba:	4770      	bx	lr
 8003cbc:	20000308 	.word	0x20000308

08003cc0 <_isatty>:
 8003cc0:	4b02      	ldr	r3, [pc, #8]	; (8003ccc <_isatty+0xc>)
 8003cc2:	2258      	movs	r2, #88	; 0x58
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	20000308 	.word	0x20000308

08003cd0 <_kill>:
 8003cd0:	4b02      	ldr	r3, [pc, #8]	; (8003cdc <_kill+0xc>)
 8003cd2:	2258      	movs	r2, #88	; 0x58
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cda:	4770      	bx	lr
 8003cdc:	20000308 	.word	0x20000308

08003ce0 <_lseek>:
 8003ce0:	4b02      	ldr	r3, [pc, #8]	; (8003cec <_lseek+0xc>)
 8003ce2:	2258      	movs	r2, #88	; 0x58
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cea:	4770      	bx	lr
 8003cec:	20000308 	.word	0x20000308

08003cf0 <_read>:
 8003cf0:	4b02      	ldr	r3, [pc, #8]	; (8003cfc <_read+0xc>)
 8003cf2:	2258      	movs	r2, #88	; 0x58
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cfa:	4770      	bx	lr
 8003cfc:	20000308 	.word	0x20000308

08003d00 <_write>:
 8003d00:	4b02      	ldr	r3, [pc, #8]	; (8003d0c <_write+0xc>)
 8003d02:	2258      	movs	r2, #88	; 0x58
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	f04f 30ff 	mov.w	r0, #4294967295
 8003d0a:	4770      	bx	lr
 8003d0c:	20000308 	.word	0x20000308

08003d10 <_exit>:
 8003d10:	e7fe      	b.n	8003d10 <_exit>
 8003d12:	bf00      	nop

08003d14 <_init>:
 8003d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d16:	bf00      	nop
 8003d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1a:	bc08      	pop	{r3}
 8003d1c:	469e      	mov	lr, r3
 8003d1e:	4770      	bx	lr

08003d20 <_fini>:
 8003d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d22:	bf00      	nop
 8003d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d26:	bc08      	pop	{r3}
 8003d28:	469e      	mov	lr, r3
 8003d2a:	4770      	bx	lr
