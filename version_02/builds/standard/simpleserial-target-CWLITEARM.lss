
simpleserial-target-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bcc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08003d60  08003d60  00013d60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004050  08004050  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004050  08004050  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004050  08004050  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004050  08004050  00014050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004054  08004054  00014054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004058  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000068  080040c0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  2000030c  080040c0  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000535c  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ef7  00000000  00000000  000253ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000033ba  00000000  00000000  000262e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000248  00000000  00000000  0002969f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000608  00000000  00000000  000298e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000337f  00000000  00000000  00029eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000166c  00000000  00000000  0002d26e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004d  00000000  00000000  0002e8da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000169c  00000000  00000000  0002e928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000021c  00000000  00000000  0002ffc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000244  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003d44 	.word	0x08003d44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003d44 	.word	0x08003d44

080001d0 <__aeabi_fmul>:
 80001d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80001d8:	bf1e      	ittt	ne
 80001da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80001de:	ea92 0f0c 	teqne	r2, ip
 80001e2:	ea93 0f0c 	teqne	r3, ip
 80001e6:	d06f      	beq.n	80002c8 <__aeabi_fmul+0xf8>
 80001e8:	441a      	add	r2, r3
 80001ea:	ea80 0c01 	eor.w	ip, r0, r1
 80001ee:	0240      	lsls	r0, r0, #9
 80001f0:	bf18      	it	ne
 80001f2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001f6:	d01e      	beq.n	8000236 <__aeabi_fmul+0x66>
 80001f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80001fc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000200:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000204:	fba0 3101 	umull	r3, r1, r0, r1
 8000208:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800020c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000210:	bf3e      	ittt	cc
 8000212:	0049      	lslcc	r1, r1, #1
 8000214:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000218:	005b      	lslcc	r3, r3, #1
 800021a:	ea40 0001 	orr.w	r0, r0, r1
 800021e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000222:	2afd      	cmp	r2, #253	; 0xfd
 8000224:	d81d      	bhi.n	8000262 <__aeabi_fmul+0x92>
 8000226:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800022a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800022e:	bf08      	it	eq
 8000230:	f020 0001 	biceq.w	r0, r0, #1
 8000234:	4770      	bx	lr
 8000236:	f090 0f00 	teq	r0, #0
 800023a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800023e:	bf08      	it	eq
 8000240:	0249      	lsleq	r1, r1, #9
 8000242:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000246:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800024a:	3a7f      	subs	r2, #127	; 0x7f
 800024c:	bfc2      	ittt	gt
 800024e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000252:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000256:	4770      	bxgt	lr
 8000258:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800025c:	f04f 0300 	mov.w	r3, #0
 8000260:	3a01      	subs	r2, #1
 8000262:	dc5d      	bgt.n	8000320 <__aeabi_fmul+0x150>
 8000264:	f112 0f19 	cmn.w	r2, #25
 8000268:	bfdc      	itt	le
 800026a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800026e:	4770      	bxle	lr
 8000270:	f1c2 0200 	rsb	r2, r2, #0
 8000274:	0041      	lsls	r1, r0, #1
 8000276:	fa21 f102 	lsr.w	r1, r1, r2
 800027a:	f1c2 0220 	rsb	r2, r2, #32
 800027e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000282:	ea5f 0031 	movs.w	r0, r1, rrx
 8000286:	f140 0000 	adc.w	r0, r0, #0
 800028a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800028e:	bf08      	it	eq
 8000290:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000294:	4770      	bx	lr
 8000296:	f092 0f00 	teq	r2, #0
 800029a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800029e:	bf02      	ittt	eq
 80002a0:	0040      	lsleq	r0, r0, #1
 80002a2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80002a6:	3a01      	subeq	r2, #1
 80002a8:	d0f9      	beq.n	800029e <__aeabi_fmul+0xce>
 80002aa:	ea40 000c 	orr.w	r0, r0, ip
 80002ae:	f093 0f00 	teq	r3, #0
 80002b2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80002b6:	bf02      	ittt	eq
 80002b8:	0049      	lsleq	r1, r1, #1
 80002ba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80002be:	3b01      	subeq	r3, #1
 80002c0:	d0f9      	beq.n	80002b6 <__aeabi_fmul+0xe6>
 80002c2:	ea41 010c 	orr.w	r1, r1, ip
 80002c6:	e78f      	b.n	80001e8 <__aeabi_fmul+0x18>
 80002c8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80002cc:	ea92 0f0c 	teq	r2, ip
 80002d0:	bf18      	it	ne
 80002d2:	ea93 0f0c 	teqne	r3, ip
 80002d6:	d00a      	beq.n	80002ee <__aeabi_fmul+0x11e>
 80002d8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80002dc:	bf18      	it	ne
 80002de:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80002e2:	d1d8      	bne.n	8000296 <__aeabi_fmul+0xc6>
 80002e4:	ea80 0001 	eor.w	r0, r0, r1
 80002e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002ec:	4770      	bx	lr
 80002ee:	f090 0f00 	teq	r0, #0
 80002f2:	bf17      	itett	ne
 80002f4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80002f8:	4608      	moveq	r0, r1
 80002fa:	f091 0f00 	teqne	r1, #0
 80002fe:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000302:	d014      	beq.n	800032e <__aeabi_fmul+0x15e>
 8000304:	ea92 0f0c 	teq	r2, ip
 8000308:	d101      	bne.n	800030e <__aeabi_fmul+0x13e>
 800030a:	0242      	lsls	r2, r0, #9
 800030c:	d10f      	bne.n	800032e <__aeabi_fmul+0x15e>
 800030e:	ea93 0f0c 	teq	r3, ip
 8000312:	d103      	bne.n	800031c <__aeabi_fmul+0x14c>
 8000314:	024b      	lsls	r3, r1, #9
 8000316:	bf18      	it	ne
 8000318:	4608      	movne	r0, r1
 800031a:	d108      	bne.n	800032e <__aeabi_fmul+0x15e>
 800031c:	ea80 0001 	eor.w	r0, r0, r1
 8000320:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000324:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000328:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800032c:	4770      	bx	lr
 800032e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000332:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000336:	4770      	bx	lr

08000338 <__aeabi_drsub>:
 8000338:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800033c:	e002      	b.n	8000344 <__adddf3>
 800033e:	bf00      	nop

08000340 <__aeabi_dsub>:
 8000340:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000344 <__adddf3>:
 8000344:	b530      	push	{r4, r5, lr}
 8000346:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800034a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800034e:	ea94 0f05 	teq	r4, r5
 8000352:	bf08      	it	eq
 8000354:	ea90 0f02 	teqeq	r0, r2
 8000358:	bf1f      	itttt	ne
 800035a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800035e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000362:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000366:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800036a:	f000 80e2 	beq.w	8000532 <__adddf3+0x1ee>
 800036e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000372:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000376:	bfb8      	it	lt
 8000378:	426d      	neglt	r5, r5
 800037a:	dd0c      	ble.n	8000396 <__adddf3+0x52>
 800037c:	442c      	add	r4, r5
 800037e:	ea80 0202 	eor.w	r2, r0, r2
 8000382:	ea81 0303 	eor.w	r3, r1, r3
 8000386:	ea82 0000 	eor.w	r0, r2, r0
 800038a:	ea83 0101 	eor.w	r1, r3, r1
 800038e:	ea80 0202 	eor.w	r2, r0, r2
 8000392:	ea81 0303 	eor.w	r3, r1, r3
 8000396:	2d36      	cmp	r5, #54	; 0x36
 8000398:	bf88      	it	hi
 800039a:	bd30      	pophi	{r4, r5, pc}
 800039c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003ac:	d002      	beq.n	80003b4 <__adddf3+0x70>
 80003ae:	4240      	negs	r0, r0
 80003b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c0:	d002      	beq.n	80003c8 <__adddf3+0x84>
 80003c2:	4252      	negs	r2, r2
 80003c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c8:	ea94 0f05 	teq	r4, r5
 80003cc:	f000 80a7 	beq.w	800051e <__adddf3+0x1da>
 80003d0:	f1a4 0401 	sub.w	r4, r4, #1
 80003d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d8:	db0d      	blt.n	80003f6 <__adddf3+0xb2>
 80003da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003de:	fa22 f205 	lsr.w	r2, r2, r5
 80003e2:	1880      	adds	r0, r0, r2
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80003ec:	1880      	adds	r0, r0, r2
 80003ee:	fa43 f305 	asr.w	r3, r3, r5
 80003f2:	4159      	adcs	r1, r3
 80003f4:	e00e      	b.n	8000414 <__adddf3+0xd0>
 80003f6:	f1a5 0520 	sub.w	r5, r5, #32
 80003fa:	f10e 0e20 	add.w	lr, lr, #32
 80003fe:	2a01      	cmp	r2, #1
 8000400:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000404:	bf28      	it	cs
 8000406:	f04c 0c02 	orrcs.w	ip, ip, #2
 800040a:	fa43 f305 	asr.w	r3, r3, r5
 800040e:	18c0      	adds	r0, r0, r3
 8000410:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000414:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000418:	d507      	bpl.n	800042a <__adddf3+0xe6>
 800041a:	f04f 0e00 	mov.w	lr, #0
 800041e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000422:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000426:	eb6e 0101 	sbc.w	r1, lr, r1
 800042a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800042e:	d31b      	bcc.n	8000468 <__adddf3+0x124>
 8000430:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000434:	d30c      	bcc.n	8000450 <__adddf3+0x10c>
 8000436:	0849      	lsrs	r1, r1, #1
 8000438:	ea5f 0030 	movs.w	r0, r0, rrx
 800043c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000440:	f104 0401 	add.w	r4, r4, #1
 8000444:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000448:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800044c:	f080 809a 	bcs.w	8000584 <__adddf3+0x240>
 8000450:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000454:	bf08      	it	eq
 8000456:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800045a:	f150 0000 	adcs.w	r0, r0, #0
 800045e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000462:	ea41 0105 	orr.w	r1, r1, r5
 8000466:	bd30      	pop	{r4, r5, pc}
 8000468:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800046c:	4140      	adcs	r0, r0
 800046e:	eb41 0101 	adc.w	r1, r1, r1
 8000472:	3c01      	subs	r4, #1
 8000474:	bf28      	it	cs
 8000476:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800047a:	d2e9      	bcs.n	8000450 <__adddf3+0x10c>
 800047c:	f091 0f00 	teq	r1, #0
 8000480:	bf04      	itt	eq
 8000482:	4601      	moveq	r1, r0
 8000484:	2000      	moveq	r0, #0
 8000486:	fab1 f381 	clz	r3, r1
 800048a:	bf08      	it	eq
 800048c:	3320      	addeq	r3, #32
 800048e:	f1a3 030b 	sub.w	r3, r3, #11
 8000492:	f1b3 0220 	subs.w	r2, r3, #32
 8000496:	da0c      	bge.n	80004b2 <__adddf3+0x16e>
 8000498:	320c      	adds	r2, #12
 800049a:	dd08      	ble.n	80004ae <__adddf3+0x16a>
 800049c:	f102 0c14 	add.w	ip, r2, #20
 80004a0:	f1c2 020c 	rsb	r2, r2, #12
 80004a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a8:	fa21 f102 	lsr.w	r1, r1, r2
 80004ac:	e00c      	b.n	80004c8 <__adddf3+0x184>
 80004ae:	f102 0214 	add.w	r2, r2, #20
 80004b2:	bfd8      	it	le
 80004b4:	f1c2 0c20 	rsble	ip, r2, #32
 80004b8:	fa01 f102 	lsl.w	r1, r1, r2
 80004bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c0:	bfdc      	itt	le
 80004c2:	ea41 010c 	orrle.w	r1, r1, ip
 80004c6:	4090      	lslle	r0, r2
 80004c8:	1ae4      	subs	r4, r4, r3
 80004ca:	bfa2      	ittt	ge
 80004cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d0:	4329      	orrge	r1, r5
 80004d2:	bd30      	popge	{r4, r5, pc}
 80004d4:	ea6f 0404 	mvn.w	r4, r4
 80004d8:	3c1f      	subs	r4, #31
 80004da:	da1c      	bge.n	8000516 <__adddf3+0x1d2>
 80004dc:	340c      	adds	r4, #12
 80004de:	dc0e      	bgt.n	80004fe <__adddf3+0x1ba>
 80004e0:	f104 0414 	add.w	r4, r4, #20
 80004e4:	f1c4 0220 	rsb	r2, r4, #32
 80004e8:	fa20 f004 	lsr.w	r0, r0, r4
 80004ec:	fa01 f302 	lsl.w	r3, r1, r2
 80004f0:	ea40 0003 	orr.w	r0, r0, r3
 80004f4:	fa21 f304 	lsr.w	r3, r1, r4
 80004f8:	ea45 0103 	orr.w	r1, r5, r3
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	f1c4 040c 	rsb	r4, r4, #12
 8000502:	f1c4 0220 	rsb	r2, r4, #32
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 f304 	lsl.w	r3, r1, r4
 800050e:	ea40 0003 	orr.w	r0, r0, r3
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	fa21 f004 	lsr.w	r0, r1, r4
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	f094 0f00 	teq	r4, #0
 8000522:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000526:	bf06      	itte	eq
 8000528:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800052c:	3401      	addeq	r4, #1
 800052e:	3d01      	subne	r5, #1
 8000530:	e74e      	b.n	80003d0 <__adddf3+0x8c>
 8000532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000536:	bf18      	it	ne
 8000538:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800053c:	d029      	beq.n	8000592 <__adddf3+0x24e>
 800053e:	ea94 0f05 	teq	r4, r5
 8000542:	bf08      	it	eq
 8000544:	ea90 0f02 	teqeq	r0, r2
 8000548:	d005      	beq.n	8000556 <__adddf3+0x212>
 800054a:	ea54 0c00 	orrs.w	ip, r4, r0
 800054e:	bf04      	itt	eq
 8000550:	4619      	moveq	r1, r3
 8000552:	4610      	moveq	r0, r2
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	ea91 0f03 	teq	r1, r3
 800055a:	bf1e      	ittt	ne
 800055c:	2100      	movne	r1, #0
 800055e:	2000      	movne	r0, #0
 8000560:	bd30      	popne	{r4, r5, pc}
 8000562:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000566:	d105      	bne.n	8000574 <__adddf3+0x230>
 8000568:	0040      	lsls	r0, r0, #1
 800056a:	4149      	adcs	r1, r1
 800056c:	bf28      	it	cs
 800056e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000572:	bd30      	pop	{r4, r5, pc}
 8000574:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000578:	bf3c      	itt	cc
 800057a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800057e:	bd30      	popcc	{r4, r5, pc}
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000588:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800058c:	f04f 0000 	mov.w	r0, #0
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000596:	bf1a      	itte	ne
 8000598:	4619      	movne	r1, r3
 800059a:	4610      	movne	r0, r2
 800059c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a0:	bf1c      	itt	ne
 80005a2:	460b      	movne	r3, r1
 80005a4:	4602      	movne	r2, r0
 80005a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005aa:	bf06      	itte	eq
 80005ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b0:	ea91 0f03 	teqeq	r1, r3
 80005b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	bf00      	nop

080005bc <__aeabi_ui2d>:
 80005bc:	f090 0f00 	teq	r0, #0
 80005c0:	bf04      	itt	eq
 80005c2:	2100      	moveq	r1, #0
 80005c4:	4770      	bxeq	lr
 80005c6:	b530      	push	{r4, r5, lr}
 80005c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d0:	f04f 0500 	mov.w	r5, #0
 80005d4:	f04f 0100 	mov.w	r1, #0
 80005d8:	e750      	b.n	800047c <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_i2d>:
 80005dc:	f090 0f00 	teq	r0, #0
 80005e0:	bf04      	itt	eq
 80005e2:	2100      	moveq	r1, #0
 80005e4:	4770      	bxeq	lr
 80005e6:	b530      	push	{r4, r5, lr}
 80005e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005f4:	bf48      	it	mi
 80005f6:	4240      	negmi	r0, r0
 80005f8:	f04f 0100 	mov.w	r1, #0
 80005fc:	e73e      	b.n	800047c <__adddf3+0x138>
 80005fe:	bf00      	nop

08000600 <__aeabi_f2d>:
 8000600:	0042      	lsls	r2, r0, #1
 8000602:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000606:	ea4f 0131 	mov.w	r1, r1, rrx
 800060a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800060e:	bf1f      	itttt	ne
 8000610:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000614:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000618:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800061c:	4770      	bxne	lr
 800061e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000622:	bf08      	it	eq
 8000624:	4770      	bxeq	lr
 8000626:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800062a:	bf04      	itt	eq
 800062c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000638:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800063c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000640:	e71c      	b.n	800047c <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_ul2d>:
 8000644:	ea50 0201 	orrs.w	r2, r0, r1
 8000648:	bf08      	it	eq
 800064a:	4770      	bxeq	lr
 800064c:	b530      	push	{r4, r5, lr}
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	e00a      	b.n	800066a <__aeabi_l2d+0x16>

08000654 <__aeabi_l2d>:
 8000654:	ea50 0201 	orrs.w	r2, r0, r1
 8000658:	bf08      	it	eq
 800065a:	4770      	bxeq	lr
 800065c:	b530      	push	{r4, r5, lr}
 800065e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000662:	d502      	bpl.n	800066a <__aeabi_l2d+0x16>
 8000664:	4240      	negs	r0, r0
 8000666:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800066a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800066e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000672:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000676:	f43f aed8 	beq.w	800042a <__adddf3+0xe6>
 800067a:	f04f 0203 	mov.w	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000692:	f1c2 0320 	rsb	r3, r2, #32
 8000696:	fa00 fc03 	lsl.w	ip, r0, r3
 800069a:	fa20 f002 	lsr.w	r0, r0, r2
 800069e:	fa01 fe03 	lsl.w	lr, r1, r3
 80006a2:	ea40 000e 	orr.w	r0, r0, lr
 80006a6:	fa21 f102 	lsr.w	r1, r1, r2
 80006aa:	4414      	add	r4, r2
 80006ac:	e6bd      	b.n	800042a <__adddf3+0xe6>
 80006ae:	bf00      	nop

080006b0 <__aeabi_dmul>:
 80006b0:	b570      	push	{r4, r5, r6, lr}
 80006b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006be:	bf1d      	ittte	ne
 80006c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006c4:	ea94 0f0c 	teqne	r4, ip
 80006c8:	ea95 0f0c 	teqne	r5, ip
 80006cc:	f000 f8de 	bleq	800088c <__aeabi_dmul+0x1dc>
 80006d0:	442c      	add	r4, r5
 80006d2:	ea81 0603 	eor.w	r6, r1, r3
 80006d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006e2:	bf18      	it	ne
 80006e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f0:	d038      	beq.n	8000764 <__aeabi_dmul+0xb4>
 80006f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000702:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000706:	f04f 0600 	mov.w	r6, #0
 800070a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800070e:	f09c 0f00 	teq	ip, #0
 8000712:	bf18      	it	ne
 8000714:	f04e 0e01 	orrne.w	lr, lr, #1
 8000718:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800071c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000720:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000724:	d204      	bcs.n	8000730 <__aeabi_dmul+0x80>
 8000726:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800072a:	416d      	adcs	r5, r5
 800072c:	eb46 0606 	adc.w	r6, r6, r6
 8000730:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000734:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000738:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800073c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000740:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000744:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000748:	bf88      	it	hi
 800074a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800074e:	d81e      	bhi.n	800078e <__aeabi_dmul+0xde>
 8000750:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000754:	bf08      	it	eq
 8000756:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800075a:	f150 0000 	adcs.w	r0, r0, #0
 800075e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000768:	ea46 0101 	orr.w	r1, r6, r1
 800076c:	ea40 0002 	orr.w	r0, r0, r2
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000778:	bfc2      	ittt	gt
 800077a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800077e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000782:	bd70      	popgt	{r4, r5, r6, pc}
 8000784:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000788:	f04f 0e00 	mov.w	lr, #0
 800078c:	3c01      	subs	r4, #1
 800078e:	f300 80ab 	bgt.w	80008e8 <__aeabi_dmul+0x238>
 8000792:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000796:	bfde      	ittt	le
 8000798:	2000      	movle	r0, #0
 800079a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800079e:	bd70      	pople	{r4, r5, r6, pc}
 80007a0:	f1c4 0400 	rsb	r4, r4, #0
 80007a4:	3c20      	subs	r4, #32
 80007a6:	da35      	bge.n	8000814 <__aeabi_dmul+0x164>
 80007a8:	340c      	adds	r4, #12
 80007aa:	dc1b      	bgt.n	80007e4 <__aeabi_dmul+0x134>
 80007ac:	f104 0414 	add.w	r4, r4, #20
 80007b0:	f1c4 0520 	rsb	r5, r4, #32
 80007b4:	fa00 f305 	lsl.w	r3, r0, r5
 80007b8:	fa20 f004 	lsr.w	r0, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea40 0002 	orr.w	r0, r0, r2
 80007c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d0:	fa21 f604 	lsr.w	r6, r1, r4
 80007d4:	eb42 0106 	adc.w	r1, r2, r6
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f1c4 040c 	rsb	r4, r4, #12
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f304 	lsl.w	r3, r0, r4
 80007f0:	fa20 f005 	lsr.w	r0, r0, r5
 80007f4:	fa01 f204 	lsl.w	r2, r1, r4
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000804:	f141 0100 	adc.w	r1, r1, #0
 8000808:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800080c:	bf08      	it	eq
 800080e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000812:	bd70      	pop	{r4, r5, r6, pc}
 8000814:	f1c4 0520 	rsb	r5, r4, #32
 8000818:	fa00 f205 	lsl.w	r2, r0, r5
 800081c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000820:	fa20 f304 	lsr.w	r3, r0, r4
 8000824:	fa01 f205 	lsl.w	r2, r1, r5
 8000828:	ea43 0302 	orr.w	r3, r3, r2
 800082c:	fa21 f004 	lsr.w	r0, r1, r4
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	fa21 f204 	lsr.w	r2, r1, r4
 8000838:	ea20 0002 	bic.w	r0, r0, r2
 800083c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f094 0f00 	teq	r4, #0
 8000850:	d10f      	bne.n	8000872 <__aeabi_dmul+0x1c2>
 8000852:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000856:	0040      	lsls	r0, r0, #1
 8000858:	eb41 0101 	adc.w	r1, r1, r1
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	bf08      	it	eq
 8000862:	3c01      	subeq	r4, #1
 8000864:	d0f7      	beq.n	8000856 <__aeabi_dmul+0x1a6>
 8000866:	ea41 0106 	orr.w	r1, r1, r6
 800086a:	f095 0f00 	teq	r5, #0
 800086e:	bf18      	it	ne
 8000870:	4770      	bxne	lr
 8000872:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000876:	0052      	lsls	r2, r2, #1
 8000878:	eb43 0303 	adc.w	r3, r3, r3
 800087c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000880:	bf08      	it	eq
 8000882:	3d01      	subeq	r5, #1
 8000884:	d0f7      	beq.n	8000876 <__aeabi_dmul+0x1c6>
 8000886:	ea43 0306 	orr.w	r3, r3, r6
 800088a:	4770      	bx	lr
 800088c:	ea94 0f0c 	teq	r4, ip
 8000890:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000894:	bf18      	it	ne
 8000896:	ea95 0f0c 	teqne	r5, ip
 800089a:	d00c      	beq.n	80008b6 <__aeabi_dmul+0x206>
 800089c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a0:	bf18      	it	ne
 80008a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008a6:	d1d1      	bne.n	800084c <__aeabi_dmul+0x19c>
 80008a8:	ea81 0103 	eor.w	r1, r1, r3
 80008ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b0:	f04f 0000 	mov.w	r0, #0
 80008b4:	bd70      	pop	{r4, r5, r6, pc}
 80008b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008ba:	bf06      	itte	eq
 80008bc:	4610      	moveq	r0, r2
 80008be:	4619      	moveq	r1, r3
 80008c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008c4:	d019      	beq.n	80008fa <__aeabi_dmul+0x24a>
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	d102      	bne.n	80008d2 <__aeabi_dmul+0x222>
 80008cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d0:	d113      	bne.n	80008fa <__aeabi_dmul+0x24a>
 80008d2:	ea95 0f0c 	teq	r5, ip
 80008d6:	d105      	bne.n	80008e4 <__aeabi_dmul+0x234>
 80008d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008dc:	bf1c      	itt	ne
 80008de:	4610      	movne	r0, r2
 80008e0:	4619      	movne	r1, r3
 80008e2:	d10a      	bne.n	80008fa <__aeabi_dmul+0x24a>
 80008e4:	ea81 0103 	eor.w	r1, r1, r3
 80008e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008f4:	f04f 0000 	mov.w	r0, #0
 80008f8:	bd70      	pop	{r4, r5, r6, pc}
 80008fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000902:	bd70      	pop	{r4, r5, r6, pc}

08000904 <__aeabi_ddiv>:
 8000904:	b570      	push	{r4, r5, r6, lr}
 8000906:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800090a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800090e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000912:	bf1d      	ittte	ne
 8000914:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000918:	ea94 0f0c 	teqne	r4, ip
 800091c:	ea95 0f0c 	teqne	r5, ip
 8000920:	f000 f8a7 	bleq	8000a72 <__aeabi_ddiv+0x16e>
 8000924:	eba4 0405 	sub.w	r4, r4, r5
 8000928:	ea81 0e03 	eor.w	lr, r1, r3
 800092c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000930:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000934:	f000 8088 	beq.w	8000a48 <__aeabi_ddiv+0x144>
 8000938:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800093c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000940:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000944:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000948:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800094c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000950:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000954:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000958:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800095c:	429d      	cmp	r5, r3
 800095e:	bf08      	it	eq
 8000960:	4296      	cmpeq	r6, r2
 8000962:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000966:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800096a:	d202      	bcs.n	8000972 <__aeabi_ddiv+0x6e>
 800096c:	085b      	lsrs	r3, r3, #1
 800096e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000972:	1ab6      	subs	r6, r6, r2
 8000974:	eb65 0503 	sbc.w	r5, r5, r3
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	ea4f 0232 	mov.w	r2, r2, rrx
 800097e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000982:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 000c 	orrcs.w	r0, r0, ip
 8000998:	085b      	lsrs	r3, r3, #1
 800099a:	ea4f 0232 	mov.w	r2, r2, rrx
 800099e:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009a6:	bf22      	ittt	cs
 80009a8:	1ab6      	subcs	r6, r6, r2
 80009aa:	4675      	movcs	r5, lr
 80009ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009be:	bf22      	ittt	cs
 80009c0:	1ab6      	subcs	r6, r6, r2
 80009c2:	4675      	movcs	r5, lr
 80009c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c8:	085b      	lsrs	r3, r3, #1
 80009ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80009e4:	d018      	beq.n	8000a18 <__aeabi_ddiv+0x114>
 80009e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a02:	d1c0      	bne.n	8000986 <__aeabi_ddiv+0x82>
 8000a04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a08:	d10b      	bne.n	8000a22 <__aeabi_ddiv+0x11e>
 8000a0a:	ea41 0100 	orr.w	r1, r1, r0
 8000a0e:	f04f 0000 	mov.w	r0, #0
 8000a12:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a16:	e7b6      	b.n	8000986 <__aeabi_ddiv+0x82>
 8000a18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a1c:	bf04      	itt	eq
 8000a1e:	4301      	orreq	r1, r0
 8000a20:	2000      	moveq	r0, #0
 8000a22:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a26:	bf88      	it	hi
 8000a28:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a2c:	f63f aeaf 	bhi.w	800078e <__aeabi_dmul+0xde>
 8000a30:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a34:	bf04      	itt	eq
 8000a36:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a3a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a3e:	f150 0000 	adcs.w	r0, r0, #0
 8000a42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a46:	bd70      	pop	{r4, r5, r6, pc}
 8000a48:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a4c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a50:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a54:	bfc2      	ittt	gt
 8000a56:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a5a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a5e:	bd70      	popgt	{r4, r5, r6, pc}
 8000a60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a64:	f04f 0e00 	mov.w	lr, #0
 8000a68:	3c01      	subs	r4, #1
 8000a6a:	e690      	b.n	800078e <__aeabi_dmul+0xde>
 8000a6c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a70:	e68d      	b.n	800078e <__aeabi_dmul+0xde>
 8000a72:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a76:	ea94 0f0c 	teq	r4, ip
 8000a7a:	bf08      	it	eq
 8000a7c:	ea95 0f0c 	teqeq	r5, ip
 8000a80:	f43f af3b 	beq.w	80008fa <__aeabi_dmul+0x24a>
 8000a84:	ea94 0f0c 	teq	r4, ip
 8000a88:	d10a      	bne.n	8000aa0 <__aeabi_ddiv+0x19c>
 8000a8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a8e:	f47f af34 	bne.w	80008fa <__aeabi_dmul+0x24a>
 8000a92:	ea95 0f0c 	teq	r5, ip
 8000a96:	f47f af25 	bne.w	80008e4 <__aeabi_dmul+0x234>
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	e72c      	b.n	80008fa <__aeabi_dmul+0x24a>
 8000aa0:	ea95 0f0c 	teq	r5, ip
 8000aa4:	d106      	bne.n	8000ab4 <__aeabi_ddiv+0x1b0>
 8000aa6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aaa:	f43f aefd 	beq.w	80008a8 <__aeabi_dmul+0x1f8>
 8000aae:	4610      	mov	r0, r2
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	e722      	b.n	80008fa <__aeabi_dmul+0x24a>
 8000ab4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab8:	bf18      	it	ne
 8000aba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000abe:	f47f aec5 	bne.w	800084c <__aeabi_dmul+0x19c>
 8000ac2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ac6:	f47f af0d 	bne.w	80008e4 <__aeabi_dmul+0x234>
 8000aca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ace:	f47f aeeb 	bne.w	80008a8 <__aeabi_dmul+0x1f8>
 8000ad2:	e712      	b.n	80008fa <__aeabi_dmul+0x24a>

08000ad4 <__gedf2>:
 8000ad4:	f04f 3cff 	mov.w	ip, #4294967295
 8000ad8:	e006      	b.n	8000ae8 <__cmpdf2+0x4>
 8000ada:	bf00      	nop

08000adc <__ledf2>:
 8000adc:	f04f 0c01 	mov.w	ip, #1
 8000ae0:	e002      	b.n	8000ae8 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__cmpdf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	bf18      	it	ne
 8000afa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000afe:	d01b      	beq.n	8000b38 <__cmpdf2+0x54>
 8000b00:	b001      	add	sp, #4
 8000b02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b06:	bf0c      	ite	eq
 8000b08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b0c:	ea91 0f03 	teqne	r1, r3
 8000b10:	bf02      	ittt	eq
 8000b12:	ea90 0f02 	teqeq	r0, r2
 8000b16:	2000      	moveq	r0, #0
 8000b18:	4770      	bxeq	lr
 8000b1a:	f110 0f00 	cmn.w	r0, #0
 8000b1e:	ea91 0f03 	teq	r1, r3
 8000b22:	bf58      	it	pl
 8000b24:	4299      	cmppl	r1, r3
 8000b26:	bf08      	it	eq
 8000b28:	4290      	cmpeq	r0, r2
 8000b2a:	bf2c      	ite	cs
 8000b2c:	17d8      	asrcs	r0, r3, #31
 8000b2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b32:	f040 0001 	orr.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b40:	d102      	bne.n	8000b48 <__cmpdf2+0x64>
 8000b42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b46:	d107      	bne.n	8000b58 <__cmpdf2+0x74>
 8000b48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b50:	d1d6      	bne.n	8000b00 <__cmpdf2+0x1c>
 8000b52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b56:	d0d3      	beq.n	8000b00 <__cmpdf2+0x1c>
 8000b58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_cdrcmple>:
 8000b60:	4684      	mov	ip, r0
 8000b62:	4610      	mov	r0, r2
 8000b64:	4662      	mov	r2, ip
 8000b66:	468c      	mov	ip, r1
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4663      	mov	r3, ip
 8000b6c:	e000      	b.n	8000b70 <__aeabi_cdcmpeq>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_cdcmpeq>:
 8000b70:	b501      	push	{r0, lr}
 8000b72:	f7ff ffb7 	bl	8000ae4 <__cmpdf2>
 8000b76:	2800      	cmp	r0, #0
 8000b78:	bf48      	it	mi
 8000b7a:	f110 0f00 	cmnmi.w	r0, #0
 8000b7e:	bd01      	pop	{r0, pc}

08000b80 <__aeabi_dcmpeq>:
 8000b80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b84:	f7ff fff4 	bl	8000b70 <__aeabi_cdcmpeq>
 8000b88:	bf0c      	ite	eq
 8000b8a:	2001      	moveq	r0, #1
 8000b8c:	2000      	movne	r0, #0
 8000b8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b92:	bf00      	nop

08000b94 <__aeabi_dcmplt>:
 8000b94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b98:	f7ff ffea 	bl	8000b70 <__aeabi_cdcmpeq>
 8000b9c:	bf34      	ite	cc
 8000b9e:	2001      	movcc	r0, #1
 8000ba0:	2000      	movcs	r0, #0
 8000ba2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_dcmple>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff ffe0 	bl	8000b70 <__aeabi_cdcmpeq>
 8000bb0:	bf94      	ite	ls
 8000bb2:	2001      	movls	r0, #1
 8000bb4:	2000      	movhi	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_dcmpge>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff ffce 	bl	8000b60 <__aeabi_cdrcmple>
 8000bc4:	bf94      	ite	ls
 8000bc6:	2001      	movls	r0, #1
 8000bc8:	2000      	movhi	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_dcmpgt>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffc4 	bl	8000b60 <__aeabi_cdrcmple>
 8000bd8:	bf34      	ite	cc
 8000bda:	2001      	movcc	r0, #1
 8000bdc:	2000      	movcs	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_d2iz>:
 8000be4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bec:	d215      	bcs.n	8000c1a <__aeabi_d2iz+0x36>
 8000bee:	d511      	bpl.n	8000c14 <__aeabi_d2iz+0x30>
 8000bf0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf8:	d912      	bls.n	8000c20 <__aeabi_d2iz+0x3c>
 8000bfa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	bf18      	it	ne
 8000c10:	4240      	negne	r0, r0
 8000c12:	4770      	bx	lr
 8000c14:	f04f 0000 	mov.w	r0, #0
 8000c18:	4770      	bx	lr
 8000c1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1e:	d105      	bne.n	8000c2c <__aeabi_d2iz+0x48>
 8000c20:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c24:	bf08      	it	eq
 8000c26:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c2a:	4770      	bx	lr
 8000c2c:	f04f 0000 	mov.w	r0, #0
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <__aeabi_d2f>:
 8000c34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c38:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c3c:	bf24      	itt	cs
 8000c3e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c42:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c46:	d90d      	bls.n	8000c64 <__aeabi_d2f+0x30>
 8000c48:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c4c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c50:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c54:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c58:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c5c:	bf08      	it	eq
 8000c5e:	f020 0001 	biceq.w	r0, r0, #1
 8000c62:	4770      	bx	lr
 8000c64:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c68:	d121      	bne.n	8000cae <__aeabi_d2f+0x7a>
 8000c6a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c6e:	bfbc      	itt	lt
 8000c70:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c74:	4770      	bxlt	lr
 8000c76:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7e:	f1c2 0218 	rsb	r2, r2, #24
 8000c82:	f1c2 0c20 	rsb	ip, r2, #32
 8000c86:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8e:	bf18      	it	ne
 8000c90:	f040 0001 	orrne.w	r0, r0, #1
 8000c94:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c98:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c9c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca0:	ea40 000c 	orr.w	r0, r0, ip
 8000ca4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cac:	e7cc      	b.n	8000c48 <__aeabi_d2f+0x14>
 8000cae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb2:	d107      	bne.n	8000cc4 <__aeabi_d2f+0x90>
 8000cb4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb8:	bf1e      	ittt	ne
 8000cba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cbe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc2:	4770      	bxne	lr
 8000cc4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cc8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ccc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_frsub>:
 8000cd4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cd8:	e002      	b.n	8000ce0 <__addsf3>
 8000cda:	bf00      	nop

08000cdc <__aeabi_fsub>:
 8000cdc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ce0 <__addsf3>:
 8000ce0:	0042      	lsls	r2, r0, #1
 8000ce2:	bf1f      	itttt	ne
 8000ce4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce8:	ea92 0f03 	teqne	r2, r3
 8000cec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cf0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf4:	d06a      	beq.n	8000dcc <__addsf3+0xec>
 8000cf6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cfa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfe:	bfc1      	itttt	gt
 8000d00:	18d2      	addgt	r2, r2, r3
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	4048      	eorgt	r0, r1
 8000d06:	4041      	eorgt	r1, r0
 8000d08:	bfb8      	it	lt
 8000d0a:	425b      	neglt	r3, r3
 8000d0c:	2b19      	cmp	r3, #25
 8000d0e:	bf88      	it	hi
 8000d10:	4770      	bxhi	lr
 8000d12:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d1e:	bf18      	it	ne
 8000d20:	4240      	negne	r0, r0
 8000d22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d26:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d2a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d2e:	bf18      	it	ne
 8000d30:	4249      	negne	r1, r1
 8000d32:	ea92 0f03 	teq	r2, r3
 8000d36:	d03f      	beq.n	8000db8 <__addsf3+0xd8>
 8000d38:	f1a2 0201 	sub.w	r2, r2, #1
 8000d3c:	fa41 fc03 	asr.w	ip, r1, r3
 8000d40:	eb10 000c 	adds.w	r0, r0, ip
 8000d44:	f1c3 0320 	rsb	r3, r3, #32
 8000d48:	fa01 f103 	lsl.w	r1, r1, r3
 8000d4c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d50:	d502      	bpl.n	8000d58 <__addsf3+0x78>
 8000d52:	4249      	negs	r1, r1
 8000d54:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d58:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d5c:	d313      	bcc.n	8000d86 <__addsf3+0xa6>
 8000d5e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d62:	d306      	bcc.n	8000d72 <__addsf3+0x92>
 8000d64:	0840      	lsrs	r0, r0, #1
 8000d66:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d6a:	f102 0201 	add.w	r2, r2, #1
 8000d6e:	2afe      	cmp	r2, #254	; 0xfe
 8000d70:	d251      	bcs.n	8000e16 <__addsf3+0x136>
 8000d72:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d7a:	bf08      	it	eq
 8000d7c:	f020 0001 	biceq.w	r0, r0, #1
 8000d80:	ea40 0003 	orr.w	r0, r0, r3
 8000d84:	4770      	bx	lr
 8000d86:	0049      	lsls	r1, r1, #1
 8000d88:	eb40 0000 	adc.w	r0, r0, r0
 8000d8c:	3a01      	subs	r2, #1
 8000d8e:	bf28      	it	cs
 8000d90:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d94:	d2ed      	bcs.n	8000d72 <__addsf3+0x92>
 8000d96:	fab0 fc80 	clz	ip, r0
 8000d9a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9e:	ebb2 020c 	subs.w	r2, r2, ip
 8000da2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da6:	bfaa      	itet	ge
 8000da8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000dac:	4252      	neglt	r2, r2
 8000dae:	4318      	orrge	r0, r3
 8000db0:	bfbc      	itt	lt
 8000db2:	40d0      	lsrlt	r0, r2
 8000db4:	4318      	orrlt	r0, r3
 8000db6:	4770      	bx	lr
 8000db8:	f092 0f00 	teq	r2, #0
 8000dbc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dc0:	bf06      	itte	eq
 8000dc2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dc6:	3201      	addeq	r2, #1
 8000dc8:	3b01      	subne	r3, #1
 8000dca:	e7b5      	b.n	8000d38 <__addsf3+0x58>
 8000dcc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd4:	bf18      	it	ne
 8000dd6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dda:	d021      	beq.n	8000e20 <__addsf3+0x140>
 8000ddc:	ea92 0f03 	teq	r2, r3
 8000de0:	d004      	beq.n	8000dec <__addsf3+0x10c>
 8000de2:	f092 0f00 	teq	r2, #0
 8000de6:	bf08      	it	eq
 8000de8:	4608      	moveq	r0, r1
 8000dea:	4770      	bx	lr
 8000dec:	ea90 0f01 	teq	r0, r1
 8000df0:	bf1c      	itt	ne
 8000df2:	2000      	movne	r0, #0
 8000df4:	4770      	bxne	lr
 8000df6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dfa:	d104      	bne.n	8000e06 <__addsf3+0x126>
 8000dfc:	0040      	lsls	r0, r0, #1
 8000dfe:	bf28      	it	cs
 8000e00:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e04:	4770      	bx	lr
 8000e06:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e0a:	bf3c      	itt	cc
 8000e0c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e10:	4770      	bxcc	lr
 8000e12:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e16:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e1e:	4770      	bx	lr
 8000e20:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e24:	bf16      	itet	ne
 8000e26:	4608      	movne	r0, r1
 8000e28:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e2c:	4601      	movne	r1, r0
 8000e2e:	0242      	lsls	r2, r0, #9
 8000e30:	bf06      	itte	eq
 8000e32:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e36:	ea90 0f01 	teqeq	r0, r1
 8000e3a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e3e:	4770      	bx	lr

08000e40 <__aeabi_ui2f>:
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	e004      	b.n	8000e50 <__aeabi_i2f+0x8>
 8000e46:	bf00      	nop

08000e48 <__aeabi_i2f>:
 8000e48:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e4c:	bf48      	it	mi
 8000e4e:	4240      	negmi	r0, r0
 8000e50:	ea5f 0c00 	movs.w	ip, r0
 8000e54:	bf08      	it	eq
 8000e56:	4770      	bxeq	lr
 8000e58:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e5c:	4601      	mov	r1, r0
 8000e5e:	f04f 0000 	mov.w	r0, #0
 8000e62:	e01c      	b.n	8000e9e <__aeabi_l2f+0x2a>

08000e64 <__aeabi_ul2f>:
 8000e64:	ea50 0201 	orrs.w	r2, r0, r1
 8000e68:	bf08      	it	eq
 8000e6a:	4770      	bxeq	lr
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	e00a      	b.n	8000e88 <__aeabi_l2f+0x14>
 8000e72:	bf00      	nop

08000e74 <__aeabi_l2f>:
 8000e74:	ea50 0201 	orrs.w	r2, r0, r1
 8000e78:	bf08      	it	eq
 8000e7a:	4770      	bxeq	lr
 8000e7c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e80:	d502      	bpl.n	8000e88 <__aeabi_l2f+0x14>
 8000e82:	4240      	negs	r0, r0
 8000e84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e88:	ea5f 0c01 	movs.w	ip, r1
 8000e8c:	bf02      	ittt	eq
 8000e8e:	4684      	moveq	ip, r0
 8000e90:	4601      	moveq	r1, r0
 8000e92:	2000      	moveq	r0, #0
 8000e94:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e98:	bf08      	it	eq
 8000e9a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e9e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ea2:	fabc f28c 	clz	r2, ip
 8000ea6:	3a08      	subs	r2, #8
 8000ea8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000eac:	db10      	blt.n	8000ed0 <__aeabi_l2f+0x5c>
 8000eae:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb8:	f1c2 0220 	rsb	r2, r2, #32
 8000ebc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ec0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec4:	eb43 0002 	adc.w	r0, r3, r2
 8000ec8:	bf08      	it	eq
 8000eca:	f020 0001 	biceq.w	r0, r0, #1
 8000ece:	4770      	bx	lr
 8000ed0:	f102 0220 	add.w	r2, r2, #32
 8000ed4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed8:	f1c2 0220 	rsb	r2, r2, #32
 8000edc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ee0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee4:	eb43 0002 	adc.w	r0, r3, r2
 8000ee8:	bf08      	it	eq
 8000eea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eee:	4770      	bx	lr

08000ef0 <__gesf2>:
 8000ef0:	f04f 3cff 	mov.w	ip, #4294967295
 8000ef4:	e006      	b.n	8000f04 <__cmpsf2+0x4>
 8000ef6:	bf00      	nop

08000ef8 <__lesf2>:
 8000ef8:	f04f 0c01 	mov.w	ip, #1
 8000efc:	e002      	b.n	8000f04 <__cmpsf2+0x4>
 8000efe:	bf00      	nop

08000f00 <__cmpsf2>:
 8000f00:	f04f 0c01 	mov.w	ip, #1
 8000f04:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f08:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f14:	bf18      	it	ne
 8000f16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f1a:	d011      	beq.n	8000f40 <__cmpsf2+0x40>
 8000f1c:	b001      	add	sp, #4
 8000f1e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f22:	bf18      	it	ne
 8000f24:	ea90 0f01 	teqne	r0, r1
 8000f28:	bf58      	it	pl
 8000f2a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f2e:	bf88      	it	hi
 8000f30:	17c8      	asrhi	r0, r1, #31
 8000f32:	bf38      	it	cc
 8000f34:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f38:	bf18      	it	ne
 8000f3a:	f040 0001 	orrne.w	r0, r0, #1
 8000f3e:	4770      	bx	lr
 8000f40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f44:	d102      	bne.n	8000f4c <__cmpsf2+0x4c>
 8000f46:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f4a:	d105      	bne.n	8000f58 <__cmpsf2+0x58>
 8000f4c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f50:	d1e4      	bne.n	8000f1c <__cmpsf2+0x1c>
 8000f52:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f56:	d0e1      	beq.n	8000f1c <__cmpsf2+0x1c>
 8000f58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <__aeabi_cfrcmple>:
 8000f60:	4684      	mov	ip, r0
 8000f62:	4608      	mov	r0, r1
 8000f64:	4661      	mov	r1, ip
 8000f66:	e7ff      	b.n	8000f68 <__aeabi_cfcmpeq>

08000f68 <__aeabi_cfcmpeq>:
 8000f68:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f6a:	f7ff ffc9 	bl	8000f00 <__cmpsf2>
 8000f6e:	2800      	cmp	r0, #0
 8000f70:	bf48      	it	mi
 8000f72:	f110 0f00 	cmnmi.w	r0, #0
 8000f76:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f78 <__aeabi_fcmpeq>:
 8000f78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f7c:	f7ff fff4 	bl	8000f68 <__aeabi_cfcmpeq>
 8000f80:	bf0c      	ite	eq
 8000f82:	2001      	moveq	r0, #1
 8000f84:	2000      	movne	r0, #0
 8000f86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f8a:	bf00      	nop

08000f8c <__aeabi_fcmplt>:
 8000f8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f90:	f7ff ffea 	bl	8000f68 <__aeabi_cfcmpeq>
 8000f94:	bf34      	ite	cc
 8000f96:	2001      	movcc	r0, #1
 8000f98:	2000      	movcs	r0, #0
 8000f9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9e:	bf00      	nop

08000fa0 <__aeabi_fcmple>:
 8000fa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa4:	f7ff ffe0 	bl	8000f68 <__aeabi_cfcmpeq>
 8000fa8:	bf94      	ite	ls
 8000faa:	2001      	movls	r0, #1
 8000fac:	2000      	movhi	r0, #0
 8000fae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_fcmpge>:
 8000fb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb8:	f7ff ffd2 	bl	8000f60 <__aeabi_cfrcmple>
 8000fbc:	bf94      	ite	ls
 8000fbe:	2001      	movls	r0, #1
 8000fc0:	2000      	movhi	r0, #0
 8000fc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_fcmpgt>:
 8000fc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fcc:	f7ff ffc8 	bl	8000f60 <__aeabi_cfrcmple>
 8000fd0:	bf34      	ite	cc
 8000fd2:	2001      	movcc	r0, #1
 8000fd4:	2000      	movcs	r0, #0
 8000fd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fda:	bf00      	nop
 8000fdc:	0000      	movs	r0, r0
 8000fde:	0000      	movs	r0, r0

08000fe0 <memchr>:
 8000fe0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000fe4:	2a10      	cmp	r2, #16
 8000fe6:	db2b      	blt.n	8001040 <memchr+0x60>
 8000fe8:	f010 0f07 	tst.w	r0, #7
 8000fec:	d008      	beq.n	8001000 <memchr+0x20>
 8000fee:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000ff2:	3a01      	subs	r2, #1
 8000ff4:	428b      	cmp	r3, r1
 8000ff6:	d02d      	beq.n	8001054 <memchr+0x74>
 8000ff8:	f010 0f07 	tst.w	r0, #7
 8000ffc:	b342      	cbz	r2, 8001050 <memchr+0x70>
 8000ffe:	d1f6      	bne.n	8000fee <memchr+0xe>
 8001000:	b4f0      	push	{r4, r5, r6, r7}
 8001002:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001006:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800100a:	f022 0407 	bic.w	r4, r2, #7
 800100e:	f07f 0700 	mvns.w	r7, #0
 8001012:	2300      	movs	r3, #0
 8001014:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001018:	3c08      	subs	r4, #8
 800101a:	ea85 0501 	eor.w	r5, r5, r1
 800101e:	ea86 0601 	eor.w	r6, r6, r1
 8001022:	fa85 f547 	uadd8	r5, r5, r7
 8001026:	faa3 f587 	sel	r5, r3, r7
 800102a:	fa86 f647 	uadd8	r6, r6, r7
 800102e:	faa5 f687 	sel	r6, r5, r7
 8001032:	b98e      	cbnz	r6, 8001058 <memchr+0x78>
 8001034:	d1ee      	bne.n	8001014 <memchr+0x34>
 8001036:	bcf0      	pop	{r4, r5, r6, r7}
 8001038:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800103c:	f002 0207 	and.w	r2, r2, #7
 8001040:	b132      	cbz	r2, 8001050 <memchr+0x70>
 8001042:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001046:	3a01      	subs	r2, #1
 8001048:	ea83 0301 	eor.w	r3, r3, r1
 800104c:	b113      	cbz	r3, 8001054 <memchr+0x74>
 800104e:	d1f8      	bne.n	8001042 <memchr+0x62>
 8001050:	2000      	movs	r0, #0
 8001052:	4770      	bx	lr
 8001054:	3801      	subs	r0, #1
 8001056:	4770      	bx	lr
 8001058:	2d00      	cmp	r5, #0
 800105a:	bf06      	itte	eq
 800105c:	4635      	moveq	r5, r6
 800105e:	3803      	subeq	r0, #3
 8001060:	3807      	subne	r0, #7
 8001062:	f015 0f01 	tst.w	r5, #1
 8001066:	d107      	bne.n	8001078 <memchr+0x98>
 8001068:	3001      	adds	r0, #1
 800106a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800106e:	bf02      	ittt	eq
 8001070:	3001      	addeq	r0, #1
 8001072:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8001076:	3001      	addeq	r0, #1
 8001078:	bcf0      	pop	{r4, r5, r6, r7}
 800107a:	3801      	subs	r0, #1
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <handle>:
}
#endif 

/// This function will handle the 'p' command send from the capture board.
uint8_t handle(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 8001080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001084:	461d      	mov	r5, r3
  int num_layers = NET_NUM_LAYERS;
  int *num_neurons_arr = NET_NUM_NEURONS;
 8001086:	4b26      	ldr	r3, [pc, #152]	; (8001120 <handle+0xa0>)
{
 8001088:	460f      	mov	r7, r1
 800108a:	4690      	mov	r8, r2
  int *num_neurons_arr = NET_NUM_NEURONS;
 800108c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
{
 800108e:	b08a      	sub	sp, #40	; 0x28
  int *num_neurons_arr = NET_NUM_NEURONS;
 8001090:	ae06      	add	r6, sp, #24
  
  
  network net = init_network(num_layers, num_neurons_arr, net_config_layer_weights);
 8001092:	ac04      	add	r4, sp, #16
  int *num_neurons_arr = NET_NUM_NEURONS;
 8001094:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  network net = init_network(num_layers, num_neurons_arr, net_config_layer_weights);
 8001098:	4632      	mov	r2, r6
 800109a:	4b22      	ldr	r3, [pc, #136]	; (8001124 <handle+0xa4>)
 800109c:	2104      	movs	r1, #4
 800109e:	4620      	mov	r0, r4
 80010a0:	f000 f973 	bl	800138a <init_network>
  
  //Change the input of the first neuron in the first layer to the provided number
  //convert to float
  float input_value;
  uint8_t input_buffer[4] = {buf[0], buf[1], buf[2], buf[3]};
 80010a4:	782b      	ldrb	r3, [r5, #0]
 80010a6:	f88d 300c 	strb.w	r3, [sp, #12]
 80010aa:	786b      	ldrb	r3, [r5, #1]
 80010ac:	f88d 300d 	strb.w	r3, [sp, #13]
  memcpy(&input_value, input_buffer, sizeof(float)); 
  net.layers[0].neurons[0].a = input_value;
 80010b0:	9a05      	ldr	r2, [sp, #20]
  uint8_t input_buffer[4] = {buf[0], buf[1], buf[2], buf[3]};
 80010b2:	78ab      	ldrb	r3, [r5, #2]
 80010b4:	f88d 300e 	strb.w	r3, [sp, #14]
 80010b8:	78eb      	ldrb	r3, [r5, #3]
  net.layers[0].neurons[0].a = input_value;
 80010ba:	6852      	ldr	r2, [r2, #4]
  uint8_t input_buffer[4] = {buf[0], buf[1], buf[2], buf[3]};
 80010bc:	f88d 300f 	strb.w	r3, [sp, #15]
  memcpy(&input_value, input_buffer, sizeof(float)); 
 80010c0:	9b03      	ldr	r3, [sp, #12]
 80010c2:	9302      	str	r3, [sp, #8]
  net.layers[0].neurons[0].a = input_value;
 80010c4:	6113      	str	r3, [r2, #16]
  QueryPerformanceFrequency(&frequency);
  QueryPerformanceCounter(&start);
  #endif
  #endif

  if (scmd) {
 80010c6:	466e      	mov	r6, sp
 80010c8:	bb3f      	cbnz	r7, 800111a <handle+0x9a>
  QueryPerformanceCounter(&middle);
  #endif
  #endif

  // Start Measurement
  trigger_high();
 80010ca:	f000 fca7 	bl	8001a1c <trigger_high>
  net = forward_shuffled(net);
 80010ce:	e894 0006 	ldmia.w	r4, {r1, r2}
 80010d2:	4630      	mov	r0, r6
 80010d4:	f000 fa00 	bl	80014d8 <forward_shuffled>
 80010d8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80010dc:	e884 0003 	stmia.w	r4, {r0, r1}
  // Stop Measurement
  trigger_low();
 80010e0:	f000 fca3 	bl	8001a2a <trigger_low>
  printf("Overhead Time: %.16f\nOverall Time: %.16f\nOverhead/Total percentage: %.16f\%\n", overhead_time, overall_time, percentage);
  #endif
  #endif
  
  //free dynamically allocated memory
  free_network(&net);
 80010e4:	4620      	mov	r0, r4
 80010e6:	f000 f8df 	bl	80012a8 <free_network>
  
  simpleserial_put('r', len, buf);
 80010ea:	462a      	mov	r2, r5
 80010ec:	4641      	mov	r1, r8
 80010ee:	2072      	movs	r0, #114	; 0x72
 80010f0:	f000 fb2e 	bl	8001750 <simpleserial_put>

  return 0;
}
 80010f4:	2000      	movs	r0, #0
 80010f6:	b00a      	add	sp, #40	; 0x28
 80010f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      net = shuffle_mul_indices_masked(net, i);
 80010fc:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001100:	463b      	mov	r3, r7
 8001102:	4630      	mov	r0, r6
 8001104:	f000 f99e 	bl	8001444 <shuffle_mul_indices_masked>
 8001108:	e896 0003 	ldmia.w	r6, {r0, r1}
 800110c:	e884 0003 	stmia.w	r4, {r0, r1}
    for (int i = 1; i < net.num_layers; i++) {
 8001110:	3701      	adds	r7, #1
 8001112:	9b04      	ldr	r3, [sp, #16]
 8001114:	42bb      	cmp	r3, r7
 8001116:	dcf1      	bgt.n	80010fc <handle+0x7c>
 8001118:	e7d7      	b.n	80010ca <handle+0x4a>
 800111a:	2701      	movs	r7, #1
 800111c:	e7f9      	b.n	8001112 <handle+0x92>
 800111e:	bf00      	nop
 8001120:	08003d60 	.word	0x08003d60
 8001124:	20000084 	.word	0x20000084

08001128 <init_weights>:
    float lay3_weights[3][4];
} net_config_weights;

void *net_config_layer_weights[NET_NUM_LAYERS];

void init_weights() {
 8001128:	b530      	push	{r4, r5, lr}
 800112a:	b0c5      	sub	sp, #276	; 0x114
    float lay1_weights[5][7] = 
 800112c:	491e      	ldr	r1, [pc, #120]	; (80011a8 <init_weights+0x80>)
    {-1.47, 0.56, 1.85, -0.91, 0.23},
    {1.17, -1.38, 0.97, 0.63, -0.14},
    {-0.88, 1.09, -1.72, 0.21, 1.57},
    {1.86, -1.06, 0.45, -0.75, 1.02}
    };
    float lay3_weights[3][4] = {
 800112e:	4d1f      	ldr	r5, [pc, #124]	; (80011ac <init_weights+0x84>)
    float lay1_weights[5][7] = 
 8001130:	228c      	movs	r2, #140	; 0x8c
 8001132:	a821      	add	r0, sp, #132	; 0x84
 8001134:	f001 fd5e 	bl	8002bf4 <memcpy>
    float lay2_weights[4][5] = {
 8001138:	491d      	ldr	r1, [pc, #116]	; (80011b0 <init_weights+0x88>)
 800113a:	2250      	movs	r2, #80	; 0x50
 800113c:	a80d      	add	r0, sp, #52	; 0x34
 800113e:	f001 fd59 	bl	8002bf4 <memcpy>
    float lay3_weights[3][4] = {
 8001142:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001144:	ac01      	add	r4, sp, #4
 8001146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800114a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800114c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001150:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    //         net_config_weights.lay0_weights[i][j] = lay0_weights[i][j];
    //     }
    // }
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 7; j++) {
            net_config_weights.lay1_weights[i][j] = lay1_weights[i][j];
 8001154:	228c      	movs	r2, #140	; 0x8c
 8001156:	a921      	add	r1, sp, #132	; 0x84
 8001158:	4816      	ldr	r0, [pc, #88]	; (80011b4 <init_weights+0x8c>)
 800115a:	f001 fd4b 	bl	8002bf4 <memcpy>
        }
    }
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 5; j++) {
            net_config_weights.lay2_weights[i][j] = lay2_weights[i][j];
 800115e:	2250      	movs	r2, #80	; 0x50
 8001160:	a90d      	add	r1, sp, #52	; 0x34
 8001162:	4815      	ldr	r0, [pc, #84]	; (80011b8 <init_weights+0x90>)
 8001164:	f001 fd46 	bl	8002bf4 <memcpy>
 8001168:	4a14      	ldr	r2, [pc, #80]	; (80011bc <init_weights+0x94>)
 800116a:	ab01      	add	r3, sp, #4
 800116c:	2103      	movs	r1, #3
 800116e:	4610      	mov	r0, r2
        }
    }
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            net_config_weights.lay3_weights[i][j] = lay3_weights[i][j];
 8001170:	681c      	ldr	r4, [r3, #0]
 8001172:	f8c2 40f8 	str.w	r4, [r2, #248]	; 0xf8
 8001176:	685c      	ldr	r4, [r3, #4]
 8001178:	f8c2 40fc 	str.w	r4, [r2, #252]	; 0xfc
    for (int i = 0; i < 3; i++) {
 800117c:	3901      	subs	r1, #1
            net_config_weights.lay3_weights[i][j] = lay3_weights[i][j];
 800117e:	689c      	ldr	r4, [r3, #8]
 8001180:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
    for (int i = 0; i < 3; i++) {
 8001184:	f103 0310 	add.w	r3, r3, #16
 8001188:	f102 0210 	add.w	r2, r2, #16
 800118c:	d1f0      	bne.n	8001170 <init_weights+0x48>
    //     for (int j = 0; j < 3; j++) {
    //         net_config_weights.lay4_weights[i][j] = lay4_weights[i][j];
    //     }
    // }

    net_config_layer_weights[0] = (void*)net_config_weights.lay0_weights;
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <init_weights+0x98>)
 8001190:	461a      	mov	r2, r3
 8001192:	f842 0b2c 	str.w	r0, [r2], #44
    net_config_layer_weights[1] = (void*)net_config_weights.lay1_weights;
 8001196:	605a      	str	r2, [r3, #4]
    net_config_layer_weights[2] = (void*)net_config_weights.lay2_weights;
 8001198:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 800119c:	609a      	str	r2, [r3, #8]
    net_config_layer_weights[3] = (void*)net_config_weights.lay3_weights;
 800119e:	f503 7284 	add.w	r2, r3, #264	; 0x108
 80011a2:	60da      	str	r2, [r3, #12]
    //net_config_layer_weights[4] = (void*)net_config_weights.lay4_weights;
}
 80011a4:	b045      	add	sp, #276	; 0x114
 80011a6:	bd30      	pop	{r4, r5, pc}
 80011a8:	08003d70 	.word	0x08003d70
 80011ac:	08003e4c 	.word	0x08003e4c
 80011b0:	08003dfc 	.word	0x08003dfc
 80011b4:	200000b0 	.word	0x200000b0
 80011b8:	2000013c 	.word	0x2000013c
 80011bc:	20000094 	.word	0x20000094
 80011c0:	20000084 	.word	0x20000084

080011c4 <main>:

int main(void) {
 80011c4:	b508      	push	{r3, lr}
  srand(time(NULL));
 80011c6:	2000      	movs	r0, #0
 80011c8:	f001 fe4a 	bl	8002e60 <time>
 80011cc:	f001 fdcc 	bl	8002d68 <srand>
  //Initialize network weights
  init_weights();
 80011d0:	f7ff ffaa 	bl	8001128 <init_weights>
  // Setup the specific chipset.
  platform_init();
 80011d4:	f000 fb80 	bl	80018d8 <platform_init>
  // Setup serial communication line.
  init_uart();
 80011d8:	f000 fbbe 	bl	8001958 <init_uart>
  // Setup measurement trigger.
  trigger_setup();
 80011dc:	f000 fbfa 	bl	80019d4 <trigger_setup>

  simpleserial_init();
 80011e0:	f000 faa4 	bl	800172c <simpleserial_init>

  // Insert your handlers here.
  simpleserial_addcmd('p', 16, handle);
 80011e4:	4a03      	ldr	r2, [pc, #12]	; (80011f4 <main+0x30>)
 80011e6:	2110      	movs	r1, #16
 80011e8:	2070      	movs	r0, #112	; 0x70
 80011ea:	f000 fa85 	bl	80016f8 <simpleserial_addcmd>
#ifdef DEBUGGING
  simpleserial_addcmd('t', 16, test_handle);
#endif
  // What for the capture board to send commands and handle them.
  while (1)
    simpleserial_get();
 80011ee:	f000 fb05 	bl	80017fc <simpleserial_get>
  while (1)
 80011f2:	e7fc      	b.n	80011ee <main+0x2a>
 80011f4:	08001081 	.word	0x08001081

080011f8 <blakely>:
#include "network.h"
#include <stdint.h>
#include <math.h>

unsigned int blakely(unsigned int a, unsigned int b, unsigned int n, unsigned int length) {
 80011f8:	b530      	push	{r4, r5, lr}
    unsigned int R = 0;
    for (int i = length - 1; i >= 0; i--) {
 80011fa:	3b01      	subs	r3, #1
unsigned int blakely(unsigned int a, unsigned int b, unsigned int n, unsigned int length) {
 80011fc:	4605      	mov	r5, r0
    unsigned int R = 0;
 80011fe:	2000      	movs	r0, #0
    for (int i = length - 1; i >= 0; i--) {
 8001200:	2b00      	cmp	r3, #0
 8001202:	da00      	bge.n	8001206 <blakely+0xe>
        if (R >= n) {
            R = R - n;
        }
    }
    return R;
}
 8001204:	bd30      	pop	{r4, r5, pc}
        unsigned int ai = (a >> i) & 1;
 8001206:	fa25 f403 	lsr.w	r4, r5, r3
 800120a:	f004 0401 	and.w	r4, r4, #1
        R = 2 * R + ai * b;
 800120e:	434c      	muls	r4, r1
 8001210:	eb04 0040 	add.w	r0, r4, r0, lsl #1
        if (R >= n) {
 8001214:	4290      	cmp	r0, r2
 8001216:	d303      	bcc.n	8001220 <blakely+0x28>
            R = R - n;
 8001218:	1a80      	subs	r0, r0, r2
        if (R >= n) {
 800121a:	4282      	cmp	r2, r0
            R = R - n;
 800121c:	bf98      	it	ls
 800121e:	1a80      	subls	r0, r0, r2
    for (int i = length - 1; i >= 0; i--) {
 8001220:	3b01      	subs	r3, #1
 8001222:	e7ed      	b.n	8001200 <blakely+0x8>

08001224 <modulo_masked>:

unsigned int modulo_masked(int i, unsigned int s1[], unsigned int s2[], unsigned int length) {
 8001224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001228:	4605      	mov	r5, r0
 800122a:	460c      	mov	r4, r1
 800122c:	4616      	mov	r6, r2
 800122e:	461f      	mov	r7, r3
    unsigned int r1 = rand();
 8001230:	f001 fdc8 	bl	8002dc4 <rand>
 8001234:	4680      	mov	r8, r0
    unsigned int r2 = rand();
 8001236:	f001 fdc5 	bl	8002dc4 <rand>
    unsigned int tmp = (r1 * s1[i] + r2 * (i + 1)) % (i + 1);
 800123a:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
    // Compute (tmp * s2[i]) % (i + 1)
    unsigned int j = blakely(tmp, s2[i], i + 1, length);
 800123e:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
    unsigned int tmp = (r1 * s1[i] + r2 * (i + 1)) % (i + 1);
 8001242:	fb05 0400 	mla	r4, r5, r0, r0
 8001246:	fb03 4408 	mla	r4, r3, r8, r4
 800124a:	1c6a      	adds	r2, r5, #1
    unsigned int j = blakely(tmp, s2[i], i + 1, length);
 800124c:	463b      	mov	r3, r7
    unsigned int tmp = (r1 * s1[i] + r2 * (i + 1)) % (i + 1);
 800124e:	fbb4 f0f2 	udiv	r0, r4, r2
    unsigned int j = blakely(tmp, s2[i], i + 1, length);
 8001252:	fb02 4010 	mls	r0, r2, r0, r4
    return j;
}
 8001256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned int j = blakely(tmp, s2[i], i + 1, length);
 800125a:	f7ff bfcd 	b.w	80011f8 <blakely>

0800125e <fisher_yates_masked>:

void fisher_yates_masked(int arr[], unsigned int size, unsigned int s1[], unsigned int s2[], unsigned int length) {
 800125e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001260:	4604      	mov	r4, r0
 8001262:	4616      	mov	r6, r2
 8001264:	461f      	mov	r7, r3
    for (int i=0; i<size; i++)printf("%d", s1[i]);
    printf(" s2: ");
    for (int i=0; i<size; i++)printf("%d", s2[i]);
    printf(" length: %d Shuffled arr: ", length);
    #endif
    for (int i = size - 1; i >= 2; i--) {
 8001266:	1e4d      	subs	r5, r1, #1
 8001268:	2d01      	cmp	r5, #1
 800126a:	dc0d      	bgt.n	8001288 <fisher_yates_masked+0x2a>
        unsigned int j = modulo_masked(i, s1, s2, length);
        unsigned int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    unsigned int j = rand() % 2;
 800126c:	f001 fdaa 	bl	8002dc4 <rand>
 8001270:	2800      	cmp	r0, #0
 8001272:	f000 0001 	and.w	r0, r0, #1
 8001276:	bfb8      	it	lt
 8001278:	4240      	neglt	r0, r0
    unsigned int temp = arr[1];
 800127a:	6863      	ldr	r3, [r4, #4]
    arr[1] = arr[j];
 800127c:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
 8001280:	6062      	str	r2, [r4, #4]
    arr[j] = temp;
 8001282:	f844 3020 	str.w	r3, [r4, r0, lsl #2]

    #ifdef DEBUGGING
    for (int i=0; i<size; i++)printf("%d", arr[i]);
    printf("\n");
    #endif
}
 8001286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        unsigned int j = modulo_masked(i, s1, s2, length);
 8001288:	9b06      	ldr	r3, [sp, #24]
 800128a:	463a      	mov	r2, r7
 800128c:	4628      	mov	r0, r5
 800128e:	4631      	mov	r1, r6
 8001290:	f7ff ffc8 	bl	8001224 <modulo_masked>
        unsigned int temp = arr[i];
 8001294:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
        arr[i] = arr[j];
 8001298:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
 800129c:	f844 2025 	str.w	r2, [r4, r5, lsl #2]
        arr[j] = temp;
 80012a0:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
    for (int i = size - 1; i >= 2; i--) {
 80012a4:	3d01      	subs	r5, #1
 80012a6:	e7df      	b.n	8001268 <fisher_yates_masked+0xa>

080012a8 <free_network>:
    }
    fisher_yates(arr, size);
    return arr;
}

void free_network(network *net){
 80012a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012ac:	4604      	mov	r4, r0
    // free the dynamically allocated fields inside the network struct
    for (int i=0; i < net->num_layers; i++){
 80012ae:	2600      	movs	r6, #0
 80012b0:	f04f 0818 	mov.w	r8, #24
 80012b4:	6823      	ldr	r3, [r4, #0]
 80012b6:	42b3      	cmp	r3, r6
 80012b8:	dd1c      	ble.n	80012f4 <free_network+0x4c>
 80012ba:	00f7      	lsls	r7, r6, #3
        for(int j=0; j< net->layers[i].num_neurons; j++){
 80012bc:	2500      	movs	r5, #0
 80012be:	e00f      	b.n	80012e0 <free_network+0x38>
            if (net->layers[i].neurons[j].weights != NULL) free(net->layers[i].neurons[j].weights);
 80012c0:	fb08 f905 	mul.w	r9, r8, r5
 80012c4:	4448      	add	r0, r9
 80012c6:	6840      	ldr	r0, [r0, #4]
 80012c8:	b108      	cbz	r0, 80012ce <free_network+0x26>
 80012ca:	f001 fc8b 	bl	8002be4 <free>
            if (net->layers[i].neurons[j].mul_indices != NULL) free(net->layers[i].neurons[j].mul_indices);
 80012ce:	6862      	ldr	r2, [r4, #4]
 80012d0:	443a      	add	r2, r7
 80012d2:	6853      	ldr	r3, [r2, #4]
 80012d4:	444b      	add	r3, r9
 80012d6:	6958      	ldr	r0, [r3, #20]
 80012d8:	b108      	cbz	r0, 80012de <free_network+0x36>
 80012da:	f001 fc83 	bl	8002be4 <free>
        for(int j=0; j< net->layers[i].num_neurons; j++){
 80012de:	3501      	adds	r5, #1
 80012e0:	6863      	ldr	r3, [r4, #4]
 80012e2:	19da      	adds	r2, r3, r7
 80012e4:	59db      	ldr	r3, [r3, r7]
            if (net->layers[i].neurons[j].weights != NULL) free(net->layers[i].neurons[j].weights);
 80012e6:	6850      	ldr	r0, [r2, #4]
        for(int j=0; j< net->layers[i].num_neurons; j++){
 80012e8:	42ab      	cmp	r3, r5
 80012ea:	dce9      	bgt.n	80012c0 <free_network+0x18>
        }
        free(net->layers[i].neurons);
 80012ec:	f001 fc7a 	bl	8002be4 <free>
    for (int i=0; i < net->num_layers; i++){
 80012f0:	3601      	adds	r6, #1
 80012f2:	e7df      	b.n	80012b4 <free_network+0xc>
    }
    free(net->layers);
 80012f4:	6860      	ldr	r0, [r4, #4]
}
 80012f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    free(net->layers);
 80012fa:	f001 bc73 	b.w	8002be4 <free>

080012fe <create_neuron>:
    }
    printf("-----------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
}


neuron create_neuron(void* weights, int num_in_weights, int layer_idx, int neuron_idx){
 80012fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    new_neuron.a = 0.5;
    new_neuron.z = 0.5;
    new_neuron.bias = 0.0;
    new_neuron.num_weights = num_in_weights;

    if (num_in_weights > 0) {
 8001302:	1e15      	subs	r5, r2, #0
neuron create_neuron(void* weights, int num_in_weights, int layer_idx, int neuron_idx){
 8001304:	4604      	mov	r4, r0
 8001306:	460f      	mov	r7, r1
 8001308:	4698      	mov	r8, r3
    if (num_in_weights > 0) {
 800130a:	dd26      	ble.n	800135a <create_neuron+0x5c>
        new_neuron.weights = (float*) malloc(num_in_weights * sizeof(float));
 800130c:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8001310:	4648      	mov	r0, r9
 8001312:	f001 fc5f 	bl	8002bd4 <malloc>
 8001316:	4606      	mov	r6, r0
        new_neuron.mul_indices = (int*) malloc(num_in_weights * sizeof(int));
 8001318:	4648      	mov	r0, r9
 800131a:	f001 fc5b 	bl	8002bd4 <malloc>
    } else {
        new_neuron.weights = NULL;
        new_neuron.mul_indices = NULL;
    }
    if (weights != NULL && num_in_weights > 0){
 800131e:	b187      	cbz	r7, 8001342 <create_neuron+0x44>
        //TODO: Dont question it... it works.
        float (*layer_weights)[num_in_weights] = ((float (*)[num_in_weights])((float**)weights)[layer_idx]);
        for (int i=0; i<num_in_weights; i++){
            new_neuron.weights[i] = layer_weights[neuron_idx][i];
 8001320:	9a08      	ldr	r2, [sp, #32]
 8001322:	fb05 f102 	mul.w	r1, r5, r2
 8001326:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
        for (int i=0; i<num_in_weights; i++){
 800132a:	2300      	movs	r3, #0
            new_neuron.weights[i] = layer_weights[neuron_idx][i];
 800132c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001330:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001334:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
            new_neuron.mul_indices[i] = i;
 8001338:	f840 3023 	str.w	r3, [r0, r3, lsl #2]
        for (int i=0; i<num_in_weights; i++){
 800133c:	3301      	adds	r3, #1
 800133e:	429d      	cmp	r5, r3
 8001340:	d1f6      	bne.n	8001330 <create_neuron+0x32>
        }
    }
    return new_neuron;
 8001342:	2300      	movs	r3, #0
 8001344:	60a3      	str	r3, [r4, #8]
 8001346:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800134a:	6160      	str	r0, [r4, #20]
 800134c:	e9c4 5600 	strd	r5, r6, [r4]
 8001350:	60e3      	str	r3, [r4, #12]
 8001352:	6123      	str	r3, [r4, #16]
}
 8001354:	4620      	mov	r0, r4
 8001356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        new_neuron.mul_indices = NULL;
 800135a:	2000      	movs	r0, #0
        new_neuron.weights = NULL;
 800135c:	4606      	mov	r6, r0
 800135e:	e7f0      	b.n	8001342 <create_neuron+0x44>

08001360 <create_layer>:

layer create_layer(int num_neurons){
 8001360:	b538      	push	{r3, r4, r5, lr}
 8001362:	4604      	mov	r4, r0
    layer lay;
    lay.num_neurons = num_neurons;
    lay.neurons = (neuron*) malloc(num_neurons * sizeof(neuron));
 8001364:	2018      	movs	r0, #24
 8001366:	4348      	muls	r0, r1
layer create_layer(int num_neurons){
 8001368:	460d      	mov	r5, r1
    lay.neurons = (neuron*) malloc(num_neurons * sizeof(neuron));
 800136a:	f001 fc33 	bl	8002bd4 <malloc>
    return lay;
 800136e:	e9c4 5000 	strd	r5, r0, [r4]
}
 8001372:	4620      	mov	r0, r4
 8001374:	bd38      	pop	{r3, r4, r5, pc}

08001376 <create_network>:

network create_network(int num_layers){
 8001376:	b538      	push	{r3, r4, r5, lr}
 8001378:	4604      	mov	r4, r0
    network net;
    net.num_layers = num_layers;
    net.layers = (layer*) malloc(num_layers * sizeof(layer));
 800137a:	00c8      	lsls	r0, r1, #3
network create_network(int num_layers){
 800137c:	460d      	mov	r5, r1
    net.layers = (layer*) malloc(num_layers * sizeof(layer));
 800137e:	f001 fc29 	bl	8002bd4 <malloc>
    return net;
 8001382:	e9c4 5000 	strd	r5, r0, [r4]
}
 8001386:	4620      	mov	r0, r4
 8001388:	bd38      	pop	{r3, r4, r5, pc}

0800138a <init_network>:

network init_network(int num_layers, int *num_neurons, void* weights) {
 800138a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800138e:	4607      	mov	r7, r0
 8001390:	b08b      	sub	sp, #44	; 0x2c
 8001392:	4688      	mov	r8, r1
 8001394:	4616      	mov	r6, r2
 8001396:	469a      	mov	sl, r3
    network net = create_network(num_layers);
 8001398:	f7ff ffed 	bl	8001376 <create_network>
 800139c:	687d      	ldr	r5, [r7, #4]
    int curr_layer_idx, curr_neuron_idx;
    for (curr_layer_idx = 0; curr_layer_idx < num_layers; curr_layer_idx++){
 800139e:	2400      	movs	r4, #0
        net.layers[ curr_layer_idx ] = create_layer(num_neurons[ curr_layer_idx ]);
 80013a0:	f10d 0920 	add.w	r9, sp, #32
    for (curr_layer_idx = 0; curr_layer_idx < num_layers; curr_layer_idx++){
 80013a4:	4544      	cmp	r4, r8
 80013a6:	db15      	blt.n	80013d4 <init_network+0x4a>
    }
    // create neurons for the first (input) layer - they dont have weights
    for (curr_neuron_idx = 0; curr_neuron_idx < net.layers[0].num_neurons; curr_neuron_idx++){
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8d5 c000 	ldr.w	ip, [r5]
        net.layers[0].neurons[ curr_neuron_idx ] = create_neuron(NULL, 0, 0, curr_neuron_idx);
 80013ae:	f04f 0e18 	mov.w	lr, #24
 80013b2:	4619      	mov	r1, r3
 80013b4:	f04f 0900 	mov.w	r9, #0
 80013b8:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
    for (curr_neuron_idx = 0; curr_neuron_idx < net.layers[0].num_neurons; curr_neuron_idx++){
 80013bc:	459c      	cmp	ip, r3
 80013be:	dc16      	bgt.n	80013ee <init_network+0x64>
    }
    // For each following layer create neurons with number of weights eqaual to the number of neurons in the previous layer
    for (curr_layer_idx = 1; curr_layer_idx < num_layers; curr_layer_idx++){
 80013c0:	f04f 0901 	mov.w	r9, #1
        int prev_layer_idx = curr_layer_idx - 1;
        for (curr_neuron_idx = 0; curr_neuron_idx <net.layers[ curr_layer_idx ].num_neurons; curr_neuron_idx++){
            net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ] = create_neuron(weights, net.layers[ prev_layer_idx ].num_neurons, curr_layer_idx, curr_neuron_idx );
 80013c4:	f04f 0b18 	mov.w	fp, #24
    for (curr_layer_idx = 1; curr_layer_idx < num_layers; curr_layer_idx++){
 80013c8:	45c1      	cmp	r9, r8
 80013ca:	db38      	blt.n	800143e <init_network+0xb4>
        }
    }
    return net;
}
 80013cc:	4638      	mov	r0, r7
 80013ce:	b00b      	add	sp, #44	; 0x2c
 80013d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        net.layers[ curr_layer_idx ] = create_layer(num_neurons[ curr_layer_idx ]);
 80013d4:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 80013d8:	4648      	mov	r0, r9
 80013da:	f7ff ffc1 	bl	8001360 <create_layer>
 80013de:	e899 0003 	ldmia.w	r9, {r0, r1}
 80013e2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80013e6:	e883 0003 	stmia.w	r3, {r0, r1}
    for (curr_layer_idx = 0; curr_layer_idx < num_layers; curr_layer_idx++){
 80013ea:	3401      	adds	r4, #1
 80013ec:	e7da      	b.n	80013a4 <init_network+0x1a>
        net.layers[0].neurons[ curr_neuron_idx ] = create_neuron(NULL, 0, 0, curr_neuron_idx);
 80013ee:	686e      	ldr	r6, [r5, #4]
 80013f0:	fb0e f403 	mul.w	r4, lr, r3
 80013f4:	1932      	adds	r2, r6, r4
 80013f6:	5131      	str	r1, [r6, r4]
    for (curr_neuron_idx = 0; curr_neuron_idx < net.layers[0].num_neurons; curr_neuron_idx++){
 80013f8:	3301      	adds	r3, #1
        net.layers[0].neurons[ curr_neuron_idx ] = create_neuron(NULL, 0, 0, curr_neuron_idx);
 80013fa:	6051      	str	r1, [r2, #4]
 80013fc:	f8c2 9008 	str.w	r9, [r2, #8]
 8001400:	60d0      	str	r0, [r2, #12]
 8001402:	6110      	str	r0, [r2, #16]
 8001404:	6151      	str	r1, [r2, #20]
    for (curr_neuron_idx = 0; curr_neuron_idx < net.layers[0].num_neurons; curr_neuron_idx++){
 8001406:	e7d9      	b.n	80013bc <init_network+0x32>
            net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ] = create_neuron(weights, net.layers[ prev_layer_idx ].num_neurons, curr_layer_idx, curr_neuron_idx );
 8001408:	68ec      	ldr	r4, [r5, #12]
 800140a:	9600      	str	r6, [sp, #0]
 800140c:	682a      	ldr	r2, [r5, #0]
 800140e:	464b      	mov	r3, r9
 8001410:	4651      	mov	r1, sl
 8001412:	a802      	add	r0, sp, #8
 8001414:	f7ff ff73 	bl	80012fe <create_neuron>
 8001418:	f10d 0c08 	add.w	ip, sp, #8
 800141c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001420:	fb0b 4406 	mla	r4, fp, r6, r4
 8001424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001426:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800142a:	e884 0003 	stmia.w	r4, {r0, r1}
        for (curr_neuron_idx = 0; curr_neuron_idx <net.layers[ curr_layer_idx ].num_neurons; curr_neuron_idx++){
 800142e:	3601      	adds	r6, #1
 8001430:	68ab      	ldr	r3, [r5, #8]
 8001432:	42b3      	cmp	r3, r6
 8001434:	dce8      	bgt.n	8001408 <init_network+0x7e>
    for (curr_layer_idx = 1; curr_layer_idx < num_layers; curr_layer_idx++){
 8001436:	f109 0901 	add.w	r9, r9, #1
 800143a:	3508      	adds	r5, #8
 800143c:	e7c4      	b.n	80013c8 <init_network+0x3e>
        for (curr_neuron_idx = 0; curr_neuron_idx <net.layers[ curr_layer_idx ].num_neurons; curr_neuron_idx++){
 800143e:	2600      	movs	r6, #0
 8001440:	e7f6      	b.n	8001430 <init_network+0xa6>
 8001442:	0000      	movs	r0, r0

08001444 <shuffle_mul_indices_masked>:

network shuffle_mul_indices_masked(network net, int layer_idx) {
 8001444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    unsigned int s1[7] = {1, 1, 1, 3, 2, 1, 4};
 8001448:	4c22      	ldr	r4, [pc, #136]	; (80014d4 <shuffle_mul_indices_masked+0x90>)
network shuffle_mul_indices_masked(network net, int layer_idx) {
 800144a:	b093      	sub	sp, #76	; 0x4c
 800144c:	af02      	add	r7, sp, #8
 800144e:	469c      	mov	ip, r3
 8001450:	4696      	mov	lr, r2
 8001452:	e887 0006 	stmia.w	r7, {r1, r2}
 8001456:	4606      	mov	r6, r0
    unsigned int s1[7] = {1, 1, 1, 3, 2, 1, 4};
 8001458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800145a:	ad04      	add	r5, sp, #16
 800145c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800145e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    unsigned int s2[7] = {1, 1, 1, 3, 3, 1, 2};
 8001462:	340c      	adds	r4, #12
    unsigned int s1[7] = {1, 1, 1, 3, 2, 1, 4};
 8001464:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    unsigned int s2[7] = {1, 1, 1, 3, 3, 1, 2};
 8001468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800146a:	ad0b      	add	r5, sp, #44	; 0x2c
 800146c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800146e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    unsigned int length = 0;
    unsigned int num_of_neurons = net.layers[ layer_idx ].num_neurons; 
 8001472:	f85e 403c 	ldr.w	r4, [lr, ip, lsl #3]
    unsigned int s2[7] = {1, 1, 1, 3, 3, 1, 2};
 8001476:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    unsigned int num_of_neurons = net.layers[ layer_idx ].num_neurons; 
 800147a:	eb0e 08cc 	add.w	r8, lr, ip, lsl #3
    unsigned int length = 0;
 800147e:	2500      	movs	r5, #0
    while (num_of_neurons > 0) {
 8001480:	b96c      	cbnz	r4, 800149e <shuffle_mul_indices_masked+0x5a>
        num_of_neurons >>= 1;
        length++;
    }
    if (layer_idx > 0 && layer_idx < net.num_layers) {
 8001482:	f1bc 0f00 	cmp.w	ip, #0
 8001486:	dd02      	ble.n	800148e <shuffle_mul_indices_masked+0x4a>
 8001488:	9b02      	ldr	r3, [sp, #8]
 800148a:	4563      	cmp	r3, ip
 800148c:	dc1e      	bgt.n	80014cc <shuffle_mul_indices_masked+0x88>
        for (int i = 0; i < net.layers[ layer_idx ].num_neurons; i++){
            fisher_yates_masked(net.layers[ layer_idx ].neurons[ i ].mul_indices, net.layers[ layer_idx ].neurons[ i ].num_weights, s1, s2, length);
        }
    }
    return net;
 800148e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8001492:	e886 0003 	stmia.w	r6, {r0, r1}
}
 8001496:	4630      	mov	r0, r6
 8001498:	b013      	add	sp, #76	; 0x4c
 800149a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        num_of_neurons >>= 1;
 800149e:	0864      	lsrs	r4, r4, #1
        length++;
 80014a0:	3501      	adds	r5, #1
 80014a2:	e7ed      	b.n	8001480 <shuffle_mul_indices_masked+0x3c>
            fisher_yates_masked(net.layers[ layer_idx ].neurons[ i ].mul_indices, net.layers[ layer_idx ].neurons[ i ].num_weights, s1, s2, length);
 80014a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80014a8:	9500      	str	r5, [sp, #0]
 80014aa:	fb09 f104 	mul.w	r1, r9, r4
 80014ae:	eb00 0c01 	add.w	ip, r0, r1
 80014b2:	ab0b      	add	r3, sp, #44	; 0x2c
 80014b4:	5841      	ldr	r1, [r0, r1]
 80014b6:	f8dc 0014 	ldr.w	r0, [ip, #20]
 80014ba:	aa04      	add	r2, sp, #16
 80014bc:	f7ff fecf 	bl	800125e <fisher_yates_masked>
        for (int i = 0; i < net.layers[ layer_idx ].num_neurons; i++){
 80014c0:	3401      	adds	r4, #1
 80014c2:	f8d8 3000 	ldr.w	r3, [r8]
 80014c6:	42a3      	cmp	r3, r4
 80014c8:	dcec      	bgt.n	80014a4 <shuffle_mul_indices_masked+0x60>
 80014ca:	e7e0      	b.n	800148e <shuffle_mul_indices_masked+0x4a>
            fisher_yates_masked(net.layers[ layer_idx ].neurons[ i ].mul_indices, net.layers[ layer_idx ].neurons[ i ].num_weights, s1, s2, length);
 80014cc:	f04f 0918 	mov.w	r9, #24
 80014d0:	e7f7      	b.n	80014c2 <shuffle_mul_indices_masked+0x7e>
 80014d2:	bf00      	nop
 80014d4:	08003e7c 	.word	0x08003e7c

080014d8 <forward_shuffled>:
        }
    }
    return net;
}

network forward_shuffled(network net) {
 80014d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014dc:	b089      	sub	sp, #36	; 0x24
 80014de:	ab02      	add	r3, sp, #8
 80014e0:	e883 0006 	stmia.w	r3, {r1, r2}
    volatile int curr_layer_idx, curr_neuron_idx, prev_layer_neuron_idx;
    //volatile float a = 12.3412f;
    // for each layer
    for (curr_layer_idx=1; curr_layer_idx < net.num_layers; curr_layer_idx++){
 80014e4:	2301      	movs	r3, #1
network forward_shuffled(network net) {
 80014e6:	4607      	mov	r7, r0
 80014e8:	4688      	mov	r8, r1
 80014ea:	4614      	mov	r4, r2
    for (curr_layer_idx=1; curr_layer_idx < net.num_layers; curr_layer_idx++){
 80014ec:	9305      	str	r3, [sp, #20]
            }
            //get a values
            net.layers[curr_layer_idx].neurons[ curr_neuron_idx ].a = net.layers[curr_layer_idx].neurons[ curr_neuron_idx ].z;
            //apply relu
            if(curr_layer_idx < net.num_layers - 1){
                if((net.layers[curr_layer_idx].neurons[ curr_neuron_idx ].z) < 0)
 80014ee:	f04f 0a00 	mov.w	sl, #0
    for (curr_layer_idx=1; curr_layer_idx < net.num_layers; curr_layer_idx++){
 80014f2:	9b05      	ldr	r3, [sp, #20]
 80014f4:	4543      	cmp	r3, r8
 80014f6:	db05      	blt.n	8001504 <forward_shuffled+0x2c>
                net.layers[curr_layer_idx].neurons[ curr_neuron_idx ].a = 1/(1+exp(-net.layers[curr_layer_idx].neurons[ curr_neuron_idx ].z));
            }
        }
    }
    return net;
 80014f8:	4638      	mov	r0, r7
    return net;
 80014fa:	e9c7 8400 	strd	r8, r4, [r7]
 80014fe:	b009      	add	sp, #36	; 0x24
 8001500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int prev_layer_idx = curr_layer_idx - 1;
 8001504:	9e05      	ldr	r6, [sp, #20]
        for (curr_neuron_idx=0; curr_neuron_idx < net.layers[ curr_layer_idx ].num_neurons; curr_neuron_idx++){   
 8001506:	2300      	movs	r3, #0
        int prev_layer_idx = curr_layer_idx - 1;
 8001508:	3e01      	subs	r6, #1
        for (curr_neuron_idx=0; curr_neuron_idx < net.layers[ curr_layer_idx ].num_neurons; curr_neuron_idx++){   
 800150a:	9306      	str	r3, [sp, #24]
            for (prev_layer_neuron_idx = 0; prev_layer_neuron_idx < net.layers[ prev_layer_idx ].num_neurons; prev_layer_neuron_idx++){
 800150c:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
            net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].z = net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].bias;
 8001510:	2518      	movs	r5, #24
        for (curr_neuron_idx=0; curr_neuron_idx < net.layers[ curr_layer_idx ].num_neurons; curr_neuron_idx++){   
 8001512:	9a05      	ldr	r2, [sp, #20]
 8001514:	9b06      	ldr	r3, [sp, #24]
 8001516:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 800151a:	429a      	cmp	r2, r3
 800151c:	dc03      	bgt.n	8001526 <forward_shuffled+0x4e>
    for (curr_layer_idx=1; curr_layer_idx < net.num_layers; curr_layer_idx++){
 800151e:	9b05      	ldr	r3, [sp, #20]
 8001520:	3301      	adds	r3, #1
 8001522:	9305      	str	r3, [sp, #20]
 8001524:	e7e5      	b.n	80014f2 <forward_shuffled+0x1a>
            net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].z = net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].bias;
 8001526:	9905      	ldr	r1, [sp, #20]
 8001528:	f8dd c018 	ldr.w	ip, [sp, #24]
 800152c:	9805      	ldr	r0, [sp, #20]
 800152e:	9a06      	ldr	r2, [sp, #24]
 8001530:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8001534:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001538:	6843      	ldr	r3, [r0, #4]
 800153a:	fb05 3302 	mla	r3, r5, r2, r3
 800153e:	684a      	ldr	r2, [r1, #4]
 8001540:	fb05 220c 	mla	r2, r5, ip, r2
 8001544:	6892      	ldr	r2, [r2, #8]
 8001546:	60da      	str	r2, [r3, #12]
            for (prev_layer_neuron_idx = 0; prev_layer_neuron_idx < net.layers[ prev_layer_idx ].num_neurons; prev_layer_neuron_idx++){
 8001548:	2300      	movs	r3, #0
 800154a:	9307      	str	r3, [sp, #28]
 800154c:	6833      	ldr	r3, [r6, #0]
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	9a07      	ldr	r2, [sp, #28]
 8001552:	9b01      	ldr	r3, [sp, #4]
 8001554:	4293      	cmp	r3, r2
 8001556:	dc2f      	bgt.n	80015b8 <forward_shuffled+0xe0>
            net.layers[curr_layer_idx].neurons[ curr_neuron_idx ].a = net.layers[curr_layer_idx].neurons[ curr_neuron_idx ].z;
 8001558:	9905      	ldr	r1, [sp, #20]
 800155a:	f8dd c018 	ldr.w	ip, [sp, #24]
 800155e:	9805      	ldr	r0, [sp, #20]
 8001560:	9a06      	ldr	r2, [sp, #24]
 8001562:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8001566:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800156a:	6843      	ldr	r3, [r0, #4]
 800156c:	fb05 3302 	mla	r3, r5, r2, r3
 8001570:	684a      	ldr	r2, [r1, #4]
 8001572:	fb05 220c 	mla	r2, r5, ip, r2
 8001576:	68d2      	ldr	r2, [r2, #12]
 8001578:	611a      	str	r2, [r3, #16]
            if(curr_layer_idx < net.num_layers - 1){
 800157a:	9b05      	ldr	r3, [sp, #20]
 800157c:	f108 32ff 	add.w	r2, r8, #4294967295
 8001580:	429a      	cmp	r2, r3
                if((net.layers[curr_layer_idx].neurons[ curr_neuron_idx ].z) < 0)
 8001582:	9a05      	ldr	r2, [sp, #20]
 8001584:	9906      	ldr	r1, [sp, #24]
 8001586:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800158a:	6853      	ldr	r3, [r2, #4]
 800158c:	fb05 3301 	mla	r3, r5, r1, r3
            if(curr_layer_idx < net.num_layers - 1){
 8001590:	dd5d      	ble.n	800164e <forward_shuffled+0x176>
                if((net.layers[curr_layer_idx].neurons[ curr_neuron_idx ].z) < 0)
 8001592:	68d8      	ldr	r0, [r3, #12]
 8001594:	4651      	mov	r1, sl
 8001596:	f7ff fcf9 	bl	8000f8c <__aeabi_fcmplt>
 800159a:	2800      	cmp	r0, #0
 800159c:	d045      	beq.n	800162a <forward_shuffled+0x152>
                    net.layers[curr_layer_idx].neurons[ curr_neuron_idx ].a = 0;
 800159e:	9a05      	ldr	r2, [sp, #20]
 80015a0:	9906      	ldr	r1, [sp, #24]
 80015a2:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80015a6:	6853      	ldr	r3, [r2, #4]
 80015a8:	fb05 3301 	mla	r3, r5, r1, r3
 80015ac:	f8c3 a010 	str.w	sl, [r3, #16]
        for (curr_neuron_idx=0; curr_neuron_idx < net.layers[ curr_layer_idx ].num_neurons; curr_neuron_idx++){   
 80015b0:	9b06      	ldr	r3, [sp, #24]
 80015b2:	3301      	adds	r3, #1
 80015b4:	9306      	str	r3, [sp, #24]
 80015b6:	e7ac      	b.n	8001512 <forward_shuffled+0x3a>
                int mul_index = net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].mul_indices[ prev_layer_neuron_idx ]; // CHANGE from forward - added this line
 80015b8:	9805      	ldr	r0, [sp, #20]
 80015ba:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80015be:	9b07      	ldr	r3, [sp, #28]
                    net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].z
 80015c0:	f8dd b014 	ldr.w	fp, [sp, #20]
 80015c4:	9a06      	ldr	r2, [sp, #24]
                        (net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].weights[ mul_index ]) // CHANGE from forward - .weights[ prev_layer_neuron_idx ] -> .weights[ mul_index ]
 80015c6:	9905      	ldr	r1, [sp, #20]
                    net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].z
 80015c8:	9200      	str	r2, [sp, #0]
                int mul_index = net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].mul_indices[ prev_layer_neuron_idx ]; // CHANGE from forward - added this line
 80015ca:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
                        (net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].weights[ mul_index ]) // CHANGE from forward - .weights[ prev_layer_neuron_idx ] -> .weights[ mul_index ]
 80015ce:	9a06      	ldr	r2, [sp, #24]
                int mul_index = net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].mul_indices[ prev_layer_neuron_idx ]; // CHANGE from forward - added this line
 80015d0:	6840      	ldr	r0, [r0, #4]
 80015d2:	fb05 0009 	mla	r0, r5, r9, r0
                        (net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].weights[ mul_index ]) // CHANGE from forward - .weights[ prev_layer_neuron_idx ] -> .weights[ mul_index ]
 80015d6:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
                int mul_index = net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].mul_indices[ prev_layer_neuron_idx ]; // CHANGE from forward - added this line
 80015da:	6940      	ldr	r0, [r0, #20]
                        (net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].weights[ mul_index ]) // CHANGE from forward - .weights[ prev_layer_neuron_idx ] -> .weights[ mul_index ]
 80015dc:	6849      	ldr	r1, [r1, #4]
 80015de:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].z =
 80015e2:	9805      	ldr	r0, [sp, #20]
 80015e4:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80015e8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
                        (net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].weights[ mul_index ]) // CHANGE from forward - .weights[ prev_layer_neuron_idx ] -> .weights[ mul_index ]
 80015ec:	fb05 1e02 	mla	lr, r5, r2, r1
                net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].z =
 80015f0:	6840      	ldr	r0, [r0, #4]
                        (net.layers[ prev_layer_idx ].neurons[ mul_index ].a) // CHANGE from forward - .neurons[ prev_layer_neuron_idx ].a -> .neurons[ mul_index ].a
 80015f2:	6871      	ldr	r1, [r6, #4]
                net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].z =
 80015f4:	fb05 0909 	mla	r9, r5, r9, r0
                        (net.layers[ prev_layer_idx ].neurons[ mul_index ].a) // CHANGE from forward - .neurons[ prev_layer_neuron_idx ].a -> .neurons[ mul_index ].a
 80015f8:	fb05 1103 	mla	r1, r5, r3, r1
                        (net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].weights[ mul_index ]) // CHANGE from forward - .weights[ prev_layer_neuron_idx ] -> .weights[ mul_index ]
 80015fc:	f8de 0004 	ldr.w	r0, [lr, #4]
                        *
 8001600:	6909      	ldr	r1, [r1, #16]
 8001602:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
                    net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].z
 8001606:	eb04 0bcb 	add.w	fp, r4, fp, lsl #3
                        *
 800160a:	f7fe fde1 	bl	80001d0 <__aeabi_fmul>
                    net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].z
 800160e:	f8db 1004 	ldr.w	r1, [fp, #4]
 8001612:	9b00      	ldr	r3, [sp, #0]
 8001614:	fb05 1203 	mla	r2, r5, r3, r1
                    +
 8001618:	68d1      	ldr	r1, [r2, #12]
 800161a:	f7ff fb61 	bl	8000ce0 <__addsf3>
            for (prev_layer_neuron_idx = 0; prev_layer_neuron_idx < net.layers[ prev_layer_idx ].num_neurons; prev_layer_neuron_idx++){
 800161e:	9a07      	ldr	r2, [sp, #28]
                net.layers[ curr_layer_idx ].neurons[ curr_neuron_idx ].z =
 8001620:	f8c9 000c 	str.w	r0, [r9, #12]
            for (prev_layer_neuron_idx = 0; prev_layer_neuron_idx < net.layers[ prev_layer_idx ].num_neurons; prev_layer_neuron_idx++){
 8001624:	3201      	adds	r2, #1
 8001626:	9207      	str	r2, [sp, #28]
 8001628:	e792      	b.n	8001550 <forward_shuffled+0x78>
                    net.layers[curr_layer_idx].neurons[ curr_neuron_idx ].a = net.layers[curr_layer_idx].neurons[ curr_neuron_idx ].z;
 800162a:	9905      	ldr	r1, [sp, #20]
 800162c:	f8dd c018 	ldr.w	ip, [sp, #24]
 8001630:	9805      	ldr	r0, [sp, #20]
 8001632:	9a06      	ldr	r2, [sp, #24]
 8001634:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8001638:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800163c:	6843      	ldr	r3, [r0, #4]
 800163e:	fb05 3302 	mla	r3, r5, r2, r3
 8001642:	684a      	ldr	r2, [r1, #4]
 8001644:	fb05 220c 	mla	r2, r5, ip, r2
 8001648:	68d2      	ldr	r2, [r2, #12]
 800164a:	611a      	str	r2, [r3, #16]
 800164c:	e7b0      	b.n	80015b0 <forward_shuffled+0xd8>
                net.layers[curr_layer_idx].neurons[ curr_neuron_idx ].a = 1/(1+exp(-net.layers[curr_layer_idx].neurons[ curr_neuron_idx ].z));
 800164e:	68d8      	ldr	r0, [r3, #12]
 8001650:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8001654:	f7fe ffd4 	bl	8000600 <__aeabi_f2d>
 8001658:	f001 f87a 	bl	8002750 <exp>
 800165c:	9b05      	ldr	r3, [sp, #20]
 800165e:	9a06      	ldr	r2, [sp, #24]
 8001660:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	fb05 3902 	mla	r9, r5, r2, r3
 800166a:	4b07      	ldr	r3, [pc, #28]	; (8001688 <forward_shuffled+0x1b0>)
 800166c:	2200      	movs	r2, #0
 800166e:	f7fe fe69 	bl	8000344 <__adddf3>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	2000      	movs	r0, #0
 8001678:	4903      	ldr	r1, [pc, #12]	; (8001688 <forward_shuffled+0x1b0>)
 800167a:	f7ff f943 	bl	8000904 <__aeabi_ddiv>
 800167e:	f7ff fad9 	bl	8000c34 <__aeabi_d2f>
 8001682:	f8c9 0010 	str.w	r0, [r9, #16]
 8001686:	e793      	b.n	80015b0 <forward_shuffled+0xd8>
 8001688:	3ff00000 	.word	0x3ff00000

0800168c <ss_crc>:


// 0xA6 formerly 
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
 800168c:	4603      	mov	r3, r0
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
 800168e:	4401      	add	r1, r0
	uint8_t crc = 0x00;
 8001690:	2000      	movs	r0, #0
	while (len--) {
 8001692:	428b      	cmp	r3, r1
 8001694:	d100      	bne.n	8001698 <ss_crc+0xc>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
		}
	}
	return crc;

}
 8001696:	4770      	bx	lr
		crc ^= *buf++;
 8001698:	f813 2b01 	ldrb.w	r2, [r3], #1
 800169c:	4050      	eors	r0, r2
 800169e:	2208      	movs	r2, #8
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 80016a0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80016a4:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80016a8:	bf18      	it	ne
 80016aa:	f080 004d 	eorne.w	r0, r0, #77	; 0x4d
		for (k = 0; k < 8; k++) {
 80016ae:	3a01      	subs	r2, #1
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 80016b0:	b2c0      	uxtb	r0, r0
		for (k = 0; k < 8; k++) {
 80016b2:	d1f5      	bne.n	80016a0 <ss_crc+0x14>
 80016b4:	e7ed      	b.n	8001692 <ss_crc+0x6>

080016b6 <stuff_data>:
    return 0x00;

}

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
 80016b6:	b530      	push	{r4, r5, lr}
	uint8_t i = 1;
	uint8_t last = 0;
 80016b8:	2200      	movs	r2, #0
 80016ba:	4604      	mov	r4, r0
	uint8_t i = 1;
 80016bc:	2301      	movs	r3, #1
	for (; i < len; i++) {
 80016be:	428b      	cmp	r3, r1
 80016c0:	d301      	bcc.n	80016c6 <stuff_data+0x10>
			buf[last] = i - last;
			last = i;
		}
	}
	return 0x00;
}
 80016c2:	2000      	movs	r0, #0
 80016c4:	bd30      	pop	{r4, r5, pc}
		if (buf[i] == FRAME_BYTE) {
 80016c6:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80016ca:	b915      	cbnz	r5, 80016d2 <stuff_data+0x1c>
			buf[last] = i - last;
 80016cc:	1a9d      	subs	r5, r3, r2
 80016ce:	5485      	strb	r5, [r0, r2]
 80016d0:	461a      	mov	r2, r3
	for (; i < len; i++) {
 80016d2:	3301      	adds	r3, #1
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	e7f2      	b.n	80016be <stuff_data+0x8>

080016d8 <unstuff_data>:

uint8_t unstuff_data(uint8_t *buf, uint8_t len)
{
 80016d8:	b510      	push	{r4, lr}
	uint8_t next = buf[0];
 80016da:	7802      	ldrb	r2, [r0, #0]
	buf[0] = 0x00;
 80016dc:	2400      	movs	r4, #0
{
 80016de:	4603      	mov	r3, r0
	buf[0] = 0x00;
 80016e0:	7004      	strb	r4, [r0, #0]
	uint8_t next = buf[0];
 80016e2:	4610      	mov	r0, r2
	//len -= 1;
	uint8_t tmp = next;
	while ((next < len) && tmp != 0) {
 80016e4:	4288      	cmp	r0, r1
 80016e6:	d200      	bcs.n	80016ea <unstuff_data+0x12>
 80016e8:	b902      	cbnz	r2, 80016ec <unstuff_data+0x14>
		tmp = buf[next];
		buf[next] = FRAME_BYTE;
		next += tmp;
	}
	return next;
}
 80016ea:	bd10      	pop	{r4, pc}
		tmp = buf[next];
 80016ec:	5c1a      	ldrb	r2, [r3, r0]
		buf[next] = FRAME_BYTE;
 80016ee:	541c      	strb	r4, [r3, r0]
		next += tmp;
 80016f0:	4410      	add	r0, r2
 80016f2:	b2c0      	uxtb	r0, r0
 80016f4:	e7f6      	b.n	80016e4 <unstuff_data+0xc>
 80016f6:	0000      	movs	r0, r0

080016f8 <simpleserial_addcmd>:
	simpleserial_addcmd('v', 0, check_version);
    simpleserial_addcmd('w', 0, ss_get_commands);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*))
{
 80016f8:	b538      	push	{r3, r4, r5, lr}
	if(num_commands >= MAX_SS_CMDS) {
 80016fa:	4d0b      	ldr	r5, [pc, #44]	; (8001728 <simpleserial_addcmd+0x30>)
 80016fc:	682b      	ldr	r3, [r5, #0]
 80016fe:	2b0f      	cmp	r3, #15
 8001700:	dd04      	ble.n	800170c <simpleserial_addcmd+0x14>
		putch('a');
 8001702:	2061      	movs	r0, #97	; 0x61
		return 1;
	}

	if(len >= MAX_SS_LEN) {
		putch('b');
 8001704:	f000 f9b2 	bl	8001a6c <putch>
		return 1;
 8001708:	2001      	movs	r0, #1
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;

	return 0;
}
 800170a:	bd38      	pop	{r3, r4, r5, pc}
	if(len >= MAX_SS_LEN) {
 800170c:	29ff      	cmp	r1, #255	; 0xff
 800170e:	d901      	bls.n	8001714 <simpleserial_addcmd+0x1c>
		putch('b');
 8001710:	2062      	movs	r0, #98	; 0x62
 8001712:	e7f7      	b.n	8001704 <simpleserial_addcmd+0xc>
	commands[num_commands].c   = c;
 8001714:	240c      	movs	r4, #12
 8001716:	fb04 5403 	mla	r4, r4, r3, r5
	num_commands++;
 800171a:	3301      	adds	r3, #1
	commands[num_commands].c   = c;
 800171c:	7120      	strb	r0, [r4, #4]
	commands[num_commands].fp  = fp;
 800171e:	e9c4 1202 	strd	r1, r2, [r4, #8]
	num_commands++;
 8001722:	602b      	str	r3, [r5, #0]
	return 0;
 8001724:	2000      	movs	r0, #0
 8001726:	e7f0      	b.n	800170a <simpleserial_addcmd+0x12>
 8001728:	200001bc 	.word	0x200001bc

0800172c <simpleserial_init>:
{
 800172c:	b508      	push	{r3, lr}
	simpleserial_addcmd('v', 0, check_version);
 800172e:	4a06      	ldr	r2, [pc, #24]	; (8001748 <simpleserial_init+0x1c>)
 8001730:	2100      	movs	r1, #0
 8001732:	2076      	movs	r0, #118	; 0x76
 8001734:	f7ff ffe0 	bl	80016f8 <simpleserial_addcmd>
}
 8001738:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    simpleserial_addcmd('w', 0, ss_get_commands);
 800173c:	4a03      	ldr	r2, [pc, #12]	; (800174c <simpleserial_init+0x20>)
 800173e:	2100      	movs	r1, #0
 8001740:	2077      	movs	r0, #119	; 0x77
 8001742:	f7ff bfd9 	b.w	80016f8 <simpleserial_addcmd>
 8001746:	bf00      	nop
 8001748:	080017a7 	.word	0x080017a7
 800174c:	080017c5 	.word	0x080017c5

08001750 <simpleserial_put>:
	simpleserial_put('e', 0x01, &err);
	return;
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8001750:	b570      	push	{r4, r5, r6, lr}
 8001752:	b0c0      	sub	sp, #256	; 0x100
 8001754:	460c      	mov	r4, r1
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 8001756:	2500      	movs	r5, #0
{
 8001758:	4611      	mov	r1, r2
	data_buf[1] = c;
 800175a:	f88d 0001 	strb.w	r0, [sp, #1]
	data_buf[2] = size;
	int i = 0;
	for (; i < size; i++) {
		data_buf[i + 3] = output[i];
 800175e:	4622      	mov	r2, r4
 8001760:	f10d 0003 	add.w	r0, sp, #3
	data_buf[2] = size;
 8001764:	f88d 4002 	strb.w	r4, [sp, #2]
	data_buf[0] = 0x00;
 8001768:	f88d 5000 	strb.w	r5, [sp]
		data_buf[i + 3] = output[i];
 800176c:	f001 fa42 	bl	8002bf4 <memcpy>
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8001770:	1ca1      	adds	r1, r4, #2
 8001772:	b2c9      	uxtb	r1, r1
 8001774:	f10d 0001 	add.w	r0, sp, #1
 8001778:	f7ff ff88 	bl	800168c <ss_crc>
 800177c:	eb0d 0304 	add.w	r3, sp, r4
	data_buf[i + 4] = 0x00;
 8001780:	1d26      	adds	r6, r4, #4
	stuff_data(data_buf, i + 5);
 8001782:	1d61      	adds	r1, r4, #5
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8001784:	70d8      	strb	r0, [r3, #3]
	stuff_data(data_buf, i + 5);
 8001786:	b2c9      	uxtb	r1, r1
 8001788:	4668      	mov	r0, sp
	data_buf[i + 4] = 0x00;
 800178a:	f80d 5006 	strb.w	r5, [sp, r6]
	stuff_data(data_buf, i + 5);
 800178e:	f7ff ff92 	bl	80016b6 <stuff_data>
	for (int i = 0; i < size + 5; i++) {
 8001792:	466c      	mov	r4, sp
		putch(data_buf[i]);
 8001794:	f814 0b01 	ldrb.w	r0, [r4], #1
	for (int i = 0; i < size + 5; i++) {
 8001798:	3501      	adds	r5, #1
		putch(data_buf[i]);
 800179a:	f000 f967 	bl	8001a6c <putch>
	for (int i = 0; i < size + 5; i++) {
 800179e:	42ae      	cmp	r6, r5
 80017a0:	daf8      	bge.n	8001794 <simpleserial_put+0x44>
	}
}
 80017a2:	b040      	add	sp, #256	; 0x100
 80017a4:	bd70      	pop	{r4, r5, r6, pc}

080017a6 <check_version>:
{
 80017a6:	b507      	push	{r0, r1, r2, lr}
	uint8_t ver = SS_VER;
 80017a8:	2303      	movs	r3, #3
	simpleserial_put('r', 1, &ver);
 80017aa:	f10d 0207 	add.w	r2, sp, #7
 80017ae:	2101      	movs	r1, #1
 80017b0:	2072      	movs	r0, #114	; 0x72
	uint8_t ver = SS_VER;
 80017b2:	f88d 3007 	strb.w	r3, [sp, #7]
	simpleserial_put('r', 1, &ver);
 80017b6:	f7ff ffcb 	bl	8001750 <simpleserial_put>
}
 80017ba:	2000      	movs	r0, #0
 80017bc:	b003      	add	sp, #12
 80017be:	f85d fb04 	ldr.w	pc, [sp], #4
 80017c2:	0000      	movs	r0, r0

080017c4 <ss_get_commands>:
{
 80017c4:	b530      	push	{r4, r5, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80017c6:	480c      	ldr	r0, [pc, #48]	; (80017f8 <ss_get_commands+0x34>)
 80017c8:	7801      	ldrb	r1, [r0, #0]
{
 80017ca:	b085      	sub	sp, #20
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80017cc:	2200      	movs	r2, #0
        cmd_chars[i] = commands[i].c;
 80017ce:	240c      	movs	r4, #12
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80017d0:	b2d3      	uxtb	r3, r2
 80017d2:	428b      	cmp	r3, r1
 80017d4:	f102 0201 	add.w	r2, r2, #1
 80017d8:	db06      	blt.n	80017e8 <ss_get_commands+0x24>
    simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
 80017da:	466a      	mov	r2, sp
 80017dc:	2072      	movs	r0, #114	; 0x72
 80017de:	f7ff ffb7 	bl	8001750 <simpleserial_put>
}
 80017e2:	2000      	movs	r0, #0
 80017e4:	b005      	add	sp, #20
 80017e6:	bd30      	pop	{r4, r5, pc}
        cmd_chars[i] = commands[i].c;
 80017e8:	ad04      	add	r5, sp, #16
 80017ea:	441d      	add	r5, r3
 80017ec:	fb04 0303 	mla	r3, r4, r3, r0
 80017f0:	791b      	ldrb	r3, [r3, #4]
 80017f2:	f805 3c10 	strb.w	r3, [r5, #-16]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80017f6:	e7eb      	b.n	80017d0 <ss_get_commands+0xc>
 80017f8:	200001bc 	.word	0x200001bc

080017fc <simpleserial_get>:
{
 80017fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001800:	b0c2      	sub	sp, #264	; 0x108
	uint8_t err = 0;
 8001802:	2500      	movs	r5, #0
 8001804:	ae02      	add	r6, sp, #8
 8001806:	f88d 5007 	strb.w	r5, [sp, #7]
	for (int i = 0; i < 4; i++) {
 800180a:	4634      	mov	r4, r6
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 800180c:	f000 f914 	bl	8001a38 <getch>
 8001810:	f806 0b01 	strb.w	r0, [r6], #1
		if (data_buf[i] == FRAME_BYTE) {
 8001814:	b958      	cbnz	r0, 800182e <simpleserial_get+0x32>
			err = SS_ERR_FRAME_BYTE;
 8001816:	2305      	movs	r3, #5
		err = SS_ERR_CRC;
 8001818:	f88d 3007 	strb.w	r3, [sp, #7]
	simpleserial_put('e', 0x01, &err);
 800181c:	f10d 0207 	add.w	r2, sp, #7
 8001820:	2101      	movs	r1, #1
 8001822:	2065      	movs	r0, #101	; 0x65
 8001824:	f7ff ff94 	bl	8001750 <simpleserial_put>
}
 8001828:	b042      	add	sp, #264	; 0x108
 800182a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int i = 0; i < 4; i++) {
 800182e:	3501      	adds	r5, #1
 8001830:	2d04      	cmp	r5, #4
 8001832:	d1eb      	bne.n	800180c <simpleserial_get+0x10>
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8001834:	4629      	mov	r1, r5
 8001836:	4620      	mov	r0, r4
 8001838:	f7ff ff4e 	bl	80016d8 <unstuff_data>
	for(c = 0; c < num_commands; c++)
 800183c:	4f25      	ldr	r7, [pc, #148]	; (80018d4 <simpleserial_get+0xd8>)
		if(commands[c].c == data_buf[1])
 800183e:	7861      	ldrb	r1, [r4, #1]
	for(c = 0; c < num_commands; c++)
 8001840:	683a      	ldr	r2, [r7, #0]
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8001842:	4680      	mov	r8, r0
	for(c = 0; c < num_commands; c++)
 8001844:	2300      	movs	r3, #0
		if(commands[c].c == data_buf[1])
 8001846:	200c      	movs	r0, #12
	for(c = 0; c < num_commands; c++)
 8001848:	fa5f f983 	uxtb.w	r9, r3
 800184c:	4591      	cmp	r9, r2
 800184e:	db02      	blt.n	8001856 <simpleserial_get+0x5a>
	if (c == num_commands) {
 8001850:	d107      	bne.n	8001862 <simpleserial_get+0x66>
		err = SS_ERR_CMD;
 8001852:	2301      	movs	r3, #1
 8001854:	e7e0      	b.n	8001818 <simpleserial_get+0x1c>
		if(commands[c].c == data_buf[1])
 8001856:	fb00 7609 	mla	r6, r0, r9, r7
 800185a:	3301      	adds	r3, #1
 800185c:	7936      	ldrb	r6, [r6, #4]
 800185e:	428e      	cmp	r6, r1
 8001860:	d1f2      	bne.n	8001848 <simpleserial_get+0x4c>
	if ((data_buf[3] + 5) < next_frame) {
 8001862:	78e3      	ldrb	r3, [r4, #3]
 8001864:	3305      	adds	r3, #5
 8001866:	4543      	cmp	r3, r8
 8001868:	da02      	bge.n	8001870 <simpleserial_get+0x74>
		err = SS_ERR_LEN;
 800186a:	2304      	movs	r3, #4
 800186c:	e7d4      	b.n	8001818 <simpleserial_get+0x1c>
 800186e:	4635      	mov	r5, r6
		data_buf[i] = getch();
 8001870:	f000 f8e2 	bl	8001a38 <getch>
 8001874:	5560      	strb	r0, [r4, r5]
		if (data_buf[i] == FRAME_BYTE) {
 8001876:	2800      	cmp	r0, #0
 8001878:	d0cd      	beq.n	8001816 <simpleserial_get+0x1a>
	for (; i < data_buf[3] + 5; i++) {
 800187a:	78e3      	ldrb	r3, [r4, #3]
 800187c:	1c6e      	adds	r6, r5, #1
 800187e:	3304      	adds	r3, #4
 8001880:	42b3      	cmp	r3, r6
 8001882:	daf4      	bge.n	800186e <simpleserial_get+0x72>
	data_buf[i] = getch();
 8001884:	f000 f8d8 	bl	8001a38 <getch>
 8001888:	55a0      	strb	r0, [r4, r6]
	if (data_buf[i] != FRAME_BYTE) {
 800188a:	2800      	cmp	r0, #0
 800188c:	d1ed      	bne.n	800186a <simpleserial_get+0x6e>
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 800188e:	f1c8 0101 	rsb	r1, r8, #1
 8001892:	fa51 f186 	uxtab	r1, r1, r6
 8001896:	b2c9      	uxtb	r1, r1
 8001898:	fa5f fa86 	uxtb.w	sl, r6
 800189c:	eb04 0008 	add.w	r0, r4, r8
 80018a0:	f7ff ff1a 	bl	80016d8 <unstuff_data>
	uint8_t crc = ss_crc(data_buf+1, i-2);
 80018a4:	f1aa 0102 	sub.w	r1, sl, #2
 80018a8:	b2c9      	uxtb	r1, r1
 80018aa:	f10d 0009 	add.w	r0, sp, #9
 80018ae:	f7ff feed 	bl	800168c <ss_crc>
	if (crc != data_buf[i-1]) {
 80018b2:	5d63      	ldrb	r3, [r4, r5]
 80018b4:	4283      	cmp	r3, r0
 80018b6:	d001      	beq.n	80018bc <simpleserial_get+0xc0>
		err = SS_ERR_CRC;
 80018b8:	2302      	movs	r3, #2
 80018ba:	e7ad      	b.n	8001818 <simpleserial_get+0x1c>
	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 80018bc:	230c      	movs	r3, #12
 80018be:	fb03 7709 	mla	r7, r3, r9, r7
 80018c2:	78e2      	ldrb	r2, [r4, #3]
 80018c4:	68fd      	ldr	r5, [r7, #12]
 80018c6:	78a1      	ldrb	r1, [r4, #2]
 80018c8:	7860      	ldrb	r0, [r4, #1]
 80018ca:	446b      	add	r3, sp
 80018cc:	47a8      	blx	r5
 80018ce:	f88d 0007 	strb.w	r0, [sp, #7]
 80018d2:	e7a3      	b.n	800181c <simpleserial_get+0x20>
 80018d4:	200001bc 	.word	0x200001bc

080018d8 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 80018d8:	b570      	push	{r4, r5, r6, lr}
 80018da:	b096      	sub	sp, #88	; 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80018dc:	2400      	movs	r4, #0
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80018de:	2603      	movs	r6, #3
 80018e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80018e4:	a80c      	add	r0, sp, #48	; 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80018e6:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80018e8:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80018ec:	9410      	str	r4, [sp, #64]	; 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 80018ee:	9414      	str	r4, [sp, #80]	; 0x50
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80018f0:	f000 f8d4 	bl	8001a9c <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80018f4:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 80018f6:	4621      	mov	r1, r4
 80018f8:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80018fa:	e9cd 3502 	strd	r3, r5, [sp, #8]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018fe:	e9cd 4404 	strd	r4, r4, [sp, #16]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001902:	9406      	str	r4, [sp, #24]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8001904:	f000 fb38 	bl	8001f78 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <platform_init+0x78>)
 800190a:	695a      	ldr	r2, [r3, #20]
 800190c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001910:	615a      	str	r2, [r3, #20]
 8001912:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001914:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001918:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 800191c:	4c0d      	ldr	r4, [pc, #52]	; (8001954 <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8001922:	a907      	add	r1, sp, #28
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8001924:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8001928:	4620      	mov	r0, r4
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800192a:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 800192e:	f000 fbc9 	bl	80020c4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8001932:	462a      	mov	r2, r5
 8001934:	4620      	mov	r0, r4
 8001936:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800193a:	f000 fc87 	bl	800224c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 800193e:	462a      	mov	r2, r5
 8001940:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001944:	4620      	mov	r0, r4
 8001946:	f000 fc81 	bl	800224c <HAL_GPIO_WritePin>
#endif
}
 800194a:	b016      	add	sp, #88	; 0x58
 800194c:	bd70      	pop	{r4, r5, r6, pc}
 800194e:	bf00      	nop
 8001950:	40021000 	.word	0x40021000
 8001954:	48000800 	.word	0x48000800

08001958 <init_uart>:

void init_uart(void)
{
 8001958:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 800195a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
{
 800195e:	b088      	sub	sp, #32
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GpioInit.Pull      = GPIO_PULLUP;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001966:	2101      	movs	r1, #1
 8001968:	2303      	movs	r3, #3
 800196a:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 800196e:	4c16      	ldr	r4, [pc, #88]	; (80019c8 <init_uart+0x70>)
  GpioInit.Alternate = GPIO_AF7_USART1;
 8001970:	2307      	movs	r3, #7
 8001972:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 8001974:	6963      	ldr	r3, [r4, #20]
 8001976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197a:	6163      	str	r3, [r4, #20]
 800197c:	6963      	ldr	r3, [r4, #20]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8001984:	a903      	add	r1, sp, #12
 8001986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __GPIOA_CLK_ENABLE();
 800198a:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 800198c:	f000 fb9a 	bl	80020c4 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8001990:	480e      	ldr	r0, [pc, #56]	; (80019cc <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 8001992:	f8df c03c 	ldr.w	ip, [pc, #60]	; 80019d0 <init_uart+0x78>
 8001996:	f44f 3361 	mov.w	r3, #230400	; 0x38400
 800199a:	e9c0 c300 	strd	ip, r3, [r0]
  #else
  UartHandle.Init.BaudRate   = 38400;
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800199e:	2300      	movs	r3, #0
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80019a0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 80019a4:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80019a6:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80019a8:	230c      	movs	r3, #12
 80019aa:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 80019ac:	69a3      	ldr	r3, [r4, #24]
 80019ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b2:	61a3      	str	r3, [r4, #24]
 80019b4:	69a3      	ldr	r3, [r4, #24]
 80019b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ba:	9302      	str	r3, [sp, #8]
 80019bc:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 80019be:	f000 fd99 	bl	80024f4 <HAL_UART_Init>
}
 80019c2:	b008      	add	sp, #32
 80019c4:	bd10      	pop	{r4, pc}
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	20000280 	.word	0x20000280
 80019d0:	40013800 	.word	0x40013800

080019d4 <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d4:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <trigger_setup+0x44>)
{
 80019d6:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d8:	695a      	ldr	r2, [r3, #20]
 80019da:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80019de:	615a      	str	r2, [r3, #20]
 80019e0:	695b      	ldr	r3, [r3, #20]
{
 80019e2:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80019ec:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80019f0:	2301      	movs	r3, #1
 80019f2:	e9cd 4301 	strd	r4, r3, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80019f6:	2500      	movs	r5, #0
 80019f8:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 80019fa:	a901      	add	r1, sp, #4
 80019fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001a00:	e9cd 5303 	strd	r5, r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8001a04:	f000 fb5e 	bl	80020c4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8001a08:	462a      	mov	r2, r5
 8001a0a:	4621      	mov	r1, r4
 8001a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a10:	f000 fc1c 	bl	800224c <HAL_GPIO_WritePin>
}
 8001a14:	b007      	add	sp, #28
 8001a16:	bd30      	pop	{r4, r5, pc}
 8001a18:	40021000 	.word	0x40021000

08001a1c <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a26:	f000 bc11 	b.w	800224c <HAL_GPIO_WritePin>

08001a2a <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a34:	f000 bc0a 	b.w	800224c <HAL_GPIO_WritePin>

08001a38 <getch>:
}

char getch(void)
{
 8001a38:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8001a3a:	4d0a      	ldr	r5, [pc, #40]	; (8001a64 <getch+0x2c>)
    USART1->ICR |= (1 << 3);
 8001a3c:	4c0a      	ldr	r4, [pc, #40]	; (8001a68 <getch+0x30>)
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8001a3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a42:	2201      	movs	r2, #1
 8001a44:	f10d 0107 	add.w	r1, sp, #7
 8001a48:	4628      	mov	r0, r5
 8001a4a:	f000 fdd4 	bl	80025f6 <HAL_UART_Receive>
 8001a4e:	b918      	cbnz	r0, 8001a58 <getch+0x20>
  //putch(d);
  return d;
}
 8001a50:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001a54:	b003      	add	sp, #12
 8001a56:	bd30      	pop	{r4, r5, pc}
    USART1->ICR |= (1 << 3);
 8001a58:	6a23      	ldr	r3, [r4, #32]
 8001a5a:	f043 0308 	orr.w	r3, r3, #8
 8001a5e:	6223      	str	r3, [r4, #32]
 8001a60:	e7ed      	b.n	8001a3e <getch+0x6>
 8001a62:	bf00      	nop
 8001a64:	20000280 	.word	0x20000280
 8001a68:	40013800 	.word	0x40013800

08001a6c <putch>:

void putch(char c)
{
 8001a6c:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8001a6e:	f241 3388 	movw	r3, #5000	; 0x1388
  uint8_t d  = c;
 8001a72:	f88d 0007 	strb.w	r0, [sp, #7]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8001a76:	2201      	movs	r2, #1
 8001a78:	f10d 0107 	add.w	r1, sp, #7
 8001a7c:	4802      	ldr	r0, [pc, #8]	; (8001a88 <putch+0x1c>)
 8001a7e:	f000 fd64 	bl	800254a <HAL_UART_Transmit>
}
 8001a82:	b003      	add	sp, #12
 8001a84:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a88:	20000280 	.word	0x20000280

08001a8c <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 8001a8c:	4b02      	ldr	r3, [pc, #8]	; (8001a98 <HAL_GetTick+0xc>)
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	1c42      	adds	r2, r0, #1
 8001a92:	601a      	str	r2, [r3, #0]
}
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	200002f0 	.word	0x200002f0

08001a9c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a9c:	6803      	ldr	r3, [r0, #0]
{
 8001a9e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa2:	07d9      	lsls	r1, r3, #31
{
 8001aa4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa6:	d411      	bmi.n	8001acc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aa8:	6823      	ldr	r3, [r4, #0]
 8001aaa:	079a      	lsls	r2, r3, #30
 8001aac:	f100 8086 	bmi.w	8001bbc <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab0:	6823      	ldr	r3, [r4, #0]
 8001ab2:	071e      	lsls	r6, r3, #28
 8001ab4:	f100 80f4 	bmi.w	8001ca0 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab8:	6823      	ldr	r3, [r4, #0]
 8001aba:	075d      	lsls	r5, r3, #29
 8001abc:	f100 8140 	bmi.w	8001d40 <HAL_RCC_OscConfig+0x2a4>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ac0:	69e2      	ldr	r2, [r4, #28]
 8001ac2:	2a00      	cmp	r2, #0
 8001ac4:	f040 81cb 	bne.w	8001e5e <HAL_RCC_OscConfig+0x3c2>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001ac8:	2000      	movs	r0, #0
 8001aca:	e021      	b.n	8001b10 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001acc:	499a      	ldr	r1, [pc, #616]	; (8001d38 <HAL_RCC_OscConfig+0x29c>)
 8001ace:	684b      	ldr	r3, [r1, #4]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d007      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ad8:	684b      	ldr	r3, [r1, #4]
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	2b08      	cmp	r3, #8
 8001ae0:	d119      	bne.n	8001b16 <HAL_RCC_OscConfig+0x7a>
 8001ae2:	684b      	ldr	r3, [r1, #4]
 8001ae4:	03db      	lsls	r3, r3, #15
 8001ae6:	d516      	bpl.n	8001b16 <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aec:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af0:	6809      	ldr	r1, [r1, #0]
 8001af2:	fa93 f3a3 	rbit	r3, r3
 8001af6:	fab3 f383 	clz	r3, r3
 8001afa:	f003 031f 	and.w	r3, r3, #31
 8001afe:	2201      	movs	r2, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	420b      	tst	r3, r1
 8001b06:	d0cf      	beq.n	8001aa8 <HAL_RCC_OscConfig+0xc>
 8001b08:	6863      	ldr	r3, [r4, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1cc      	bne.n	8001aa8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001b0e:	2001      	movs	r0, #1
}
 8001b10:	b002      	add	sp, #8
 8001b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b16:	6862      	ldr	r2, [r4, #4]
 8001b18:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001b1c:	d124      	bne.n	8001b68 <HAL_RCC_OscConfig+0xcc>
 8001b1e:	680b      	ldr	r3, [r1, #0]
 8001b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b24:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b26:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001b28:	68a0      	ldr	r0, [r4, #8]
 8001b2a:	f023 030f 	bic.w	r3, r3, #15
 8001b2e:	4303      	orrs	r3, r0
 8001b30:	62cb      	str	r3, [r1, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b32:	b34a      	cbz	r2, 8001b88 <HAL_RCC_OscConfig+0xec>
        tickstart = HAL_GetTick();
 8001b34:	f7ff ffaa 	bl	8001a8c <HAL_GetTick>
 8001b38:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001b3c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3e:	2701      	movs	r7, #1
 8001b40:	fa96 f3a6 	rbit	r3, r6
 8001b44:	680a      	ldr	r2, [r1, #0]
 8001b46:	fa96 f3a6 	rbit	r3, r6
 8001b4a:	fab3 f383 	clz	r3, r3
 8001b4e:	f003 031f 	and.w	r3, r3, #31
 8001b52:	fa07 f303 	lsl.w	r3, r7, r3
 8001b56:	4213      	tst	r3, r2
 8001b58:	d1a6      	bne.n	8001aa8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b5a:	f7ff ff97 	bl	8001a8c <HAL_GetTick>
 8001b5e:	1b40      	subs	r0, r0, r5
 8001b60:	2864      	cmp	r0, #100	; 0x64
 8001b62:	d9ed      	bls.n	8001b40 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8001b64:	2003      	movs	r0, #3
 8001b66:	e7d3      	b.n	8001b10 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b68:	680b      	ldr	r3, [r1, #0]
 8001b6a:	b932      	cbnz	r2, 8001b7a <HAL_RCC_OscConfig+0xde>
 8001b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b70:	600b      	str	r3, [r1, #0]
 8001b72:	680b      	ldr	r3, [r1, #0]
 8001b74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b78:	e7d4      	b.n	8001b24 <HAL_RCC_OscConfig+0x88>
 8001b7a:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001b7e:	d1f5      	bne.n	8001b6c <HAL_RCC_OscConfig+0xd0>
 8001b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b84:	600b      	str	r3, [r1, #0]
 8001b86:	e7ca      	b.n	8001b1e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001b88:	f7ff ff80 	bl	8001a8c <HAL_GetTick>
 8001b8c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001b90:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b92:	2701      	movs	r7, #1
 8001b94:	fa96 f3a6 	rbit	r3, r6
 8001b98:	680a      	ldr	r2, [r1, #0]
 8001b9a:	fa96 f3a6 	rbit	r3, r6
 8001b9e:	fab3 f383 	clz	r3, r3
 8001ba2:	f003 031f 	and.w	r3, r3, #31
 8001ba6:	fa07 f303 	lsl.w	r3, r7, r3
 8001baa:	4213      	tst	r3, r2
 8001bac:	f43f af7c 	beq.w	8001aa8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bb0:	f7ff ff6c 	bl	8001a8c <HAL_GetTick>
 8001bb4:	1b40      	subs	r0, r0, r5
 8001bb6:	2864      	cmp	r0, #100	; 0x64
 8001bb8:	d9ec      	bls.n	8001b94 <HAL_RCC_OscConfig+0xf8>
 8001bba:	e7d3      	b.n	8001b64 <HAL_RCC_OscConfig+0xc8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bbc:	495e      	ldr	r1, [pc, #376]	; (8001d38 <HAL_RCC_OscConfig+0x29c>)
 8001bbe:	684b      	ldr	r3, [r1, #4]
 8001bc0:	f013 0f0c 	tst.w	r3, #12
 8001bc4:	d007      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bc6:	684b      	ldr	r3, [r1, #4]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d121      	bne.n	8001c14 <HAL_RCC_OscConfig+0x178>
 8001bd0:	684b      	ldr	r3, [r1, #4]
 8001bd2:	03df      	lsls	r7, r3, #15
 8001bd4:	d41e      	bmi.n	8001c14 <HAL_RCC_OscConfig+0x178>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bdc:	6808      	ldr	r0, [r1, #0]
 8001bde:	fa93 f3a3 	rbit	r3, r3
 8001be2:	fab3 f383 	clz	r3, r3
 8001be6:	f003 031f 	and.w	r3, r3, #31
 8001bea:	2201      	movs	r2, #1
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	4203      	tst	r3, r0
 8001bf2:	d002      	beq.n	8001bfa <HAL_RCC_OscConfig+0x15e>
 8001bf4:	6923      	ldr	r3, [r4, #16]
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d189      	bne.n	8001b0e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfa:	6808      	ldr	r0, [r1, #0]
 8001bfc:	23f8      	movs	r3, #248	; 0xf8
 8001bfe:	fa93 f3a3 	rbit	r3, r3
 8001c02:	fab3 f283 	clz	r2, r3
 8001c06:	6963      	ldr	r3, [r4, #20]
 8001c08:	4093      	lsls	r3, r2
 8001c0a:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]
 8001c12:	e74d      	b.n	8001ab0 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c14:	6922      	ldr	r2, [r4, #16]
 8001c16:	2501      	movs	r5, #1
 8001c18:	b302      	cbz	r2, 8001c5c <HAL_RCC_OscConfig+0x1c0>
 8001c1a:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8001c1e:	fab3 f383 	clz	r3, r3
 8001c22:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c26:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	2702      	movs	r7, #2
 8001c2e:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001c30:	f7ff ff2c 	bl	8001a8c <HAL_GetTick>
 8001c34:	4606      	mov	r6, r0
 8001c36:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3a:	680a      	ldr	r2, [r1, #0]
 8001c3c:	fa97 f3a7 	rbit	r3, r7
 8001c40:	fab3 f383 	clz	r3, r3
 8001c44:	f003 031f 	and.w	r3, r3, #31
 8001c48:	fa05 f303 	lsl.w	r3, r5, r3
 8001c4c:	4213      	tst	r3, r2
 8001c4e:	d1d4      	bne.n	8001bfa <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c50:	f7ff ff1c 	bl	8001a8c <HAL_GetTick>
 8001c54:	1b80      	subs	r0, r0, r6
 8001c56:	2802      	cmp	r0, #2
 8001c58:	d9ed      	bls.n	8001c36 <HAL_RCC_OscConfig+0x19a>
 8001c5a:	e783      	b.n	8001b64 <HAL_RCC_OscConfig+0xc8>
 8001c5c:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8001c60:	fab3 f383 	clz	r3, r3
 8001c64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	2702      	movs	r7, #2
 8001c70:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c72:	f7ff ff0b 	bl	8001a8c <HAL_GetTick>
 8001c76:	4606      	mov	r6, r0
 8001c78:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7c:	680a      	ldr	r2, [r1, #0]
 8001c7e:	fa97 f3a7 	rbit	r3, r7
 8001c82:	fab3 f383 	clz	r3, r3
 8001c86:	f003 031f 	and.w	r3, r3, #31
 8001c8a:	fa05 f303 	lsl.w	r3, r5, r3
 8001c8e:	4213      	tst	r3, r2
 8001c90:	f43f af0e 	beq.w	8001ab0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c94:	f7ff fefa 	bl	8001a8c <HAL_GetTick>
 8001c98:	1b80      	subs	r0, r0, r6
 8001c9a:	2802      	cmp	r0, #2
 8001c9c:	d9ec      	bls.n	8001c78 <HAL_RCC_OscConfig+0x1dc>
 8001c9e:	e761      	b.n	8001b64 <HAL_RCC_OscConfig+0xc8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ca0:	69a2      	ldr	r2, [r4, #24]
 8001ca2:	4d25      	ldr	r5, [pc, #148]	; (8001d38 <HAL_RCC_OscConfig+0x29c>)
 8001ca4:	4825      	ldr	r0, [pc, #148]	; (8001d3c <HAL_RCC_OscConfig+0x2a0>)
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	b312      	cbz	r2, 8001cf0 <HAL_RCC_OscConfig+0x254>
 8001caa:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	4403      	add	r3, r0
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	2602      	movs	r6, #2
 8001cb8:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 8001cba:	f7ff fee7 	bl	8001a8c <HAL_GetTick>
 8001cbe:	4607      	mov	r7, r0
 8001cc0:	fa96 f3a6 	rbit	r3, r6
 8001cc4:	fa96 f3a6 	rbit	r3, r6
 8001cc8:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ccc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001cce:	fa96 f3a6 	rbit	r3, r6
 8001cd2:	fab3 f383 	clz	r3, r3
 8001cd6:	f003 031f 	and.w	r3, r3, #31
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	4213      	tst	r3, r2
 8001ce0:	f47f aeea 	bne.w	8001ab8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ce4:	f7ff fed2 	bl	8001a8c <HAL_GetTick>
 8001ce8:	1bc0      	subs	r0, r0, r7
 8001cea:	2802      	cmp	r0, #2
 8001cec:	d9e8      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x224>
 8001cee:	e739      	b.n	8001b64 <HAL_RCC_OscConfig+0xc8>
 8001cf0:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 8001cf4:	fab3 f383 	clz	r3, r3
 8001cf8:	4403      	add	r3, r0
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	2602      	movs	r6, #2
 8001cfe:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001d00:	f7ff fec4 	bl	8001a8c <HAL_GetTick>
 8001d04:	4607      	mov	r7, r0
 8001d06:	fa96 f3a6 	rbit	r3, r6
 8001d0a:	fa96 f3a6 	rbit	r3, r6
 8001d0e:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d12:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001d14:	fa96 f3a6 	rbit	r3, r6
 8001d18:	fab3 f383 	clz	r3, r3
 8001d1c:	f003 031f 	and.w	r3, r3, #31
 8001d20:	fa01 f303 	lsl.w	r3, r1, r3
 8001d24:	4213      	tst	r3, r2
 8001d26:	f43f aec7 	beq.w	8001ab8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d2a:	f7ff feaf 	bl	8001a8c <HAL_GetTick>
 8001d2e:	1bc0      	subs	r0, r0, r7
 8001d30:	2802      	cmp	r0, #2
 8001d32:	d9e8      	bls.n	8001d06 <HAL_RCC_OscConfig+0x26a>
 8001d34:	e716      	b.n	8001b64 <HAL_RCC_OscConfig+0xc8>
 8001d36:	bf00      	nop
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	10908120 	.word	0x10908120
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d40:	498a      	ldr	r1, [pc, #552]	; (8001f6c <HAL_RCC_OscConfig+0x4d0>)
 8001d42:	69cb      	ldr	r3, [r1, #28]
 8001d44:	00d8      	lsls	r0, r3, #3
 8001d46:	d433      	bmi.n	8001db0 <HAL_RCC_OscConfig+0x314>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d48:	69cb      	ldr	r3, [r1, #28]
 8001d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	61cb      	str	r3, [r1, #28]
 8001d50:	69cb      	ldr	r3, [r1, #28]
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d56:	9301      	str	r3, [sp, #4]
 8001d58:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d5a:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5c:	4e84      	ldr	r6, [pc, #528]	; (8001f70 <HAL_RCC_OscConfig+0x4d4>)
 8001d5e:	6833      	ldr	r3, [r6, #0]
 8001d60:	05da      	lsls	r2, r3, #23
 8001d62:	d527      	bpl.n	8001db4 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d64:	68e3      	ldr	r3, [r4, #12]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d134      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x338>
 8001d6a:	6a0b      	ldr	r3, [r1, #32]
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8001d72:	f7ff fe8b 	bl	8001a8c <HAL_GetTick>
 8001d76:	2602      	movs	r6, #2
 8001d78:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7a:	f04f 0801 	mov.w	r8, #1
 8001d7e:	fa96 f3a6 	rbit	r3, r6
 8001d82:	fa96 f3a6 	rbit	r3, r6
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d061      	beq.n	8001e4e <HAL_RCC_OscConfig+0x3b2>
 8001d8a:	6a0a      	ldr	r2, [r1, #32]
 8001d8c:	fa96 f3a6 	rbit	r3, r6
 8001d90:	fab3 f383 	clz	r3, r3
 8001d94:	f003 031f 	and.w	r3, r3, #31
 8001d98:	fa08 f303 	lsl.w	r3, r8, r3
 8001d9c:	4213      	tst	r3, r2
 8001d9e:	d04e      	beq.n	8001e3e <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8001da0:	2d00      	cmp	r5, #0
 8001da2:	f43f ae8d 	beq.w	8001ac0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da6:	69cb      	ldr	r3, [r1, #28]
 8001da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dac:	61cb      	str	r3, [r1, #28]
 8001dae:	e687      	b.n	8001ac0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001db0:	2500      	movs	r5, #0
 8001db2:	e7d3      	b.n	8001d5c <HAL_RCC_OscConfig+0x2c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db4:	6833      	ldr	r3, [r6, #0]
 8001db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dba:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001dbc:	f7ff fe66 	bl	8001a8c <HAL_GetTick>
 8001dc0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc2:	6833      	ldr	r3, [r6, #0]
 8001dc4:	05db      	lsls	r3, r3, #23
 8001dc6:	d4cd      	bmi.n	8001d64 <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc8:	f7ff fe60 	bl	8001a8c <HAL_GetTick>
 8001dcc:	1bc0      	subs	r0, r0, r7
 8001dce:	2864      	cmp	r0, #100	; 0x64
 8001dd0:	d9f7      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x326>
 8001dd2:	e6c7      	b.n	8001b64 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd4:	bb2b      	cbnz	r3, 8001e22 <HAL_RCC_OscConfig+0x386>
 8001dd6:	6a0b      	ldr	r3, [r1, #32]
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	620b      	str	r3, [r1, #32]
 8001dde:	6a0b      	ldr	r3, [r1, #32]
 8001de0:	f023 0304 	bic.w	r3, r3, #4
 8001de4:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8001de6:	f7ff fe51 	bl	8001a8c <HAL_GetTick>
 8001dea:	2602      	movs	r6, #2
 8001dec:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dee:	f04f 0801 	mov.w	r8, #1
 8001df2:	fa96 f3a6 	rbit	r3, r6
 8001df6:	fa96 f3a6 	rbit	r3, r6
 8001dfa:	b363      	cbz	r3, 8001e56 <HAL_RCC_OscConfig+0x3ba>
 8001dfc:	6a0a      	ldr	r2, [r1, #32]
 8001dfe:	fa96 f3a6 	rbit	r3, r6
 8001e02:	fab3 f383 	clz	r3, r3
 8001e06:	f003 031f 	and.w	r3, r3, #31
 8001e0a:	fa08 f303 	lsl.w	r3, r8, r3
 8001e0e:	4213      	tst	r3, r2
 8001e10:	d0c6      	beq.n	8001da0 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e12:	f7ff fe3b 	bl	8001a8c <HAL_GetTick>
 8001e16:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e1a:	1bc0      	subs	r0, r0, r7
 8001e1c:	4298      	cmp	r0, r3
 8001e1e:	d9e8      	bls.n	8001df2 <HAL_RCC_OscConfig+0x356>
 8001e20:	e6a0      	b.n	8001b64 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	6a0b      	ldr	r3, [r1, #32]
 8001e26:	d103      	bne.n	8001e30 <HAL_RCC_OscConfig+0x394>
 8001e28:	f043 0304 	orr.w	r3, r3, #4
 8001e2c:	620b      	str	r3, [r1, #32]
 8001e2e:	e79c      	b.n	8001d6a <HAL_RCC_OscConfig+0x2ce>
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	620b      	str	r3, [r1, #32]
 8001e36:	6a0b      	ldr	r3, [r1, #32]
 8001e38:	f023 0304 	bic.w	r3, r3, #4
 8001e3c:	e798      	b.n	8001d70 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e3e:	f7ff fe25 	bl	8001a8c <HAL_GetTick>
 8001e42:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e46:	1bc0      	subs	r0, r0, r7
 8001e48:	4298      	cmp	r0, r3
 8001e4a:	d998      	bls.n	8001d7e <HAL_RCC_OscConfig+0x2e2>
 8001e4c:	e68a      	b.n	8001b64 <HAL_RCC_OscConfig+0xc8>
 8001e4e:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e52:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001e54:	e79a      	b.n	8001d8c <HAL_RCC_OscConfig+0x2f0>
 8001e56:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e5a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001e5c:	e7cf      	b.n	8001dfe <HAL_RCC_OscConfig+0x362>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e5e:	4943      	ldr	r1, [pc, #268]	; (8001f6c <HAL_RCC_OscConfig+0x4d0>)
 8001e60:	684b      	ldr	r3, [r1, #4]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	f43f ae51 	beq.w	8001b0e <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e6c:	2a02      	cmp	r2, #2
 8001e6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e72:	d154      	bne.n	8001f1e <HAL_RCC_OscConfig+0x482>
 8001e74:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001e78:	fab3 f383 	clz	r3, r3
 8001e7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e8a:	f7ff fdff 	bl	8001a8c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8e:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8001f74 <HAL_RCC_OscConfig+0x4d8>
        tickstart = HAL_GetTick();
 8001e92:	4606      	mov	r6, r0
 8001e94:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e98:	2501      	movs	r5, #1
 8001e9a:	fa97 f3a7 	rbit	r3, r7
 8001e9e:	680a      	ldr	r2, [r1, #0]
 8001ea0:	fa97 f3a7 	rbit	r3, r7
 8001ea4:	fab3 f383 	clz	r3, r3
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	fa05 f303 	lsl.w	r3, r5, r3
 8001eb0:	4213      	tst	r3, r2
 8001eb2:	d12e      	bne.n	8001f12 <HAL_RCC_OscConfig+0x476>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eb4:	e9d4 0308 	ldrd	r0, r3, [r4, #32]
 8001eb8:	684a      	ldr	r2, [r1, #4]
 8001eba:	4303      	orrs	r3, r0
 8001ebc:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
 8001ec4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ec8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001ecc:	fab3 f383 	clz	r3, r3
 8001ed0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ed4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ed8:	009b      	lsls	r3, r3, #2
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eda:	4f26      	ldr	r7, [pc, #152]	; (8001f74 <HAL_RCC_OscConfig+0x4d8>)
        __HAL_RCC_PLL_ENABLE();
 8001edc:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001ede:	f7ff fdd5 	bl	8001a8c <HAL_GetTick>
 8001ee2:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001ee6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee8:	2601      	movs	r6, #1
 8001eea:	fa95 f3a5 	rbit	r3, r5
 8001eee:	680a      	ldr	r2, [r1, #0]
 8001ef0:	fa95 f3a5 	rbit	r3, r5
 8001ef4:	fab3 f383 	clz	r3, r3
 8001ef8:	f003 031f 	and.w	r3, r3, #31
 8001efc:	fa06 f303 	lsl.w	r3, r6, r3
 8001f00:	4213      	tst	r3, r2
 8001f02:	f47f ade1 	bne.w	8001ac8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f06:	f7ff fdc1 	bl	8001a8c <HAL_GetTick>
 8001f0a:	1b00      	subs	r0, r0, r4
 8001f0c:	42b8      	cmp	r0, r7
 8001f0e:	d9ec      	bls.n	8001eea <HAL_RCC_OscConfig+0x44e>
 8001f10:	e628      	b.n	8001b64 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f12:	f7ff fdbb 	bl	8001a8c <HAL_GetTick>
 8001f16:	1b80      	subs	r0, r0, r6
 8001f18:	4540      	cmp	r0, r8
 8001f1a:	d9be      	bls.n	8001e9a <HAL_RCC_OscConfig+0x3fe>
 8001f1c:	e622      	b.n	8001b64 <HAL_RCC_OscConfig+0xc8>
 8001f1e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001f22:	fab3 f383 	clz	r3, r3
 8001f26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f34:	f7ff fdaa 	bl	8001a8c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f38:	4f0e      	ldr	r7, [pc, #56]	; (8001f74 <HAL_RCC_OscConfig+0x4d8>)
        tickstart = HAL_GetTick();
 8001f3a:	4604      	mov	r4, r0
 8001f3c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f40:	2601      	movs	r6, #1
 8001f42:	fa95 f3a5 	rbit	r3, r5
 8001f46:	680a      	ldr	r2, [r1, #0]
 8001f48:	fa95 f3a5 	rbit	r3, r5
 8001f4c:	fab3 f383 	clz	r3, r3
 8001f50:	f003 031f 	and.w	r3, r3, #31
 8001f54:	fa06 f303 	lsl.w	r3, r6, r3
 8001f58:	4213      	tst	r3, r2
 8001f5a:	f43f adb5 	beq.w	8001ac8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f5e:	f7ff fd95 	bl	8001a8c <HAL_GetTick>
 8001f62:	1b00      	subs	r0, r0, r4
 8001f64:	42b8      	cmp	r0, r7
 8001f66:	d9ec      	bls.n	8001f42 <HAL_RCC_OscConfig+0x4a6>
 8001f68:	e5fc      	b.n	8001b64 <HAL_RCC_OscConfig+0xc8>
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40007000 	.word	0x40007000
 8001f74:	00030d40 	.word	0x00030d40

08001f78 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f78:	4a50      	ldr	r2, [pc, #320]	; (80020bc <HAL_RCC_ClockConfig+0x144>)
{
 8001f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f7c:	6813      	ldr	r3, [r2, #0]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	428b      	cmp	r3, r1
{
 8001f84:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f86:	d31b      	bcc.n	8001fc0 <HAL_RCC_ClockConfig+0x48>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f88:	6822      	ldr	r2, [r4, #0]
 8001f8a:	0790      	lsls	r0, r2, #30
 8001f8c:	d424      	bmi.n	8001fd8 <HAL_RCC_ClockConfig+0x60>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8e:	07d2      	lsls	r2, r2, #31
 8001f90:	d42a      	bmi.n	8001fe8 <HAL_RCC_ClockConfig+0x70>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f92:	4a4a      	ldr	r2, [pc, #296]	; (80020bc <HAL_RCC_ClockConfig+0x144>)
 8001f94:	6813      	ldr	r3, [r2, #0]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	428b      	cmp	r3, r1
 8001f9c:	d87a      	bhi.n	8002094 <HAL_RCC_ClockConfig+0x11c>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f9e:	6820      	ldr	r0, [r4, #0]
 8001fa0:	0743      	lsls	r3, r0, #29
 8001fa2:	f100 8082 	bmi.w	80020aa <HAL_RCC_ClockConfig+0x132>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa6:	f010 0008 	ands.w	r0, r0, #8
 8001faa:	d014      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fac:	4a44      	ldr	r2, [pc, #272]	; (80020c0 <HAL_RCC_ClockConfig+0x148>)
 8001fae:	6921      	ldr	r1, [r4, #16]
 8001fb0:	6853      	ldr	r3, [r2, #4]
 8001fb2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001fb6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001fba:	6053      	str	r3, [r2, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	e00a      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc0:	6813      	ldr	r3, [r2, #0]
 8001fc2:	f023 0307 	bic.w	r3, r3, #7
 8001fc6:	430b      	orrs	r3, r1
 8001fc8:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fca:	6813      	ldr	r3, [r2, #0]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	428b      	cmp	r3, r1
 8001fd2:	d0d9      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 8001fd4:	2001      	movs	r0, #1
}
 8001fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd8:	4839      	ldr	r0, [pc, #228]	; (80020c0 <HAL_RCC_ClockConfig+0x148>)
 8001fda:	68a5      	ldr	r5, [r4, #8]
 8001fdc:	6843      	ldr	r3, [r0, #4]
 8001fde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fe2:	432b      	orrs	r3, r5
 8001fe4:	6043      	str	r3, [r0, #4]
 8001fe6:	e7d2      	b.n	8001f8e <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe8:	6862      	ldr	r2, [r4, #4]
 8001fea:	4d35      	ldr	r5, [pc, #212]	; (80020c0 <HAL_RCC_ClockConfig+0x148>)
 8001fec:	2a01      	cmp	r2, #1
 8001fee:	d127      	bne.n	8002040 <HAL_RCC_ClockConfig+0xc8>
 8001ff0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff4:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff8:	6828      	ldr	r0, [r5, #0]
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	f003 031f 	and.w	r3, r3, #31
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200c:	d0e2      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800200e:	686b      	ldr	r3, [r5, #4]
 8002010:	f023 0303 	bic.w	r3, r3, #3
 8002014:	431a      	orrs	r2, r3
 8002016:	606a      	str	r2, [r5, #4]
    tickstart = HAL_GetTick();
 8002018:	f7ff fd38 	bl	8001a8c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800201c:	6863      	ldr	r3, [r4, #4]
 800201e:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8002020:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002022:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002026:	d11e      	bne.n	8002066 <HAL_RCC_ClockConfig+0xee>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002028:	686b      	ldr	r3, [r5, #4]
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	2b04      	cmp	r3, #4
 8002030:	d0af      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002032:	f7ff fd2b 	bl	8001a8c <HAL_GetTick>
 8002036:	1b80      	subs	r0, r0, r6
 8002038:	42b8      	cmp	r0, r7
 800203a:	d9f5      	bls.n	8002028 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 800203c:	2003      	movs	r0, #3
 800203e:	e7ca      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002040:	2a02      	cmp	r2, #2
 8002042:	bf0c      	ite	eq
 8002044:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8002048:	2302      	movne	r3, #2
 800204a:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204e:	682e      	ldr	r6, [r5, #0]
 8002050:	fa93 f3a3 	rbit	r3, r3
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	f003 031f 	and.w	r3, r3, #31
 800205c:	2001      	movs	r0, #1
 800205e:	fa00 f303 	lsl.w	r3, r0, r3
 8002062:	4233      	tst	r3, r6
 8002064:	e7d2      	b.n	800200c <HAL_RCC_ClockConfig+0x94>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002066:	2b02      	cmp	r3, #2
 8002068:	d10f      	bne.n	800208a <HAL_RCC_ClockConfig+0x112>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800206a:	686b      	ldr	r3, [r5, #4]
 800206c:	f003 030c 	and.w	r3, r3, #12
 8002070:	2b08      	cmp	r3, #8
 8002072:	d08e      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002074:	f7ff fd0a 	bl	8001a8c <HAL_GetTick>
 8002078:	1b80      	subs	r0, r0, r6
 800207a:	42b8      	cmp	r0, r7
 800207c:	d9f5      	bls.n	800206a <HAL_RCC_ClockConfig+0xf2>
 800207e:	e7dd      	b.n	800203c <HAL_RCC_ClockConfig+0xc4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002080:	f7ff fd04 	bl	8001a8c <HAL_GetTick>
 8002084:	1b80      	subs	r0, r0, r6
 8002086:	42b8      	cmp	r0, r7
 8002088:	d8d8      	bhi.n	800203c <HAL_RCC_ClockConfig+0xc4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800208a:	686b      	ldr	r3, [r5, #4]
 800208c:	f013 0f0c 	tst.w	r3, #12
 8002090:	d1f6      	bne.n	8002080 <HAL_RCC_ClockConfig+0x108>
 8002092:	e77e      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002094:	6813      	ldr	r3, [r2, #0]
 8002096:	f023 0307 	bic.w	r3, r3, #7
 800209a:	430b      	orrs	r3, r1
 800209c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800209e:	6813      	ldr	r3, [r2, #0]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	428b      	cmp	r3, r1
 80020a6:	d195      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x5c>
 80020a8:	e779      	b.n	8001f9e <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020aa:	4905      	ldr	r1, [pc, #20]	; (80020c0 <HAL_RCC_ClockConfig+0x148>)
 80020ac:	68e3      	ldr	r3, [r4, #12]
 80020ae:	684a      	ldr	r2, [r1, #4]
 80020b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020b4:	431a      	orrs	r2, r3
 80020b6:	604a      	str	r2, [r1, #4]
 80020b8:	e775      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x2e>
 80020ba:	bf00      	nop
 80020bc:	40022000 	.word	0x40022000
 80020c0:	40021000 	.word	0x40021000

080020c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c8:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8002240 <HAL_GPIO_Init+0x17c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020cc:	4c5d      	ldr	r4, [pc, #372]	; (8002244 <HAL_GPIO_Init+0x180>)
  uint32_t position = 0x00U;
 80020ce:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80020d0:	f04f 0901 	mov.w	r9, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 80020d4:	680a      	ldr	r2, [r1, #0]
 80020d6:	fa32 f503 	lsrs.w	r5, r2, r3
 80020da:	d102      	bne.n	80020e2 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 80020dc:	b003      	add	sp, #12
 80020de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80020e2:	fa09 fa03 	lsl.w	sl, r9, r3
    if(iocurrent)
 80020e6:	ea1a 0202 	ands.w	r2, sl, r2
 80020ea:	f000 809e 	beq.w	800222a <HAL_GPIO_Init+0x166>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020ee:	684d      	ldr	r5, [r1, #4]
 80020f0:	f025 0e10 	bic.w	lr, r5, #16
 80020f4:	f1be 0f02 	cmp.w	lr, #2
 80020f8:	d114      	bne.n	8002124 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 80020fa:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80020fe:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002102:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8002106:	f8dc 6020 	ldr.w	r6, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800210a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800210e:	270f      	movs	r7, #15
 8002110:	fa07 f70b 	lsl.w	r7, r7, fp
 8002114:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002118:	690e      	ldr	r6, [r1, #16]
 800211a:	fa06 f60b 	lsl.w	r6, r6, fp
 800211e:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8002120:	f8cc 6020 	str.w	r6, [ip, #32]
      temp = GPIOx->MODER;
 8002124:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002128:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800212c:	2603      	movs	r6, #3
 800212e:	fa06 f70c 	lsl.w	r7, r6, ip
 8002132:	ea2b 0b07 	bic.w	fp, fp, r7
 8002136:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002138:	f005 0703 	and.w	r7, r5, #3
 800213c:	fa07 f70c 	lsl.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002140:	f10e 3eff 	add.w	lr, lr, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002144:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002148:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 800214c:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800214e:	d811      	bhi.n	8002174 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR;
 8002150:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002152:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002156:	68cf      	ldr	r7, [r1, #12]
 8002158:	fa07 f70c 	lsl.w	r7, r7, ip
 800215c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002160:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002162:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002164:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002168:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800216c:	409f      	lsls	r7, r3
 800216e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8002172:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002174:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002176:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002178:	688e      	ldr	r6, [r1, #8]
 800217a:	fa06 f60c 	lsl.w	r6, r6, ip
 800217e:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8002180:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002182:	00ee      	lsls	r6, r5, #3
 8002184:	d551      	bpl.n	800222a <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002186:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800218a:	f046 0601 	orr.w	r6, r6, #1
 800218e:	f8c8 6018 	str.w	r6, [r8, #24]
 8002192:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8002196:	f023 0703 	bic.w	r7, r3, #3
 800219a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800219e:	f006 0601 	and.w	r6, r6, #1
 80021a2:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80021a6:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80021a8:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ac:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80021ae:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80021b0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80021b4:	f04f 0c0f 	mov.w	ip, #15
 80021b8:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021bc:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80021c0:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021c4:	d033      	beq.n	800222e <HAL_GPIO_Init+0x16a>
 80021c6:	4e20      	ldr	r6, [pc, #128]	; (8002248 <HAL_GPIO_Init+0x184>)
 80021c8:	42b0      	cmp	r0, r6
 80021ca:	d032      	beq.n	8002232 <HAL_GPIO_Init+0x16e>
 80021cc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021d0:	42b0      	cmp	r0, r6
 80021d2:	d030      	beq.n	8002236 <HAL_GPIO_Init+0x172>
 80021d4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021d8:	42b0      	cmp	r0, r6
 80021da:	d02e      	beq.n	800223a <HAL_GPIO_Init+0x176>
 80021dc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021e0:	42b0      	cmp	r0, r6
 80021e2:	bf0c      	ite	eq
 80021e4:	2604      	moveq	r6, #4
 80021e6:	2605      	movne	r6, #5
 80021e8:	fa06 f60e 	lsl.w	r6, r6, lr
 80021ec:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80021f0:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80021f2:	6826      	ldr	r6, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80021f4:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021f6:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80021fa:	bf0c      	ite	eq
 80021fc:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80021fe:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 8002200:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8002202:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002204:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8002208:	bf0c      	ite	eq
 800220a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800220c:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 800220e:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8002210:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002212:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8002216:	bf0c      	ite	eq
 8002218:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800221a:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 800221c:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 800221e:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002220:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8002222:	bf54      	ite	pl
 8002224:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8002226:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 8002228:	60e6      	str	r6, [r4, #12]
    position++;
 800222a:	3301      	adds	r3, #1
 800222c:	e752      	b.n	80020d4 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800222e:	2600      	movs	r6, #0
 8002230:	e7da      	b.n	80021e8 <HAL_GPIO_Init+0x124>
 8002232:	2601      	movs	r6, #1
 8002234:	e7d8      	b.n	80021e8 <HAL_GPIO_Init+0x124>
 8002236:	2602      	movs	r6, #2
 8002238:	e7d6      	b.n	80021e8 <HAL_GPIO_Init+0x124>
 800223a:	2603      	movs	r6, #3
 800223c:	e7d4      	b.n	80021e8 <HAL_GPIO_Init+0x124>
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000
 8002244:	40010400 	.word	0x40010400
 8002248:	48000400 	.word	0x48000400

0800224c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800224c:	b10a      	cbz	r2, 8002252 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800224e:	6181      	str	r1, [r0, #24]
 8002250:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002252:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002254:	4770      	bx	lr
 8002256:	0000      	movs	r0, r0

08002258 <UART_SetConfig>:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002258:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800225a:	6881      	ldr	r1, [r0, #8]
 800225c:	69c3      	ldr	r3, [r0, #28]
{
 800225e:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002260:	6905      	ldr	r5, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002262:	6814      	ldr	r4, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002264:	4329      	orrs	r1, r5
 8002266:	6945      	ldr	r5, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002268:	f424 4416 	bic.w	r4, r4, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800226c:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800226e:	f024 040c 	bic.w	r4, r4, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002272:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002274:	4321      	orrs	r1, r4
 8002276:	6011      	str	r1, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002278:	6851      	ldr	r1, [r2, #4]
 800227a:	68c4      	ldr	r4, [r0, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800227c:	6a05      	ldr	r5, [r0, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800227e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002282:	4321      	orrs	r1, r4
 8002284:	6051      	str	r1, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002286:	6894      	ldr	r4, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002288:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800228a:	f424 6430 	bic.w	r4, r4, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800228e:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002290:	4321      	orrs	r1, r4
 8002292:	6091      	str	r1, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002294:	4962      	ldr	r1, [pc, #392]	; (8002420 <UART_SetConfig+0x1c8>)
 8002296:	428a      	cmp	r2, r1
 8002298:	d116      	bne.n	80022c8 <UART_SetConfig+0x70>
 800229a:	f501 4158 	add.w	r1, r1, #55296	; 0xd800
 800229e:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80022a0:	f001 0103 	and.w	r1, r1, #3
 80022a4:	3901      	subs	r1, #1
 80022a6:	2902      	cmp	r1, #2
 80022a8:	f200 80b2 	bhi.w	8002410 <UART_SetConfig+0x1b8>
 80022ac:	4c5d      	ldr	r4, [pc, #372]	; (8002424 <UART_SetConfig+0x1cc>)

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022b2:	5c61      	ldrb	r1, [r4, r1]
 80022b4:	d177      	bne.n	80023a6 <UART_SetConfig+0x14e>
  {
    switch (clocksource)
 80022b6:	2908      	cmp	r1, #8
 80022b8:	d872      	bhi.n	80023a0 <UART_SetConfig+0x148>
 80022ba:	e8df f001 	tbb	[pc, r1]
 80022be:	acac      	.short	0xacac
 80022c0:	71ac7124 	.word	0x71ac7124
 80022c4:	7171      	.short	0x7171
 80022c6:	a4          	.byte	0xa4
 80022c7:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022c8:	4957      	ldr	r1, [pc, #348]	; (8002428 <UART_SetConfig+0x1d0>)
 80022ca:	428a      	cmp	r2, r1
 80022cc:	d12c      	bne.n	8002328 <UART_SetConfig+0xd0>
 80022ce:	f501 31e6 	add.w	r1, r1, #117760	; 0x1cc00
 80022d2:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80022d4:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 80022d8:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80022dc:	f000 8090 	beq.w	8002400 <UART_SetConfig+0x1a8>
 80022e0:	d80b      	bhi.n	80022fa <UART_SetConfig+0xa2>
 80022e2:	2900      	cmp	r1, #0
 80022e4:	f000 8094 	beq.w	8002410 <UART_SetConfig+0x1b8>
 80022e8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80022ec:	f000 8090 	beq.w	8002410 <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022f4:	d054      	beq.n	80023a0 <UART_SetConfig+0x148>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80022f6:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 80022f8:	e015      	b.n	8002326 <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022fa:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 80022fe:	d1f7      	bne.n	80022f0 <UART_SetConfig+0x98>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002304:	d166      	bne.n	80023d4 <UART_SetConfig+0x17c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002306:	6841      	ldr	r1, [r0, #4]
 8002308:	084b      	lsrs	r3, r1, #1
 800230a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800230e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002312:	fbb3 f3f1 	udiv	r3, r3, r1
  HAL_StatusTypeDef ret               = HAL_OK;
 8002316:	2000      	movs	r0, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002318:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 800231a:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800231e:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8002322:	430b      	orrs	r3, r1
 8002324:	60d3      	str	r3, [r2, #12]

}
 8002326:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002328:	4940      	ldr	r1, [pc, #256]	; (800242c <UART_SetConfig+0x1d4>)
 800232a:	428a      	cmp	r2, r1
 800232c:	d110      	bne.n	8002350 <UART_SetConfig+0xf8>
 800232e:	f501 31e4 	add.w	r1, r1, #116736	; 0x1c800
 8002332:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002334:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 8002338:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 800233c:	d060      	beq.n	8002400 <UART_SetConfig+0x1a8>
 800233e:	d804      	bhi.n	800234a <UART_SetConfig+0xf2>
 8002340:	2900      	cmp	r1, #0
 8002342:	d065      	beq.n	8002410 <UART_SetConfig+0x1b8>
 8002344:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8002348:	e7d0      	b.n	80022ec <UART_SetConfig+0x94>
 800234a:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 800234e:	e7d6      	b.n	80022fe <UART_SetConfig+0xa6>
 8002350:	4937      	ldr	r1, [pc, #220]	; (8002430 <UART_SetConfig+0x1d8>)
 8002352:	428a      	cmp	r2, r1
 8002354:	d110      	bne.n	8002378 <UART_SetConfig+0x120>
 8002356:	f501 31e2 	add.w	r1, r1, #115712	; 0x1c400
 800235a:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800235c:	f401 1140 	and.w	r1, r1, #3145728	; 0x300000
 8002360:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002364:	d04c      	beq.n	8002400 <UART_SetConfig+0x1a8>
 8002366:	d804      	bhi.n	8002372 <UART_SetConfig+0x11a>
 8002368:	2900      	cmp	r1, #0
 800236a:	d051      	beq.n	8002410 <UART_SetConfig+0x1b8>
 800236c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8002370:	e7bc      	b.n	80022ec <UART_SetConfig+0x94>
 8002372:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8002376:	e7c2      	b.n	80022fe <UART_SetConfig+0xa6>
 8002378:	492e      	ldr	r1, [pc, #184]	; (8002434 <UART_SetConfig+0x1dc>)
 800237a:	428a      	cmp	r2, r1
 800237c:	d1b8      	bne.n	80022f0 <UART_SetConfig+0x98>
 800237e:	f501 31e0 	add.w	r1, r1, #114688	; 0x1c000
 8002382:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002384:	f401 0140 	and.w	r1, r1, #12582912	; 0xc00000
 8002388:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800238c:	d038      	beq.n	8002400 <UART_SetConfig+0x1a8>
 800238e:	d804      	bhi.n	800239a <UART_SetConfig+0x142>
 8002390:	2900      	cmp	r1, #0
 8002392:	d03d      	beq.n	8002410 <UART_SetConfig+0x1b8>
 8002394:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002398:	e7a8      	b.n	80022ec <UART_SetConfig+0x94>
 800239a:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800239e:	e7ae      	b.n	80022fe <UART_SetConfig+0xa6>
        ret = HAL_ERROR;
 80023a0:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	e7b9      	b.n	800231a <UART_SetConfig+0xc2>
    switch (clocksource)
 80023a6:	2908      	cmp	r1, #8
 80023a8:	d8a5      	bhi.n	80022f6 <UART_SetConfig+0x9e>
 80023aa:	a301      	add	r3, pc, #4	; (adr r3, 80023b0 <UART_SetConfig+0x158>)
 80023ac:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80023b0:	080023ed 	.word	0x080023ed
 80023b4:	080023ed 	.word	0x080023ed
 80023b8:	080023d5 	.word	0x080023d5
 80023bc:	080022f7 	.word	0x080022f7
 80023c0:	080023ed 	.word	0x080023ed
 80023c4:	080022f7 	.word	0x080022f7
 80023c8:	080022f7 	.word	0x080022f7
 80023cc:	080022f7 	.word	0x080022f7
 80023d0:	080023f7 	.word	0x080023f7
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80023d4:	6841      	ldr	r1, [r0, #4]
 80023d6:	084b      	lsrs	r3, r1, #1
 80023d8:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80023dc:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80023e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80023e8:	2000      	movs	r0, #0
        break;
 80023ea:	e79c      	b.n	8002326 <UART_SetConfig+0xce>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80023ec:	6841      	ldr	r1, [r0, #4]
 80023ee:	084b      	lsrs	r3, r1, #1
 80023f0:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 80023f4:	e7f4      	b.n	80023e0 <UART_SetConfig+0x188>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80023f6:	6841      	ldr	r1, [r0, #4]
 80023f8:	084b      	lsrs	r3, r1, #1
 80023fa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80023fe:	e7ef      	b.n	80023e0 <UART_SetConfig+0x188>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002404:	d1f7      	bne.n	80023f6 <UART_SetConfig+0x19e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002406:	6841      	ldr	r1, [r0, #4]
 8002408:	084b      	lsrs	r3, r1, #1
 800240a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800240e:	e780      	b.n	8002312 <UART_SetConfig+0xba>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002414:	d1ea      	bne.n	80023ec <UART_SetConfig+0x194>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002416:	6841      	ldr	r1, [r0, #4]
 8002418:	084b      	lsrs	r3, r1, #1
 800241a:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 800241e:	e778      	b.n	8002312 <UART_SetConfig+0xba>
 8002420:	40013800 	.word	0x40013800
 8002424:	08003eb4 	.word	0x08003eb4
 8002428:	40004400 	.word	0x40004400
 800242c:	40004800 	.word	0x40004800
 8002430:	40004c00 	.word	0x40004c00
 8002434:	40005000 	.word	0x40005000

08002438 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800243a:	9f06      	ldr	r7, [sp, #24]
 800243c:	4604      	mov	r4, r0
 800243e:	4615      	mov	r5, r2
 8002440:	461e      	mov	r6, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002442:	6822      	ldr	r2, [r4, #0]
 8002444:	69d3      	ldr	r3, [r2, #28]
 8002446:	ea31 0303 	bics.w	r3, r1, r3
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	42ab      	cmp	r3, r5
 8002452:	d001      	beq.n	8002458 <UART_WaitOnFlagUntilTimeout+0x20>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002454:	2000      	movs	r0, #0
 8002456:	e014      	b.n	8002482 <UART_WaitOnFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 8002458:	1c7b      	adds	r3, r7, #1
 800245a:	d0f3      	beq.n	8002444 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800245c:	b997      	cbnz	r7, 8002484 <UART_WaitOnFlagUntilTimeout+0x4c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800245e:	6823      	ldr	r3, [r4, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002466:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	f022 0201 	bic.w	r2, r2, #1
 800246e:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002470:	2320      	movs	r3, #32
 8002472:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002476:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 800247a:	2300      	movs	r3, #0
 800247c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002480:	2003      	movs	r0, #3
}
 8002482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002484:	f7ff fb02 	bl	8001a8c <HAL_GetTick>
 8002488:	1b80      	subs	r0, r0, r6
 800248a:	42b8      	cmp	r0, r7
 800248c:	d9d9      	bls.n	8002442 <UART_WaitOnFlagUntilTimeout+0xa>
 800248e:	e7e6      	b.n	800245e <UART_WaitOnFlagUntilTimeout+0x26>

08002490 <UART_CheckIdleState>:
{
 8002490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002492:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002494:	2100      	movs	r1, #0
 8002496:	66c1      	str	r1, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002498:	f7ff faf8 	bl	8001a8c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800249c:	6823      	ldr	r3, [r4, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80024a2:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80024a4:	d417      	bmi.n	80024d6 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80024a6:	6823      	ldr	r3, [r4, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	075b      	lsls	r3, r3, #29
 80024ac:	d50a      	bpl.n	80024c4 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	2200      	movs	r2, #0
 80024b6:	462b      	mov	r3, r5
 80024b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80024bc:	4620      	mov	r0, r4
 80024be:	f7ff ffbb 	bl	8002438 <UART_WaitOnFlagUntilTimeout>
 80024c2:	b9a0      	cbnz	r0, 80024ee <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 80024c4:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80024c6:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80024c8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80024cc:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80024d0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 80024d4:	e00c      	b.n	80024f0 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	460a      	mov	r2, r1
 80024de:	4603      	mov	r3, r0
 80024e0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80024e4:	4620      	mov	r0, r4
 80024e6:	f7ff ffa7 	bl	8002438 <UART_WaitOnFlagUntilTimeout>
 80024ea:	2800      	cmp	r0, #0
 80024ec:	d0db      	beq.n	80024a6 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80024ee:	2003      	movs	r0, #3
}
 80024f0:	b003      	add	sp, #12
 80024f2:	bd30      	pop	{r4, r5, pc}

080024f4 <HAL_UART_Init>:
{
 80024f4:	b510      	push	{r4, lr}
  if(huart == NULL)
 80024f6:	4604      	mov	r4, r0
 80024f8:	b328      	cbz	r0, 8002546 <HAL_UART_Init+0x52>
  if(huart->gState == HAL_UART_STATE_RESET)
 80024fa:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80024fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002502:	b90b      	cbnz	r3, 8002508 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8002504:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  __HAL_UART_DISABLE(huart);
 8002508:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800250a:	2324      	movs	r3, #36	; 0x24
 800250c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002510:	6813      	ldr	r3, [r2, #0]
 8002512:	f023 0301 	bic.w	r3, r3, #1
 8002516:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002518:	4620      	mov	r0, r4
 800251a:	f7ff fe9d 	bl	8002258 <UART_SetConfig>
 800251e:	2801      	cmp	r0, #1
 8002520:	d011      	beq.n	8002546 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800252a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002532:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	f042 0201 	orr.w	r2, r2, #1
  return UART_CheckIdleState(huart);
 800253a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800253c:	601a      	str	r2, [r3, #0]
}
 800253e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UART_CheckIdleState(huart);
 8002542:	f7ff bfa5 	b.w	8002490 <UART_CheckIdleState>
}
 8002546:	2001      	movs	r0, #1
 8002548:	bd10      	pop	{r4, pc}

0800254a <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800254a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800254c:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800254e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002552:	2b20      	cmp	r3, #32
{
 8002554:	460d      	mov	r5, r1
 8002556:	4604      	mov	r4, r0
 8002558:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800255a:	d14a      	bne.n	80025f2 <HAL_UART_Transmit+0xa8>
  {
    if((pData == NULL ) || (Size == 0U))
 800255c:	2d00      	cmp	r5, #0
 800255e:	d046      	beq.n	80025ee <HAL_UART_Transmit+0xa4>
 8002560:	2a00      	cmp	r2, #0
 8002562:	d044      	beq.n	80025ee <HAL_UART_Transmit+0xa4>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002564:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002568:	2b01      	cmp	r3, #1
 800256a:	d042      	beq.n	80025f2 <HAL_UART_Transmit+0xa8>
 800256c:	2301      	movs	r3, #1
 800256e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002572:	2300      	movs	r3, #0
 8002574:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002576:	2321      	movs	r3, #33	; 0x21
 8002578:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800257c:	f7ff fa86 	bl	8001a8c <HAL_GetTick>

    huart->TxXferSize = Size;
 8002580:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8002584:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 8002586:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800258a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800258e:	b292      	uxth	r2, r2
 8002590:	b962      	cbnz	r2, 80025ac <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002592:	9600      	str	r6, [sp, #0]
 8002594:	463b      	mov	r3, r7
 8002596:	2140      	movs	r1, #64	; 0x40
 8002598:	4620      	mov	r0, r4
 800259a:	f7ff ff4d 	bl	8002438 <UART_WaitOnFlagUntilTimeout>
 800259e:	b998      	cbnz	r0, 80025c8 <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025a0:	2320      	movs	r3, #32
 80025a2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025a6:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 80025aa:	e00e      	b.n	80025ca <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 80025ac:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025b0:	9600      	str	r6, [sp, #0]
      huart->TxXferCount--;
 80025b2:	3a01      	subs	r2, #1
 80025b4:	b292      	uxth	r2, r2
 80025b6:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025ba:	463b      	mov	r3, r7
 80025bc:	2200      	movs	r2, #0
 80025be:	2180      	movs	r1, #128	; 0x80
 80025c0:	4620      	mov	r0, r4
 80025c2:	f7ff ff39 	bl	8002438 <UART_WaitOnFlagUntilTimeout>
 80025c6:	b110      	cbz	r0, 80025ce <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 80025c8:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80025ca:	b003      	add	sp, #12
 80025cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ce:	68a3      	ldr	r3, [r4, #8]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80025d0:	6822      	ldr	r2, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d6:	d107      	bne.n	80025e8 <HAL_UART_Transmit+0x9e>
 80025d8:	6923      	ldr	r3, [r4, #16]
 80025da:	b92b      	cbnz	r3, 80025e8 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80025dc:	f835 3b02 	ldrh.w	r3, [r5], #2
 80025e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80025e4:	8513      	strh	r3, [r2, #40]	; 0x28
 80025e6:	e7d0      	b.n	800258a <HAL_UART_Transmit+0x40>
 80025e8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80025ec:	e7fa      	b.n	80025e4 <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 80025ee:	2001      	movs	r0, #1
 80025f0:	e7eb      	b.n	80025ca <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 80025f2:	2002      	movs	r0, #2
 80025f4:	e7e9      	b.n	80025ca <HAL_UART_Transmit+0x80>

080025f6 <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025f6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80025fa:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80025fc:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002600:	2b20      	cmp	r3, #32
{
 8002602:	460d      	mov	r5, r1
 8002604:	4604      	mov	r4, r0
 8002606:	4611      	mov	r1, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8002608:	d15c      	bne.n	80026c4 <HAL_UART_Receive+0xce>
  {
    if((pData == NULL ) || (Size == 0U))
 800260a:	2d00      	cmp	r5, #0
 800260c:	d058      	beq.n	80026c0 <HAL_UART_Receive+0xca>
 800260e:	2a00      	cmp	r2, #0
 8002610:	d056      	beq.n	80026c0 <HAL_UART_Receive+0xca>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002612:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002616:	2b01      	cmp	r3, #1
 8002618:	d054      	beq.n	80026c4 <HAL_UART_Receive+0xce>
 800261a:	2301      	movs	r3, #1
 800261c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 8002620:	6803      	ldr	r3, [r0, #0]
 8002622:	f04f 32ff 	mov.w	r2, #4294967295
 8002626:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002628:	2300      	movs	r3, #0
 800262a:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800262c:	2322      	movs	r3, #34	; 0x22
 800262e:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002632:	f7ff fa2b 	bl	8001a8c <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002636:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 8002638:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 800263c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002640:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 8002642:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8002646:	d115      	bne.n	8002674 <HAL_UART_Receive+0x7e>
 8002648:	6923      	ldr	r3, [r4, #16]
 800264a:	b98b      	cbnz	r3, 8002670 <HAL_UART_Receive+0x7a>
 800264c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002650:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8002654:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8002658:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 800265c:	b280      	uxth	r0, r0
 800265e:	b980      	cbnz	r0, 8002682 <HAL_UART_Receive+0x8c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002660:	2320      	movs	r3, #32
 8002662:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002666:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  }
  else
  {
    return HAL_BUSY;
  }
}
 800266a:	b002      	add	sp, #8
 800266c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8002670:	23ff      	movs	r3, #255	; 0xff
 8002672:	e7ed      	b.n	8002650 <HAL_UART_Receive+0x5a>
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1ed      	bne.n	8002654 <HAL_UART_Receive+0x5e>
 8002678:	6923      	ldr	r3, [r4, #16]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f8      	beq.n	8002670 <HAL_UART_Receive+0x7a>
 800267e:	237f      	movs	r3, #127	; 0x7f
 8002680:	e7e6      	b.n	8002650 <HAL_UART_Receive+0x5a>
      huart->RxXferCount--;
 8002682:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002686:	9600      	str	r6, [sp, #0]
      huart->RxXferCount--;
 8002688:	3a01      	subs	r2, #1
 800268a:	b292      	uxth	r2, r2
 800268c:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002690:	4643      	mov	r3, r8
 8002692:	2200      	movs	r2, #0
 8002694:	2120      	movs	r1, #32
 8002696:	4620      	mov	r0, r4
 8002698:	f7ff fece 	bl	8002438 <UART_WaitOnFlagUntilTimeout>
 800269c:	b9a0      	cbnz	r0, 80026c8 <HAL_UART_Receive+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800269e:	68a2      	ldr	r2, [r4, #8]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80026a0:	6823      	ldr	r3, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026a2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80026a6:	d106      	bne.n	80026b6 <HAL_UART_Receive+0xc0>
 80026a8:	6922      	ldr	r2, [r4, #16]
 80026aa:	b922      	cbnz	r2, 80026b6 <HAL_UART_Receive+0xc0>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80026ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80026ae:	403b      	ands	r3, r7
 80026b0:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 80026b4:	e7d0      	b.n	8002658 <HAL_UART_Receive+0x62>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80026b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80026b8:	403b      	ands	r3, r7
 80026ba:	f805 3b01 	strb.w	r3, [r5], #1
 80026be:	e7cb      	b.n	8002658 <HAL_UART_Receive+0x62>
      return  HAL_ERROR;
 80026c0:	2001      	movs	r0, #1
 80026c2:	e7d2      	b.n	800266a <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 80026c4:	2002      	movs	r0, #2
 80026c6:	e7d0      	b.n	800266a <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 80026c8:	2003      	movs	r0, #3
 80026ca:	e7ce      	b.n	800266a <HAL_UART_Receive+0x74>

080026cc <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80026cc:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <_sbrk+0x2c>)
 80026ce:	6811      	ldr	r1, [r2, #0]
{
 80026d0:	b508      	push	{r3, lr}
 80026d2:	4603      	mov	r3, r0
	if (heap_end == 0)
 80026d4:	b909      	cbnz	r1, 80026da <_sbrk+0xe>
		heap_end = &end;
 80026d6:	4909      	ldr	r1, [pc, #36]	; (80026fc <_sbrk+0x30>)
 80026d8:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 80026da:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80026dc:	4669      	mov	r1, sp
 80026de:	4403      	add	r3, r0
 80026e0:	428b      	cmp	r3, r1
 80026e2:	d906      	bls.n	80026f2 <_sbrk+0x26>
	{
		errno = ENOMEM;
 80026e4:	f000 fa4c 	bl	8002b80 <__errno>
 80026e8:	230c      	movs	r3, #12
 80026ea:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80026ec:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80026f0:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80026f2:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 80026f4:	e7fc      	b.n	80026f0 <_sbrk+0x24>
 80026f6:	bf00      	nop
 80026f8:	200002f8 	.word	0x200002f8
 80026fc:	20000310 	.word	0x20000310

08002700 <Reset_Handler>:
 8002700:	2100      	movs	r1, #0
 8002702:	e003      	b.n	800270c <LoopCopyDataInit>

08002704 <CopyDataInit>:
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <LoopForever+0x2>)
 8002706:	585b      	ldr	r3, [r3, r1]
 8002708:	5043      	str	r3, [r0, r1]
 800270a:	3104      	adds	r1, #4

0800270c <LoopCopyDataInit>:
 800270c:	480a      	ldr	r0, [pc, #40]	; (8002738 <LoopForever+0x6>)
 800270e:	4b0b      	ldr	r3, [pc, #44]	; (800273c <LoopForever+0xa>)
 8002710:	1842      	adds	r2, r0, r1
 8002712:	429a      	cmp	r2, r3
 8002714:	d3f6      	bcc.n	8002704 <CopyDataInit>
 8002716:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <LoopForever+0xe>)
 8002718:	e002      	b.n	8002720 <LoopFillZerobss>

0800271a <FillZerobss>:
 800271a:	2300      	movs	r3, #0
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	3204      	adds	r2, #4

08002720 <LoopFillZerobss>:
 8002720:	4b08      	ldr	r3, [pc, #32]	; (8002744 <LoopForever+0x12>)
 8002722:	429a      	cmp	r2, r3
 8002724:	d3f9      	bcc.n	800271a <FillZerobss>
 8002726:	f3af 8000 	nop.w
 800272a:	f000 fa2f 	bl	8002b8c <__libc_init_array>
 800272e:	f7fe fd49 	bl	80011c4 <main>

08002732 <LoopForever>:
 8002732:	e7fe      	b.n	8002732 <LoopForever>
 8002734:	08004058 	.word	0x08004058
 8002738:	20000000 	.word	0x20000000
 800273c:	20000068 	.word	0x20000068
 8002740:	20000068 	.word	0x20000068
 8002744:	2000030c 	.word	0x2000030c

08002748 <BusFault_Handler>:
 8002748:	e7fe      	b.n	8002748 <BusFault_Handler>
 800274a:	0000      	movs	r0, r0
 800274c:	0000      	movs	r0, r0
 800274e:	0000      	movs	r0, r0

08002750 <exp>:
 8002750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002752:	4604      	mov	r4, r0
 8002754:	460d      	mov	r5, r1
 8002756:	f000 f83b 	bl	80027d0 <__ieee754_exp>
 800275a:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <exp+0x78>)
 800275c:	f993 3000 	ldrsb.w	r3, [r3]
 8002760:	3301      	adds	r3, #1
 8002762:	4606      	mov	r6, r0
 8002764:	460f      	mov	r7, r1
 8002766:	d014      	beq.n	8002792 <exp+0x42>
 8002768:	4620      	mov	r0, r4
 800276a:	4629      	mov	r1, r5
 800276c:	f000 fa02 	bl	8002b74 <finite>
 8002770:	b178      	cbz	r0, 8002792 <exp+0x42>
 8002772:	a311      	add	r3, pc, #68	; (adr r3, 80027b8 <exp+0x68>)
 8002774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002778:	4620      	mov	r0, r4
 800277a:	4629      	mov	r1, r5
 800277c:	f7fe fa28 	bl	8000bd0 <__aeabi_dcmpgt>
 8002780:	b988      	cbnz	r0, 80027a6 <exp+0x56>
 8002782:	a30f      	add	r3, pc, #60	; (adr r3, 80027c0 <exp+0x70>)
 8002784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002788:	4620      	mov	r0, r4
 800278a:	4629      	mov	r1, r5
 800278c:	f7fe fa02 	bl	8000b94 <__aeabi_dcmplt>
 8002790:	b910      	cbnz	r0, 8002798 <exp+0x48>
 8002792:	4630      	mov	r0, r6
 8002794:	4639      	mov	r1, r7
 8002796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002798:	f000 f9f2 	bl	8002b80 <__errno>
 800279c:	2322      	movs	r3, #34	; 0x22
 800279e:	6003      	str	r3, [r0, #0]
 80027a0:	2600      	movs	r6, #0
 80027a2:	2700      	movs	r7, #0
 80027a4:	e7f5      	b.n	8002792 <exp+0x42>
 80027a6:	f000 f9eb 	bl	8002b80 <__errno>
 80027aa:	2322      	movs	r3, #34	; 0x22
 80027ac:	4f07      	ldr	r7, [pc, #28]	; (80027cc <exp+0x7c>)
 80027ae:	6003      	str	r3, [r0, #0]
 80027b0:	2600      	movs	r6, #0
 80027b2:	e7ee      	b.n	8002792 <exp+0x42>
 80027b4:	f3af 8000 	nop.w
 80027b8:	fefa39ef 	.word	0xfefa39ef
 80027bc:	40862e42 	.word	0x40862e42
 80027c0:	d52d3051 	.word	0xd52d3051
 80027c4:	c0874910 	.word	0xc0874910
 80027c8:	20000000 	.word	0x20000000
 80027cc:	7ff00000 	.word	0x7ff00000

080027d0 <__ieee754_exp>:
 80027d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027d4:	4fd4      	ldr	r7, [pc, #848]	; (8002b28 <__ieee754_exp+0x358>)
 80027d6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80027da:	42ba      	cmp	r2, r7
 80027dc:	b087      	sub	sp, #28
 80027de:	4605      	mov	r5, r0
 80027e0:	460c      	mov	r4, r1
 80027e2:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80027e6:	d912      	bls.n	800280e <__ieee754_exp+0x3e>
 80027e8:	4fd0      	ldr	r7, [pc, #832]	; (8002b2c <__ieee754_exp+0x35c>)
 80027ea:	42ba      	cmp	r2, r7
 80027ec:	d92b      	bls.n	8002846 <__ieee754_exp+0x76>
 80027ee:	f3c1 0313 	ubfx	r3, r1, #0, #20
 80027f2:	4303      	orrs	r3, r0
 80027f4:	4602      	mov	r2, r0
 80027f6:	f040 8157 	bne.w	8002aa8 <__ieee754_exp+0x2d8>
 80027fa:	2e00      	cmp	r6, #0
 80027fc:	f000 80ee 	beq.w	80029dc <__ieee754_exp+0x20c>
 8002800:	2500      	movs	r5, #0
 8002802:	462c      	mov	r4, r5
 8002804:	4628      	mov	r0, r5
 8002806:	4621      	mov	r1, r4
 8002808:	b007      	add	sp, #28
 800280a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800280e:	4bc8      	ldr	r3, [pc, #800]	; (8002b30 <__ieee754_exp+0x360>)
 8002810:	429a      	cmp	r2, r3
 8002812:	d855      	bhi.n	80028c0 <__ieee754_exp+0xf0>
 8002814:	4bc7      	ldr	r3, [pc, #796]	; (8002b34 <__ieee754_exp+0x364>)
 8002816:	429a      	cmp	r2, r3
 8002818:	f200 80e5 	bhi.w	80029e6 <__ieee754_exp+0x216>
 800281c:	a3ac      	add	r3, pc, #688	; (adr r3, 8002ad0 <__ieee754_exp+0x300>)
 800281e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002822:	f7fd fd8f 	bl	8000344 <__adddf3>
 8002826:	4bc4      	ldr	r3, [pc, #784]	; (8002b38 <__ieee754_exp+0x368>)
 8002828:	2200      	movs	r2, #0
 800282a:	f7fe f9d1 	bl	8000bd0 <__aeabi_dcmpgt>
 800282e:	2800      	cmp	r0, #0
 8002830:	f000 80d9 	beq.w	80029e6 <__ieee754_exp+0x216>
 8002834:	4628      	mov	r0, r5
 8002836:	4621      	mov	r1, r4
 8002838:	4bbf      	ldr	r3, [pc, #764]	; (8002b38 <__ieee754_exp+0x368>)
 800283a:	2200      	movs	r2, #0
 800283c:	f7fd fd82 	bl	8000344 <__adddf3>
 8002840:	4605      	mov	r5, r0
 8002842:	460c      	mov	r4, r1
 8002844:	e0ca      	b.n	80029dc <__ieee754_exp+0x20c>
 8002846:	a3a4      	add	r3, pc, #656	; (adr r3, 8002ad8 <__ieee754_exp+0x308>)
 8002848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284c:	f7fe f9c0 	bl	8000bd0 <__aeabi_dcmpgt>
 8002850:	2800      	cmp	r0, #0
 8002852:	f040 8133 	bne.w	8002abc <__ieee754_exp+0x2ec>
 8002856:	a3a2      	add	r3, pc, #648	; (adr r3, 8002ae0 <__ieee754_exp+0x310>)
 8002858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285c:	4628      	mov	r0, r5
 800285e:	4621      	mov	r1, r4
 8002860:	f7fe f998 	bl	8000b94 <__aeabi_dcmplt>
 8002864:	2800      	cmp	r0, #0
 8002866:	d1cb      	bne.n	8002800 <__ieee754_exp+0x30>
 8002868:	4bb4      	ldr	r3, [pc, #720]	; (8002b3c <__ieee754_exp+0x36c>)
 800286a:	4628      	mov	r0, r5
 800286c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8002870:	4621      	mov	r1, r4
 8002872:	a39d      	add	r3, pc, #628	; (adr r3, 8002ae8 <__ieee754_exp+0x318>)
 8002874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002878:	f7fd ff1a 	bl	80006b0 <__aeabi_dmul>
 800287c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002880:	f7fd fd60 	bl	8000344 <__adddf3>
 8002884:	f7fe f9ae 	bl	8000be4 <__aeabi_d2iz>
 8002888:	9001      	str	r0, [sp, #4]
 800288a:	f7fd fea7 	bl	80005dc <__aeabi_i2d>
 800288e:	a398      	add	r3, pc, #608	; (adr r3, 8002af0 <__ieee754_exp+0x320>)
 8002890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002894:	4606      	mov	r6, r0
 8002896:	460f      	mov	r7, r1
 8002898:	f7fd ff0a 	bl	80006b0 <__aeabi_dmul>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4628      	mov	r0, r5
 80028a2:	4621      	mov	r1, r4
 80028a4:	f7fd fd4c 	bl	8000340 <__aeabi_dsub>
 80028a8:	a393      	add	r3, pc, #588	; (adr r3, 8002af8 <__ieee754_exp+0x328>)
 80028aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ae:	4680      	mov	r8, r0
 80028b0:	4689      	mov	r9, r1
 80028b2:	4630      	mov	r0, r6
 80028b4:	4639      	mov	r1, r7
 80028b6:	f7fd fefb 	bl	80006b0 <__aeabi_dmul>
 80028ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80028be:	e017      	b.n	80028f0 <__ieee754_exp+0x120>
 80028c0:	4b9f      	ldr	r3, [pc, #636]	; (8002b40 <__ieee754_exp+0x370>)
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d8d0      	bhi.n	8002868 <__ieee754_exp+0x98>
 80028c6:	4b9f      	ldr	r3, [pc, #636]	; (8002b44 <__ieee754_exp+0x374>)
 80028c8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80028cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d0:	f7fd fd36 	bl	8000340 <__aeabi_dsub>
 80028d4:	4b9c      	ldr	r3, [pc, #624]	; (8002b48 <__ieee754_exp+0x378>)
 80028d6:	00f4      	lsls	r4, r6, #3
 80028d8:	4423      	add	r3, r4
 80028da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80028de:	f1c6 0a01 	rsb	sl, r6, #1
 80028e2:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80028e6:	ebaa 0306 	sub.w	r3, sl, r6
 80028ea:	4680      	mov	r8, r0
 80028ec:	4689      	mov	r9, r1
 80028ee:	9301      	str	r3, [sp, #4]
 80028f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80028f4:	4640      	mov	r0, r8
 80028f6:	4649      	mov	r1, r9
 80028f8:	f7fd fd22 	bl	8000340 <__aeabi_dsub>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4682      	mov	sl, r0
 8002902:	468b      	mov	fp, r1
 8002904:	4605      	mov	r5, r0
 8002906:	460c      	mov	r4, r1
 8002908:	f7fd fed2 	bl	80006b0 <__aeabi_dmul>
 800290c:	a37c      	add	r3, pc, #496	; (adr r3, 8002b00 <__ieee754_exp+0x330>)
 800290e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002912:	4606      	mov	r6, r0
 8002914:	460f      	mov	r7, r1
 8002916:	f7fd fecb 	bl	80006b0 <__aeabi_dmul>
 800291a:	a37b      	add	r3, pc, #492	; (adr r3, 8002b08 <__ieee754_exp+0x338>)
 800291c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002920:	f7fd fd0e 	bl	8000340 <__aeabi_dsub>
 8002924:	4632      	mov	r2, r6
 8002926:	463b      	mov	r3, r7
 8002928:	f7fd fec2 	bl	80006b0 <__aeabi_dmul>
 800292c:	a378      	add	r3, pc, #480	; (adr r3, 8002b10 <__ieee754_exp+0x340>)
 800292e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002932:	f7fd fd07 	bl	8000344 <__adddf3>
 8002936:	4632      	mov	r2, r6
 8002938:	463b      	mov	r3, r7
 800293a:	f7fd feb9 	bl	80006b0 <__aeabi_dmul>
 800293e:	a376      	add	r3, pc, #472	; (adr r3, 8002b18 <__ieee754_exp+0x348>)
 8002940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002944:	f7fd fcfc 	bl	8000340 <__aeabi_dsub>
 8002948:	4632      	mov	r2, r6
 800294a:	463b      	mov	r3, r7
 800294c:	f7fd feb0 	bl	80006b0 <__aeabi_dmul>
 8002950:	a373      	add	r3, pc, #460	; (adr r3, 8002b20 <__ieee754_exp+0x350>)
 8002952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002956:	f7fd fcf5 	bl	8000344 <__adddf3>
 800295a:	4632      	mov	r2, r6
 800295c:	463b      	mov	r3, r7
 800295e:	f7fd fea7 	bl	80006b0 <__aeabi_dmul>
 8002962:	460b      	mov	r3, r1
 8002964:	4602      	mov	r2, r0
 8002966:	4659      	mov	r1, fp
 8002968:	4650      	mov	r0, sl
 800296a:	f7fd fce9 	bl	8000340 <__aeabi_dsub>
 800296e:	9b01      	ldr	r3, [sp, #4]
 8002970:	4606      	mov	r6, r0
 8002972:	460f      	mov	r7, r1
 8002974:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d06d      	beq.n	8002a58 <__ieee754_exp+0x288>
 800297c:	4632      	mov	r2, r6
 800297e:	463b      	mov	r3, r7
 8002980:	4650      	mov	r0, sl
 8002982:	4659      	mov	r1, fp
 8002984:	f7fd fe94 	bl	80006b0 <__aeabi_dmul>
 8002988:	4632      	mov	r2, r6
 800298a:	4604      	mov	r4, r0
 800298c:	460d      	mov	r5, r1
 800298e:	463b      	mov	r3, r7
 8002990:	2000      	movs	r0, #0
 8002992:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002996:	f7fd fcd3 	bl	8000340 <__aeabi_dsub>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4620      	mov	r0, r4
 80029a0:	4629      	mov	r1, r5
 80029a2:	f7fd ffaf 	bl	8000904 <__aeabi_ddiv>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80029ae:	f7fd fcc7 	bl	8000340 <__aeabi_dsub>
 80029b2:	4642      	mov	r2, r8
 80029b4:	464b      	mov	r3, r9
 80029b6:	f7fd fcc3 	bl	8000340 <__aeabi_dsub>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	2000      	movs	r0, #0
 80029c0:	495d      	ldr	r1, [pc, #372]	; (8002b38 <__ieee754_exp+0x368>)
 80029c2:	f7fd fcbd 	bl	8000340 <__aeabi_dsub>
 80029c6:	9c01      	ldr	r4, [sp, #4]
 80029c8:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
 80029cc:	429c      	cmp	r4, r3
 80029ce:	4602      	mov	r2, r0
 80029d0:	f2c0 80bc 	blt.w	8002b4c <__ieee754_exp+0x37c>
 80029d4:	eb01 5304 	add.w	r3, r1, r4, lsl #20
 80029d8:	4605      	mov	r5, r0
 80029da:	461c      	mov	r4, r3
 80029dc:	4628      	mov	r0, r5
 80029de:	4621      	mov	r1, r4
 80029e0:	b007      	add	sp, #28
 80029e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029e6:	462a      	mov	r2, r5
 80029e8:	4623      	mov	r3, r4
 80029ea:	4628      	mov	r0, r5
 80029ec:	4621      	mov	r1, r4
 80029ee:	f7fd fe5f 	bl	80006b0 <__aeabi_dmul>
 80029f2:	a343      	add	r3, pc, #268	; (adr r3, 8002b00 <__ieee754_exp+0x330>)
 80029f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f8:	4606      	mov	r6, r0
 80029fa:	460f      	mov	r7, r1
 80029fc:	f7fd fe58 	bl	80006b0 <__aeabi_dmul>
 8002a00:	a341      	add	r3, pc, #260	; (adr r3, 8002b08 <__ieee754_exp+0x338>)
 8002a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a06:	f7fd fc9b 	bl	8000340 <__aeabi_dsub>
 8002a0a:	4632      	mov	r2, r6
 8002a0c:	463b      	mov	r3, r7
 8002a0e:	f7fd fe4f 	bl	80006b0 <__aeabi_dmul>
 8002a12:	a33f      	add	r3, pc, #252	; (adr r3, 8002b10 <__ieee754_exp+0x340>)
 8002a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a18:	f7fd fc94 	bl	8000344 <__adddf3>
 8002a1c:	4632      	mov	r2, r6
 8002a1e:	463b      	mov	r3, r7
 8002a20:	f7fd fe46 	bl	80006b0 <__aeabi_dmul>
 8002a24:	a33c      	add	r3, pc, #240	; (adr r3, 8002b18 <__ieee754_exp+0x348>)
 8002a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2a:	f7fd fc89 	bl	8000340 <__aeabi_dsub>
 8002a2e:	4632      	mov	r2, r6
 8002a30:	463b      	mov	r3, r7
 8002a32:	f7fd fe3d 	bl	80006b0 <__aeabi_dmul>
 8002a36:	a33a      	add	r3, pc, #232	; (adr r3, 8002b20 <__ieee754_exp+0x350>)
 8002a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3c:	f7fd fc82 	bl	8000344 <__adddf3>
 8002a40:	4632      	mov	r2, r6
 8002a42:	463b      	mov	r3, r7
 8002a44:	f7fd fe34 	bl	80006b0 <__aeabi_dmul>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4628      	mov	r0, r5
 8002a4e:	4621      	mov	r1, r4
 8002a50:	f7fd fc76 	bl	8000340 <__aeabi_dsub>
 8002a54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002a58:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8002a5c:	4628      	mov	r0, r5
 8002a5e:	4642      	mov	r2, r8
 8002a60:	464b      	mov	r3, r9
 8002a62:	4621      	mov	r1, r4
 8002a64:	f7fd fe24 	bl	80006b0 <__aeabi_dmul>
 8002a68:	2200      	movs	r2, #0
 8002a6a:	4606      	mov	r6, r0
 8002a6c:	460f      	mov	r7, r1
 8002a6e:	4640      	mov	r0, r8
 8002a70:	4649      	mov	r1, r9
 8002a72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a76:	f7fd fc63 	bl	8000340 <__aeabi_dsub>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4630      	mov	r0, r6
 8002a80:	4639      	mov	r1, r7
 8002a82:	f7fd ff3f 	bl	8000904 <__aeabi_ddiv>
 8002a86:	462a      	mov	r2, r5
 8002a88:	4623      	mov	r3, r4
 8002a8a:	f7fd fc59 	bl	8000340 <__aeabi_dsub>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	2000      	movs	r0, #0
 8002a94:	4928      	ldr	r1, [pc, #160]	; (8002b38 <__ieee754_exp+0x368>)
 8002a96:	f7fd fc53 	bl	8000340 <__aeabi_dsub>
 8002a9a:	4605      	mov	r5, r0
 8002a9c:	460c      	mov	r4, r1
 8002a9e:	4628      	mov	r0, r5
 8002aa0:	4621      	mov	r1, r4
 8002aa2:	b007      	add	sp, #28
 8002aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	f7fd fc4b 	bl	8000344 <__adddf3>
 8002aae:	4605      	mov	r5, r0
 8002ab0:	460c      	mov	r4, r1
 8002ab2:	4628      	mov	r0, r5
 8002ab4:	4621      	mov	r1, r4
 8002ab6:	b007      	add	sp, #28
 8002ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002abc:	a304      	add	r3, pc, #16	; (adr r3, 8002ad0 <__ieee754_exp+0x300>)
 8002abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	f7fd fdf3 	bl	80006b0 <__aeabi_dmul>
 8002aca:	4605      	mov	r5, r0
 8002acc:	460c      	mov	r4, r1
 8002ace:	e785      	b.n	80029dc <__ieee754_exp+0x20c>
 8002ad0:	8800759c 	.word	0x8800759c
 8002ad4:	7e37e43c 	.word	0x7e37e43c
 8002ad8:	fefa39ef 	.word	0xfefa39ef
 8002adc:	40862e42 	.word	0x40862e42
 8002ae0:	d52d3051 	.word	0xd52d3051
 8002ae4:	c0874910 	.word	0xc0874910
 8002ae8:	652b82fe 	.word	0x652b82fe
 8002aec:	3ff71547 	.word	0x3ff71547
 8002af0:	fee00000 	.word	0xfee00000
 8002af4:	3fe62e42 	.word	0x3fe62e42
 8002af8:	35793c76 	.word	0x35793c76
 8002afc:	3dea39ef 	.word	0x3dea39ef
 8002b00:	72bea4d0 	.word	0x72bea4d0
 8002b04:	3e663769 	.word	0x3e663769
 8002b08:	c5d26bf1 	.word	0xc5d26bf1
 8002b0c:	3ebbbd41 	.word	0x3ebbbd41
 8002b10:	af25de2c 	.word	0xaf25de2c
 8002b14:	3f11566a 	.word	0x3f11566a
 8002b18:	16bebd93 	.word	0x16bebd93
 8002b1c:	3f66c16c 	.word	0x3f66c16c
 8002b20:	5555553e 	.word	0x5555553e
 8002b24:	3fc55555 	.word	0x3fc55555
 8002b28:	40862e41 	.word	0x40862e41
 8002b2c:	7fefffff 	.word	0x7fefffff
 8002b30:	3fd62e42 	.word	0x3fd62e42
 8002b34:	3e2fffff 	.word	0x3e2fffff
 8002b38:	3ff00000 	.word	0x3ff00000
 8002b3c:	08003eb8 	.word	0x08003eb8
 8002b40:	3ff0a2b1 	.word	0x3ff0a2b1
 8002b44:	08003ec8 	.word	0x08003ec8
 8002b48:	08003ed8 	.word	0x08003ed8
 8002b4c:	9801      	ldr	r0, [sp, #4]
 8002b4e:	f500 7a7a 	add.w	sl, r0, #1000	; 0x3e8
 8002b52:	eb01 530a 	add.w	r3, r1, sl, lsl #20
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8002b60:	f7fd fda6 	bl	80006b0 <__aeabi_dmul>
 8002b64:	4605      	mov	r5, r0
 8002b66:	460c      	mov	r4, r1
 8002b68:	4628      	mov	r0, r5
 8002b6a:	4621      	mov	r1, r4
 8002b6c:	b007      	add	sp, #28
 8002b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b72:	bf00      	nop

08002b74 <finite>:
 8002b74:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8002b78:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8002b7c:	0fc0      	lsrs	r0, r0, #31
 8002b7e:	4770      	bx	lr

08002b80 <__errno>:
 8002b80:	4b01      	ldr	r3, [pc, #4]	; (8002b88 <__errno+0x8>)
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000004 	.word	0x20000004

08002b8c <__libc_init_array>:
 8002b8c:	b570      	push	{r4, r5, r6, lr}
 8002b8e:	4d0d      	ldr	r5, [pc, #52]	; (8002bc4 <__libc_init_array+0x38>)
 8002b90:	4c0d      	ldr	r4, [pc, #52]	; (8002bc8 <__libc_init_array+0x3c>)
 8002b92:	1b64      	subs	r4, r4, r5
 8002b94:	10a4      	asrs	r4, r4, #2
 8002b96:	2600      	movs	r6, #0
 8002b98:	42a6      	cmp	r6, r4
 8002b9a:	d109      	bne.n	8002bb0 <__libc_init_array+0x24>
 8002b9c:	4d0b      	ldr	r5, [pc, #44]	; (8002bcc <__libc_init_array+0x40>)
 8002b9e:	4c0c      	ldr	r4, [pc, #48]	; (8002bd0 <__libc_init_array+0x44>)
 8002ba0:	f001 f8d0 	bl	8003d44 <_init>
 8002ba4:	1b64      	subs	r4, r4, r5
 8002ba6:	10a4      	asrs	r4, r4, #2
 8002ba8:	2600      	movs	r6, #0
 8002baa:	42a6      	cmp	r6, r4
 8002bac:	d105      	bne.n	8002bba <__libc_init_array+0x2e>
 8002bae:	bd70      	pop	{r4, r5, r6, pc}
 8002bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb4:	4798      	blx	r3
 8002bb6:	3601      	adds	r6, #1
 8002bb8:	e7ee      	b.n	8002b98 <__libc_init_array+0xc>
 8002bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bbe:	4798      	blx	r3
 8002bc0:	3601      	adds	r6, #1
 8002bc2:	e7f2      	b.n	8002baa <__libc_init_array+0x1e>
 8002bc4:	08004050 	.word	0x08004050
 8002bc8:	08004050 	.word	0x08004050
 8002bcc:	08004050 	.word	0x08004050
 8002bd0:	08004054 	.word	0x08004054

08002bd4 <malloc>:
 8002bd4:	4b02      	ldr	r3, [pc, #8]	; (8002be0 <malloc+0xc>)
 8002bd6:	4601      	mov	r1, r0
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	f000 b86b 	b.w	8002cb4 <_malloc_r>
 8002bde:	bf00      	nop
 8002be0:	20000004 	.word	0x20000004

08002be4 <free>:
 8002be4:	4b02      	ldr	r3, [pc, #8]	; (8002bf0 <free+0xc>)
 8002be6:	4601      	mov	r1, r0
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	f000 b819 	b.w	8002c20 <_free_r>
 8002bee:	bf00      	nop
 8002bf0:	20000004 	.word	0x20000004

08002bf4 <memcpy>:
 8002bf4:	440a      	add	r2, r1
 8002bf6:	4291      	cmp	r1, r2
 8002bf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8002bfc:	d100      	bne.n	8002c00 <memcpy+0xc>
 8002bfe:	4770      	bx	lr
 8002c00:	b510      	push	{r4, lr}
 8002c02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c0a:	4291      	cmp	r1, r2
 8002c0c:	d1f9      	bne.n	8002c02 <memcpy+0xe>
 8002c0e:	bd10      	pop	{r4, pc}

08002c10 <memset>:
 8002c10:	4402      	add	r2, r0
 8002c12:	4603      	mov	r3, r0
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d100      	bne.n	8002c1a <memset+0xa>
 8002c18:	4770      	bx	lr
 8002c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c1e:	e7f9      	b.n	8002c14 <memset+0x4>

08002c20 <_free_r>:
 8002c20:	b538      	push	{r3, r4, r5, lr}
 8002c22:	4605      	mov	r5, r0
 8002c24:	2900      	cmp	r1, #0
 8002c26:	d041      	beq.n	8002cac <_free_r+0x8c>
 8002c28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c2c:	1f0c      	subs	r4, r1, #4
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	bfb8      	it	lt
 8002c32:	18e4      	addlt	r4, r4, r3
 8002c34:	f000 fc4c 	bl	80034d0 <__malloc_lock>
 8002c38:	4a1d      	ldr	r2, [pc, #116]	; (8002cb0 <_free_r+0x90>)
 8002c3a:	6813      	ldr	r3, [r2, #0]
 8002c3c:	b933      	cbnz	r3, 8002c4c <_free_r+0x2c>
 8002c3e:	6063      	str	r3, [r4, #4]
 8002c40:	6014      	str	r4, [r2, #0]
 8002c42:	4628      	mov	r0, r5
 8002c44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c48:	f000 bc48 	b.w	80034dc <__malloc_unlock>
 8002c4c:	42a3      	cmp	r3, r4
 8002c4e:	d908      	bls.n	8002c62 <_free_r+0x42>
 8002c50:	6820      	ldr	r0, [r4, #0]
 8002c52:	1821      	adds	r1, r4, r0
 8002c54:	428b      	cmp	r3, r1
 8002c56:	bf01      	itttt	eq
 8002c58:	6819      	ldreq	r1, [r3, #0]
 8002c5a:	685b      	ldreq	r3, [r3, #4]
 8002c5c:	1809      	addeq	r1, r1, r0
 8002c5e:	6021      	streq	r1, [r4, #0]
 8002c60:	e7ed      	b.n	8002c3e <_free_r+0x1e>
 8002c62:	461a      	mov	r2, r3
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	b10b      	cbz	r3, 8002c6c <_free_r+0x4c>
 8002c68:	42a3      	cmp	r3, r4
 8002c6a:	d9fa      	bls.n	8002c62 <_free_r+0x42>
 8002c6c:	6811      	ldr	r1, [r2, #0]
 8002c6e:	1850      	adds	r0, r2, r1
 8002c70:	42a0      	cmp	r0, r4
 8002c72:	d10b      	bne.n	8002c8c <_free_r+0x6c>
 8002c74:	6820      	ldr	r0, [r4, #0]
 8002c76:	4401      	add	r1, r0
 8002c78:	1850      	adds	r0, r2, r1
 8002c7a:	4283      	cmp	r3, r0
 8002c7c:	6011      	str	r1, [r2, #0]
 8002c7e:	d1e0      	bne.n	8002c42 <_free_r+0x22>
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	6053      	str	r3, [r2, #4]
 8002c86:	4401      	add	r1, r0
 8002c88:	6011      	str	r1, [r2, #0]
 8002c8a:	e7da      	b.n	8002c42 <_free_r+0x22>
 8002c8c:	d902      	bls.n	8002c94 <_free_r+0x74>
 8002c8e:	230c      	movs	r3, #12
 8002c90:	602b      	str	r3, [r5, #0]
 8002c92:	e7d6      	b.n	8002c42 <_free_r+0x22>
 8002c94:	6820      	ldr	r0, [r4, #0]
 8002c96:	1821      	adds	r1, r4, r0
 8002c98:	428b      	cmp	r3, r1
 8002c9a:	bf04      	itt	eq
 8002c9c:	6819      	ldreq	r1, [r3, #0]
 8002c9e:	685b      	ldreq	r3, [r3, #4]
 8002ca0:	6063      	str	r3, [r4, #4]
 8002ca2:	bf04      	itt	eq
 8002ca4:	1809      	addeq	r1, r1, r0
 8002ca6:	6021      	streq	r1, [r4, #0]
 8002ca8:	6054      	str	r4, [r2, #4]
 8002caa:	e7ca      	b.n	8002c42 <_free_r+0x22>
 8002cac:	bd38      	pop	{r3, r4, r5, pc}
 8002cae:	bf00      	nop
 8002cb0:	200002fc 	.word	0x200002fc

08002cb4 <_malloc_r>:
 8002cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb6:	1ccd      	adds	r5, r1, #3
 8002cb8:	f025 0503 	bic.w	r5, r5, #3
 8002cbc:	3508      	adds	r5, #8
 8002cbe:	2d0c      	cmp	r5, #12
 8002cc0:	bf38      	it	cc
 8002cc2:	250c      	movcc	r5, #12
 8002cc4:	2d00      	cmp	r5, #0
 8002cc6:	4606      	mov	r6, r0
 8002cc8:	db01      	blt.n	8002cce <_malloc_r+0x1a>
 8002cca:	42a9      	cmp	r1, r5
 8002ccc:	d903      	bls.n	8002cd6 <_malloc_r+0x22>
 8002cce:	230c      	movs	r3, #12
 8002cd0:	6033      	str	r3, [r6, #0]
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cd6:	f000 fbfb 	bl	80034d0 <__malloc_lock>
 8002cda:	4921      	ldr	r1, [pc, #132]	; (8002d60 <_malloc_r+0xac>)
 8002cdc:	680a      	ldr	r2, [r1, #0]
 8002cde:	4614      	mov	r4, r2
 8002ce0:	b99c      	cbnz	r4, 8002d0a <_malloc_r+0x56>
 8002ce2:	4f20      	ldr	r7, [pc, #128]	; (8002d64 <_malloc_r+0xb0>)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	b923      	cbnz	r3, 8002cf2 <_malloc_r+0x3e>
 8002ce8:	4621      	mov	r1, r4
 8002cea:	4630      	mov	r0, r6
 8002cec:	f000 f8a8 	bl	8002e40 <_sbrk_r>
 8002cf0:	6038      	str	r0, [r7, #0]
 8002cf2:	4629      	mov	r1, r5
 8002cf4:	4630      	mov	r0, r6
 8002cf6:	f000 f8a3 	bl	8002e40 <_sbrk_r>
 8002cfa:	1c43      	adds	r3, r0, #1
 8002cfc:	d123      	bne.n	8002d46 <_malloc_r+0x92>
 8002cfe:	230c      	movs	r3, #12
 8002d00:	6033      	str	r3, [r6, #0]
 8002d02:	4630      	mov	r0, r6
 8002d04:	f000 fbea 	bl	80034dc <__malloc_unlock>
 8002d08:	e7e3      	b.n	8002cd2 <_malloc_r+0x1e>
 8002d0a:	6823      	ldr	r3, [r4, #0]
 8002d0c:	1b5b      	subs	r3, r3, r5
 8002d0e:	d417      	bmi.n	8002d40 <_malloc_r+0x8c>
 8002d10:	2b0b      	cmp	r3, #11
 8002d12:	d903      	bls.n	8002d1c <_malloc_r+0x68>
 8002d14:	6023      	str	r3, [r4, #0]
 8002d16:	441c      	add	r4, r3
 8002d18:	6025      	str	r5, [r4, #0]
 8002d1a:	e004      	b.n	8002d26 <_malloc_r+0x72>
 8002d1c:	6863      	ldr	r3, [r4, #4]
 8002d1e:	42a2      	cmp	r2, r4
 8002d20:	bf0c      	ite	eq
 8002d22:	600b      	streq	r3, [r1, #0]
 8002d24:	6053      	strne	r3, [r2, #4]
 8002d26:	4630      	mov	r0, r6
 8002d28:	f000 fbd8 	bl	80034dc <__malloc_unlock>
 8002d2c:	f104 000b 	add.w	r0, r4, #11
 8002d30:	1d23      	adds	r3, r4, #4
 8002d32:	f020 0007 	bic.w	r0, r0, #7
 8002d36:	1ac2      	subs	r2, r0, r3
 8002d38:	d0cc      	beq.n	8002cd4 <_malloc_r+0x20>
 8002d3a:	1a1b      	subs	r3, r3, r0
 8002d3c:	50a3      	str	r3, [r4, r2]
 8002d3e:	e7c9      	b.n	8002cd4 <_malloc_r+0x20>
 8002d40:	4622      	mov	r2, r4
 8002d42:	6864      	ldr	r4, [r4, #4]
 8002d44:	e7cc      	b.n	8002ce0 <_malloc_r+0x2c>
 8002d46:	1cc4      	adds	r4, r0, #3
 8002d48:	f024 0403 	bic.w	r4, r4, #3
 8002d4c:	42a0      	cmp	r0, r4
 8002d4e:	d0e3      	beq.n	8002d18 <_malloc_r+0x64>
 8002d50:	1a21      	subs	r1, r4, r0
 8002d52:	4630      	mov	r0, r6
 8002d54:	f000 f874 	bl	8002e40 <_sbrk_r>
 8002d58:	3001      	adds	r0, #1
 8002d5a:	d1dd      	bne.n	8002d18 <_malloc_r+0x64>
 8002d5c:	e7cf      	b.n	8002cfe <_malloc_r+0x4a>
 8002d5e:	bf00      	nop
 8002d60:	200002fc 	.word	0x200002fc
 8002d64:	20000300 	.word	0x20000300

08002d68 <srand>:
 8002d68:	b538      	push	{r3, r4, r5, lr}
 8002d6a:	4b10      	ldr	r3, [pc, #64]	; (8002dac <srand+0x44>)
 8002d6c:	681d      	ldr	r5, [r3, #0]
 8002d6e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002d70:	4604      	mov	r4, r0
 8002d72:	b9b3      	cbnz	r3, 8002da2 <srand+0x3a>
 8002d74:	2018      	movs	r0, #24
 8002d76:	f7ff ff2d 	bl	8002bd4 <malloc>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	63a8      	str	r0, [r5, #56]	; 0x38
 8002d7e:	b920      	cbnz	r0, 8002d8a <srand+0x22>
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <srand+0x48>)
 8002d82:	480c      	ldr	r0, [pc, #48]	; (8002db4 <srand+0x4c>)
 8002d84:	2142      	movs	r1, #66	; 0x42
 8002d86:	f000 f945 	bl	8003014 <__assert_func>
 8002d8a:	490b      	ldr	r1, [pc, #44]	; (8002db8 <srand+0x50>)
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <srand+0x54>)
 8002d8e:	e9c0 1300 	strd	r1, r3, [r0]
 8002d92:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <srand+0x58>)
 8002d94:	6083      	str	r3, [r0, #8]
 8002d96:	230b      	movs	r3, #11
 8002d98:	8183      	strh	r3, [r0, #12]
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002da2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002da4:	2200      	movs	r2, #0
 8002da6:	611c      	str	r4, [r3, #16]
 8002da8:	615a      	str	r2, [r3, #20]
 8002daa:	bd38      	pop	{r3, r4, r5, pc}
 8002dac:	20000004 	.word	0x20000004
 8002db0:	08003eec 	.word	0x08003eec
 8002db4:	08003f03 	.word	0x08003f03
 8002db8:	abcd330e 	.word	0xabcd330e
 8002dbc:	e66d1234 	.word	0xe66d1234
 8002dc0:	0005deec 	.word	0x0005deec

08002dc4 <rand>:
 8002dc4:	4b16      	ldr	r3, [pc, #88]	; (8002e20 <rand+0x5c>)
 8002dc6:	b510      	push	{r4, lr}
 8002dc8:	681c      	ldr	r4, [r3, #0]
 8002dca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002dcc:	b9b3      	cbnz	r3, 8002dfc <rand+0x38>
 8002dce:	2018      	movs	r0, #24
 8002dd0:	f7ff ff00 	bl	8002bd4 <malloc>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	63a0      	str	r0, [r4, #56]	; 0x38
 8002dd8:	b920      	cbnz	r0, 8002de4 <rand+0x20>
 8002dda:	4b12      	ldr	r3, [pc, #72]	; (8002e24 <rand+0x60>)
 8002ddc:	4812      	ldr	r0, [pc, #72]	; (8002e28 <rand+0x64>)
 8002dde:	214e      	movs	r1, #78	; 0x4e
 8002de0:	f000 f918 	bl	8003014 <__assert_func>
 8002de4:	4911      	ldr	r1, [pc, #68]	; (8002e2c <rand+0x68>)
 8002de6:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <rand+0x6c>)
 8002de8:	e9c0 1300 	strd	r1, r3, [r0]
 8002dec:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <rand+0x70>)
 8002dee:	6083      	str	r3, [r0, #8]
 8002df0:	230b      	movs	r3, #11
 8002df2:	8183      	strh	r3, [r0, #12]
 8002df4:	2100      	movs	r1, #0
 8002df6:	2001      	movs	r0, #1
 8002df8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002dfc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8002dfe:	4a0e      	ldr	r2, [pc, #56]	; (8002e38 <rand+0x74>)
 8002e00:	6920      	ldr	r0, [r4, #16]
 8002e02:	6963      	ldr	r3, [r4, #20]
 8002e04:	490d      	ldr	r1, [pc, #52]	; (8002e3c <rand+0x78>)
 8002e06:	4342      	muls	r2, r0
 8002e08:	fb01 2203 	mla	r2, r1, r3, r2
 8002e0c:	fba0 0101 	umull	r0, r1, r0, r1
 8002e10:	1c43      	adds	r3, r0, #1
 8002e12:	eb42 0001 	adc.w	r0, r2, r1
 8002e16:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8002e1a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002e1e:	bd10      	pop	{r4, pc}
 8002e20:	20000004 	.word	0x20000004
 8002e24:	08003eec 	.word	0x08003eec
 8002e28:	08003f03 	.word	0x08003f03
 8002e2c:	abcd330e 	.word	0xabcd330e
 8002e30:	e66d1234 	.word	0xe66d1234
 8002e34:	0005deec 	.word	0x0005deec
 8002e38:	5851f42d 	.word	0x5851f42d
 8002e3c:	4c957f2d 	.word	0x4c957f2d

08002e40 <_sbrk_r>:
 8002e40:	b538      	push	{r3, r4, r5, lr}
 8002e42:	4d06      	ldr	r5, [pc, #24]	; (8002e5c <_sbrk_r+0x1c>)
 8002e44:	2300      	movs	r3, #0
 8002e46:	4604      	mov	r4, r0
 8002e48:	4608      	mov	r0, r1
 8002e4a:	602b      	str	r3, [r5, #0]
 8002e4c:	f7ff fc3e 	bl	80026cc <_sbrk>
 8002e50:	1c43      	adds	r3, r0, #1
 8002e52:	d102      	bne.n	8002e5a <_sbrk_r+0x1a>
 8002e54:	682b      	ldr	r3, [r5, #0]
 8002e56:	b103      	cbz	r3, 8002e5a <_sbrk_r+0x1a>
 8002e58:	6023      	str	r3, [r4, #0]
 8002e5a:	bd38      	pop	{r3, r4, r5, pc}
 8002e5c:	20000308 	.word	0x20000308

08002e60 <time>:
 8002e60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002e62:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <time+0x30>)
 8002e64:	4604      	mov	r4, r0
 8002e66:	2200      	movs	r2, #0
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	4669      	mov	r1, sp
 8002e6c:	f000 fab6 	bl	80033dc <_gettimeofday_r>
 8002e70:	2800      	cmp	r0, #0
 8002e72:	da05      	bge.n	8002e80 <time+0x20>
 8002e74:	f04f 32ff 	mov.w	r2, #4294967295
 8002e78:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7c:	e9cd 2300 	strd	r2, r3, [sp]
 8002e80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002e84:	b10c      	cbz	r4, 8002e8a <time+0x2a>
 8002e86:	e9c4 0100 	strd	r0, r1, [r4]
 8002e8a:	b004      	add	sp, #16
 8002e8c:	bd10      	pop	{r4, pc}
 8002e8e:	bf00      	nop
 8002e90:	20000004 	.word	0x20000004

08002e94 <__swbuf_r>:
 8002e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e96:	460e      	mov	r6, r1
 8002e98:	4614      	mov	r4, r2
 8002e9a:	4605      	mov	r5, r0
 8002e9c:	b118      	cbz	r0, 8002ea6 <__swbuf_r+0x12>
 8002e9e:	6983      	ldr	r3, [r0, #24]
 8002ea0:	b90b      	cbnz	r3, 8002ea6 <__swbuf_r+0x12>
 8002ea2:	f000 f9eb 	bl	800327c <__sinit>
 8002ea6:	4b21      	ldr	r3, [pc, #132]	; (8002f2c <__swbuf_r+0x98>)
 8002ea8:	429c      	cmp	r4, r3
 8002eaa:	d12b      	bne.n	8002f04 <__swbuf_r+0x70>
 8002eac:	686c      	ldr	r4, [r5, #4]
 8002eae:	69a3      	ldr	r3, [r4, #24]
 8002eb0:	60a3      	str	r3, [r4, #8]
 8002eb2:	89a3      	ldrh	r3, [r4, #12]
 8002eb4:	071a      	lsls	r2, r3, #28
 8002eb6:	d52f      	bpl.n	8002f18 <__swbuf_r+0x84>
 8002eb8:	6923      	ldr	r3, [r4, #16]
 8002eba:	b36b      	cbz	r3, 8002f18 <__swbuf_r+0x84>
 8002ebc:	6923      	ldr	r3, [r4, #16]
 8002ebe:	6820      	ldr	r0, [r4, #0]
 8002ec0:	1ac0      	subs	r0, r0, r3
 8002ec2:	6963      	ldr	r3, [r4, #20]
 8002ec4:	b2f6      	uxtb	r6, r6
 8002ec6:	4283      	cmp	r3, r0
 8002ec8:	4637      	mov	r7, r6
 8002eca:	dc04      	bgt.n	8002ed6 <__swbuf_r+0x42>
 8002ecc:	4621      	mov	r1, r4
 8002ece:	4628      	mov	r0, r5
 8002ed0:	f000 f940 	bl	8003154 <_fflush_r>
 8002ed4:	bb30      	cbnz	r0, 8002f24 <__swbuf_r+0x90>
 8002ed6:	68a3      	ldr	r3, [r4, #8]
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	60a3      	str	r3, [r4, #8]
 8002edc:	6823      	ldr	r3, [r4, #0]
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	6022      	str	r2, [r4, #0]
 8002ee2:	701e      	strb	r6, [r3, #0]
 8002ee4:	6963      	ldr	r3, [r4, #20]
 8002ee6:	3001      	adds	r0, #1
 8002ee8:	4283      	cmp	r3, r0
 8002eea:	d004      	beq.n	8002ef6 <__swbuf_r+0x62>
 8002eec:	89a3      	ldrh	r3, [r4, #12]
 8002eee:	07db      	lsls	r3, r3, #31
 8002ef0:	d506      	bpl.n	8002f00 <__swbuf_r+0x6c>
 8002ef2:	2e0a      	cmp	r6, #10
 8002ef4:	d104      	bne.n	8002f00 <__swbuf_r+0x6c>
 8002ef6:	4621      	mov	r1, r4
 8002ef8:	4628      	mov	r0, r5
 8002efa:	f000 f92b 	bl	8003154 <_fflush_r>
 8002efe:	b988      	cbnz	r0, 8002f24 <__swbuf_r+0x90>
 8002f00:	4638      	mov	r0, r7
 8002f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f04:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <__swbuf_r+0x9c>)
 8002f06:	429c      	cmp	r4, r3
 8002f08:	d101      	bne.n	8002f0e <__swbuf_r+0x7a>
 8002f0a:	68ac      	ldr	r4, [r5, #8]
 8002f0c:	e7cf      	b.n	8002eae <__swbuf_r+0x1a>
 8002f0e:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <__swbuf_r+0xa0>)
 8002f10:	429c      	cmp	r4, r3
 8002f12:	bf08      	it	eq
 8002f14:	68ec      	ldreq	r4, [r5, #12]
 8002f16:	e7ca      	b.n	8002eae <__swbuf_r+0x1a>
 8002f18:	4621      	mov	r1, r4
 8002f1a:	4628      	mov	r0, r5
 8002f1c:	f000 f80c 	bl	8002f38 <__swsetup_r>
 8002f20:	2800      	cmp	r0, #0
 8002f22:	d0cb      	beq.n	8002ebc <__swbuf_r+0x28>
 8002f24:	f04f 37ff 	mov.w	r7, #4294967295
 8002f28:	e7ea      	b.n	8002f00 <__swbuf_r+0x6c>
 8002f2a:	bf00      	nop
 8002f2c:	08003fdc 	.word	0x08003fdc
 8002f30:	08003ffc 	.word	0x08003ffc
 8002f34:	08003fbc 	.word	0x08003fbc

08002f38 <__swsetup_r>:
 8002f38:	4b32      	ldr	r3, [pc, #200]	; (8003004 <__swsetup_r+0xcc>)
 8002f3a:	b570      	push	{r4, r5, r6, lr}
 8002f3c:	681d      	ldr	r5, [r3, #0]
 8002f3e:	4606      	mov	r6, r0
 8002f40:	460c      	mov	r4, r1
 8002f42:	b125      	cbz	r5, 8002f4e <__swsetup_r+0x16>
 8002f44:	69ab      	ldr	r3, [r5, #24]
 8002f46:	b913      	cbnz	r3, 8002f4e <__swsetup_r+0x16>
 8002f48:	4628      	mov	r0, r5
 8002f4a:	f000 f997 	bl	800327c <__sinit>
 8002f4e:	4b2e      	ldr	r3, [pc, #184]	; (8003008 <__swsetup_r+0xd0>)
 8002f50:	429c      	cmp	r4, r3
 8002f52:	d10f      	bne.n	8002f74 <__swsetup_r+0x3c>
 8002f54:	686c      	ldr	r4, [r5, #4]
 8002f56:	89a3      	ldrh	r3, [r4, #12]
 8002f58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f5c:	0719      	lsls	r1, r3, #28
 8002f5e:	d42c      	bmi.n	8002fba <__swsetup_r+0x82>
 8002f60:	06dd      	lsls	r5, r3, #27
 8002f62:	d411      	bmi.n	8002f88 <__swsetup_r+0x50>
 8002f64:	2309      	movs	r3, #9
 8002f66:	6033      	str	r3, [r6, #0]
 8002f68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002f6c:	81a3      	strh	r3, [r4, #12]
 8002f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f72:	e03e      	b.n	8002ff2 <__swsetup_r+0xba>
 8002f74:	4b25      	ldr	r3, [pc, #148]	; (800300c <__swsetup_r+0xd4>)
 8002f76:	429c      	cmp	r4, r3
 8002f78:	d101      	bne.n	8002f7e <__swsetup_r+0x46>
 8002f7a:	68ac      	ldr	r4, [r5, #8]
 8002f7c:	e7eb      	b.n	8002f56 <__swsetup_r+0x1e>
 8002f7e:	4b24      	ldr	r3, [pc, #144]	; (8003010 <__swsetup_r+0xd8>)
 8002f80:	429c      	cmp	r4, r3
 8002f82:	bf08      	it	eq
 8002f84:	68ec      	ldreq	r4, [r5, #12]
 8002f86:	e7e6      	b.n	8002f56 <__swsetup_r+0x1e>
 8002f88:	0758      	lsls	r0, r3, #29
 8002f8a:	d512      	bpl.n	8002fb2 <__swsetup_r+0x7a>
 8002f8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f8e:	b141      	cbz	r1, 8002fa2 <__swsetup_r+0x6a>
 8002f90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f94:	4299      	cmp	r1, r3
 8002f96:	d002      	beq.n	8002f9e <__swsetup_r+0x66>
 8002f98:	4630      	mov	r0, r6
 8002f9a:	f7ff fe41 	bl	8002c20 <_free_r>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	6363      	str	r3, [r4, #52]	; 0x34
 8002fa2:	89a3      	ldrh	r3, [r4, #12]
 8002fa4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002fa8:	81a3      	strh	r3, [r4, #12]
 8002faa:	2300      	movs	r3, #0
 8002fac:	6063      	str	r3, [r4, #4]
 8002fae:	6923      	ldr	r3, [r4, #16]
 8002fb0:	6023      	str	r3, [r4, #0]
 8002fb2:	89a3      	ldrh	r3, [r4, #12]
 8002fb4:	f043 0308 	orr.w	r3, r3, #8
 8002fb8:	81a3      	strh	r3, [r4, #12]
 8002fba:	6923      	ldr	r3, [r4, #16]
 8002fbc:	b94b      	cbnz	r3, 8002fd2 <__swsetup_r+0x9a>
 8002fbe:	89a3      	ldrh	r3, [r4, #12]
 8002fc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc8:	d003      	beq.n	8002fd2 <__swsetup_r+0x9a>
 8002fca:	4621      	mov	r1, r4
 8002fcc:	4630      	mov	r0, r6
 8002fce:	f000 fa3f 	bl	8003450 <__smakebuf_r>
 8002fd2:	89a0      	ldrh	r0, [r4, #12]
 8002fd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002fd8:	f010 0301 	ands.w	r3, r0, #1
 8002fdc:	d00a      	beq.n	8002ff4 <__swsetup_r+0xbc>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60a3      	str	r3, [r4, #8]
 8002fe2:	6963      	ldr	r3, [r4, #20]
 8002fe4:	425b      	negs	r3, r3
 8002fe6:	61a3      	str	r3, [r4, #24]
 8002fe8:	6923      	ldr	r3, [r4, #16]
 8002fea:	b943      	cbnz	r3, 8002ffe <__swsetup_r+0xc6>
 8002fec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002ff0:	d1ba      	bne.n	8002f68 <__swsetup_r+0x30>
 8002ff2:	bd70      	pop	{r4, r5, r6, pc}
 8002ff4:	0781      	lsls	r1, r0, #30
 8002ff6:	bf58      	it	pl
 8002ff8:	6963      	ldrpl	r3, [r4, #20]
 8002ffa:	60a3      	str	r3, [r4, #8]
 8002ffc:	e7f4      	b.n	8002fe8 <__swsetup_r+0xb0>
 8002ffe:	2000      	movs	r0, #0
 8003000:	e7f7      	b.n	8002ff2 <__swsetup_r+0xba>
 8003002:	bf00      	nop
 8003004:	20000004 	.word	0x20000004
 8003008:	08003fdc 	.word	0x08003fdc
 800300c:	08003ffc 	.word	0x08003ffc
 8003010:	08003fbc 	.word	0x08003fbc

08003014 <__assert_func>:
 8003014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003016:	4614      	mov	r4, r2
 8003018:	461a      	mov	r2, r3
 800301a:	4b09      	ldr	r3, [pc, #36]	; (8003040 <__assert_func+0x2c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4605      	mov	r5, r0
 8003020:	68d8      	ldr	r0, [r3, #12]
 8003022:	b14c      	cbz	r4, 8003038 <__assert_func+0x24>
 8003024:	4b07      	ldr	r3, [pc, #28]	; (8003044 <__assert_func+0x30>)
 8003026:	9100      	str	r1, [sp, #0]
 8003028:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800302c:	4906      	ldr	r1, [pc, #24]	; (8003048 <__assert_func+0x34>)
 800302e:	462b      	mov	r3, r5
 8003030:	f000 f9a2 	bl	8003378 <fiprintf>
 8003034:	f000 fd9a 	bl	8003b6c <abort>
 8003038:	4b04      	ldr	r3, [pc, #16]	; (800304c <__assert_func+0x38>)
 800303a:	461c      	mov	r4, r3
 800303c:	e7f3      	b.n	8003026 <__assert_func+0x12>
 800303e:	bf00      	nop
 8003040:	20000004 	.word	0x20000004
 8003044:	08003f80 	.word	0x08003f80
 8003048:	08003f8d 	.word	0x08003f8d
 800304c:	08003fbb 	.word	0x08003fbb

08003050 <__sflush_r>:
 8003050:	898a      	ldrh	r2, [r1, #12]
 8003052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003054:	4605      	mov	r5, r0
 8003056:	0710      	lsls	r0, r2, #28
 8003058:	460c      	mov	r4, r1
 800305a:	d457      	bmi.n	800310c <__sflush_r+0xbc>
 800305c:	684b      	ldr	r3, [r1, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	dc04      	bgt.n	800306c <__sflush_r+0x1c>
 8003062:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003064:	2b00      	cmp	r3, #0
 8003066:	dc01      	bgt.n	800306c <__sflush_r+0x1c>
 8003068:	2000      	movs	r0, #0
 800306a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800306c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800306e:	2e00      	cmp	r6, #0
 8003070:	d0fa      	beq.n	8003068 <__sflush_r+0x18>
 8003072:	2300      	movs	r3, #0
 8003074:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003078:	682f      	ldr	r7, [r5, #0]
 800307a:	602b      	str	r3, [r5, #0]
 800307c:	d032      	beq.n	80030e4 <__sflush_r+0x94>
 800307e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003080:	89a3      	ldrh	r3, [r4, #12]
 8003082:	075a      	lsls	r2, r3, #29
 8003084:	d505      	bpl.n	8003092 <__sflush_r+0x42>
 8003086:	6863      	ldr	r3, [r4, #4]
 8003088:	1ac0      	subs	r0, r0, r3
 800308a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800308c:	b10b      	cbz	r3, 8003092 <__sflush_r+0x42>
 800308e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003090:	1ac0      	subs	r0, r0, r3
 8003092:	2300      	movs	r3, #0
 8003094:	4602      	mov	r2, r0
 8003096:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003098:	6a21      	ldr	r1, [r4, #32]
 800309a:	4628      	mov	r0, r5
 800309c:	47b0      	blx	r6
 800309e:	1c43      	adds	r3, r0, #1
 80030a0:	89a3      	ldrh	r3, [r4, #12]
 80030a2:	d106      	bne.n	80030b2 <__sflush_r+0x62>
 80030a4:	6829      	ldr	r1, [r5, #0]
 80030a6:	291d      	cmp	r1, #29
 80030a8:	d82c      	bhi.n	8003104 <__sflush_r+0xb4>
 80030aa:	4a29      	ldr	r2, [pc, #164]	; (8003150 <__sflush_r+0x100>)
 80030ac:	40ca      	lsrs	r2, r1
 80030ae:	07d6      	lsls	r6, r2, #31
 80030b0:	d528      	bpl.n	8003104 <__sflush_r+0xb4>
 80030b2:	2200      	movs	r2, #0
 80030b4:	6062      	str	r2, [r4, #4]
 80030b6:	04d9      	lsls	r1, r3, #19
 80030b8:	6922      	ldr	r2, [r4, #16]
 80030ba:	6022      	str	r2, [r4, #0]
 80030bc:	d504      	bpl.n	80030c8 <__sflush_r+0x78>
 80030be:	1c42      	adds	r2, r0, #1
 80030c0:	d101      	bne.n	80030c6 <__sflush_r+0x76>
 80030c2:	682b      	ldr	r3, [r5, #0]
 80030c4:	b903      	cbnz	r3, 80030c8 <__sflush_r+0x78>
 80030c6:	6560      	str	r0, [r4, #84]	; 0x54
 80030c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030ca:	602f      	str	r7, [r5, #0]
 80030cc:	2900      	cmp	r1, #0
 80030ce:	d0cb      	beq.n	8003068 <__sflush_r+0x18>
 80030d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030d4:	4299      	cmp	r1, r3
 80030d6:	d002      	beq.n	80030de <__sflush_r+0x8e>
 80030d8:	4628      	mov	r0, r5
 80030da:	f7ff fda1 	bl	8002c20 <_free_r>
 80030de:	2000      	movs	r0, #0
 80030e0:	6360      	str	r0, [r4, #52]	; 0x34
 80030e2:	e7c2      	b.n	800306a <__sflush_r+0x1a>
 80030e4:	6a21      	ldr	r1, [r4, #32]
 80030e6:	2301      	movs	r3, #1
 80030e8:	4628      	mov	r0, r5
 80030ea:	47b0      	blx	r6
 80030ec:	1c41      	adds	r1, r0, #1
 80030ee:	d1c7      	bne.n	8003080 <__sflush_r+0x30>
 80030f0:	682b      	ldr	r3, [r5, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0c4      	beq.n	8003080 <__sflush_r+0x30>
 80030f6:	2b1d      	cmp	r3, #29
 80030f8:	d001      	beq.n	80030fe <__sflush_r+0xae>
 80030fa:	2b16      	cmp	r3, #22
 80030fc:	d101      	bne.n	8003102 <__sflush_r+0xb2>
 80030fe:	602f      	str	r7, [r5, #0]
 8003100:	e7b2      	b.n	8003068 <__sflush_r+0x18>
 8003102:	89a3      	ldrh	r3, [r4, #12]
 8003104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003108:	81a3      	strh	r3, [r4, #12]
 800310a:	e7ae      	b.n	800306a <__sflush_r+0x1a>
 800310c:	690f      	ldr	r7, [r1, #16]
 800310e:	2f00      	cmp	r7, #0
 8003110:	d0aa      	beq.n	8003068 <__sflush_r+0x18>
 8003112:	0793      	lsls	r3, r2, #30
 8003114:	680e      	ldr	r6, [r1, #0]
 8003116:	bf08      	it	eq
 8003118:	694b      	ldreq	r3, [r1, #20]
 800311a:	600f      	str	r7, [r1, #0]
 800311c:	bf18      	it	ne
 800311e:	2300      	movne	r3, #0
 8003120:	1bf6      	subs	r6, r6, r7
 8003122:	608b      	str	r3, [r1, #8]
 8003124:	2e00      	cmp	r6, #0
 8003126:	dd9f      	ble.n	8003068 <__sflush_r+0x18>
 8003128:	6a21      	ldr	r1, [r4, #32]
 800312a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800312e:	4633      	mov	r3, r6
 8003130:	463a      	mov	r2, r7
 8003132:	4628      	mov	r0, r5
 8003134:	47e0      	blx	ip
 8003136:	2800      	cmp	r0, #0
 8003138:	dc06      	bgt.n	8003148 <__sflush_r+0xf8>
 800313a:	89a3      	ldrh	r3, [r4, #12]
 800313c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003140:	81a3      	strh	r3, [r4, #12]
 8003142:	f04f 30ff 	mov.w	r0, #4294967295
 8003146:	e790      	b.n	800306a <__sflush_r+0x1a>
 8003148:	4407      	add	r7, r0
 800314a:	1a36      	subs	r6, r6, r0
 800314c:	e7ea      	b.n	8003124 <__sflush_r+0xd4>
 800314e:	bf00      	nop
 8003150:	20400001 	.word	0x20400001

08003154 <_fflush_r>:
 8003154:	b538      	push	{r3, r4, r5, lr}
 8003156:	690b      	ldr	r3, [r1, #16]
 8003158:	4605      	mov	r5, r0
 800315a:	460c      	mov	r4, r1
 800315c:	b913      	cbnz	r3, 8003164 <_fflush_r+0x10>
 800315e:	2500      	movs	r5, #0
 8003160:	4628      	mov	r0, r5
 8003162:	bd38      	pop	{r3, r4, r5, pc}
 8003164:	b118      	cbz	r0, 800316e <_fflush_r+0x1a>
 8003166:	6983      	ldr	r3, [r0, #24]
 8003168:	b90b      	cbnz	r3, 800316e <_fflush_r+0x1a>
 800316a:	f000 f887 	bl	800327c <__sinit>
 800316e:	4b14      	ldr	r3, [pc, #80]	; (80031c0 <_fflush_r+0x6c>)
 8003170:	429c      	cmp	r4, r3
 8003172:	d11b      	bne.n	80031ac <_fflush_r+0x58>
 8003174:	686c      	ldr	r4, [r5, #4]
 8003176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0ef      	beq.n	800315e <_fflush_r+0xa>
 800317e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003180:	07d0      	lsls	r0, r2, #31
 8003182:	d404      	bmi.n	800318e <_fflush_r+0x3a>
 8003184:	0599      	lsls	r1, r3, #22
 8003186:	d402      	bmi.n	800318e <_fflush_r+0x3a>
 8003188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800318a:	f000 f93a 	bl	8003402 <__retarget_lock_acquire_recursive>
 800318e:	4628      	mov	r0, r5
 8003190:	4621      	mov	r1, r4
 8003192:	f7ff ff5d 	bl	8003050 <__sflush_r>
 8003196:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003198:	07da      	lsls	r2, r3, #31
 800319a:	4605      	mov	r5, r0
 800319c:	d4e0      	bmi.n	8003160 <_fflush_r+0xc>
 800319e:	89a3      	ldrh	r3, [r4, #12]
 80031a0:	059b      	lsls	r3, r3, #22
 80031a2:	d4dd      	bmi.n	8003160 <_fflush_r+0xc>
 80031a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031a6:	f000 f92d 	bl	8003404 <__retarget_lock_release_recursive>
 80031aa:	e7d9      	b.n	8003160 <_fflush_r+0xc>
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <_fflush_r+0x70>)
 80031ae:	429c      	cmp	r4, r3
 80031b0:	d101      	bne.n	80031b6 <_fflush_r+0x62>
 80031b2:	68ac      	ldr	r4, [r5, #8]
 80031b4:	e7df      	b.n	8003176 <_fflush_r+0x22>
 80031b6:	4b04      	ldr	r3, [pc, #16]	; (80031c8 <_fflush_r+0x74>)
 80031b8:	429c      	cmp	r4, r3
 80031ba:	bf08      	it	eq
 80031bc:	68ec      	ldreq	r4, [r5, #12]
 80031be:	e7da      	b.n	8003176 <_fflush_r+0x22>
 80031c0:	08003fdc 	.word	0x08003fdc
 80031c4:	08003ffc 	.word	0x08003ffc
 80031c8:	08003fbc 	.word	0x08003fbc

080031cc <std>:
 80031cc:	2300      	movs	r3, #0
 80031ce:	b510      	push	{r4, lr}
 80031d0:	4604      	mov	r4, r0
 80031d2:	e9c0 3300 	strd	r3, r3, [r0]
 80031d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031da:	6083      	str	r3, [r0, #8]
 80031dc:	8181      	strh	r1, [r0, #12]
 80031de:	6643      	str	r3, [r0, #100]	; 0x64
 80031e0:	81c2      	strh	r2, [r0, #14]
 80031e2:	6183      	str	r3, [r0, #24]
 80031e4:	4619      	mov	r1, r3
 80031e6:	2208      	movs	r2, #8
 80031e8:	305c      	adds	r0, #92	; 0x5c
 80031ea:	f7ff fd11 	bl	8002c10 <memset>
 80031ee:	4b05      	ldr	r3, [pc, #20]	; (8003204 <std+0x38>)
 80031f0:	6263      	str	r3, [r4, #36]	; 0x24
 80031f2:	4b05      	ldr	r3, [pc, #20]	; (8003208 <std+0x3c>)
 80031f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80031f6:	4b05      	ldr	r3, [pc, #20]	; (800320c <std+0x40>)
 80031f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031fa:	4b05      	ldr	r3, [pc, #20]	; (8003210 <std+0x44>)
 80031fc:	6224      	str	r4, [r4, #32]
 80031fe:	6323      	str	r3, [r4, #48]	; 0x30
 8003200:	bd10      	pop	{r4, pc}
 8003202:	bf00      	nop
 8003204:	08003ac1 	.word	0x08003ac1
 8003208:	08003ae3 	.word	0x08003ae3
 800320c:	08003b1b 	.word	0x08003b1b
 8003210:	08003b3f 	.word	0x08003b3f

08003214 <_cleanup_r>:
 8003214:	4901      	ldr	r1, [pc, #4]	; (800321c <_cleanup_r+0x8>)
 8003216:	f000 b8c1 	b.w	800339c <_fwalk_reent>
 800321a:	bf00      	nop
 800321c:	08003155 	.word	0x08003155

08003220 <__sfmoreglue>:
 8003220:	b570      	push	{r4, r5, r6, lr}
 8003222:	2268      	movs	r2, #104	; 0x68
 8003224:	1e4d      	subs	r5, r1, #1
 8003226:	4355      	muls	r5, r2
 8003228:	460e      	mov	r6, r1
 800322a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800322e:	f7ff fd41 	bl	8002cb4 <_malloc_r>
 8003232:	4604      	mov	r4, r0
 8003234:	b140      	cbz	r0, 8003248 <__sfmoreglue+0x28>
 8003236:	2100      	movs	r1, #0
 8003238:	e9c0 1600 	strd	r1, r6, [r0]
 800323c:	300c      	adds	r0, #12
 800323e:	60a0      	str	r0, [r4, #8]
 8003240:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003244:	f7ff fce4 	bl	8002c10 <memset>
 8003248:	4620      	mov	r0, r4
 800324a:	bd70      	pop	{r4, r5, r6, pc}

0800324c <__sfp_lock_acquire>:
 800324c:	4801      	ldr	r0, [pc, #4]	; (8003254 <__sfp_lock_acquire+0x8>)
 800324e:	f000 b8d8 	b.w	8003402 <__retarget_lock_acquire_recursive>
 8003252:	bf00      	nop
 8003254:	20000305 	.word	0x20000305

08003258 <__sfp_lock_release>:
 8003258:	4801      	ldr	r0, [pc, #4]	; (8003260 <__sfp_lock_release+0x8>)
 800325a:	f000 b8d3 	b.w	8003404 <__retarget_lock_release_recursive>
 800325e:	bf00      	nop
 8003260:	20000305 	.word	0x20000305

08003264 <__sinit_lock_acquire>:
 8003264:	4801      	ldr	r0, [pc, #4]	; (800326c <__sinit_lock_acquire+0x8>)
 8003266:	f000 b8cc 	b.w	8003402 <__retarget_lock_acquire_recursive>
 800326a:	bf00      	nop
 800326c:	20000306 	.word	0x20000306

08003270 <__sinit_lock_release>:
 8003270:	4801      	ldr	r0, [pc, #4]	; (8003278 <__sinit_lock_release+0x8>)
 8003272:	f000 b8c7 	b.w	8003404 <__retarget_lock_release_recursive>
 8003276:	bf00      	nop
 8003278:	20000306 	.word	0x20000306

0800327c <__sinit>:
 800327c:	b510      	push	{r4, lr}
 800327e:	4604      	mov	r4, r0
 8003280:	f7ff fff0 	bl	8003264 <__sinit_lock_acquire>
 8003284:	69a3      	ldr	r3, [r4, #24]
 8003286:	b11b      	cbz	r3, 8003290 <__sinit+0x14>
 8003288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800328c:	f7ff bff0 	b.w	8003270 <__sinit_lock_release>
 8003290:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003294:	6523      	str	r3, [r4, #80]	; 0x50
 8003296:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <__sinit+0x68>)
 8003298:	4a13      	ldr	r2, [pc, #76]	; (80032e8 <__sinit+0x6c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	62a2      	str	r2, [r4, #40]	; 0x28
 800329e:	42a3      	cmp	r3, r4
 80032a0:	bf04      	itt	eq
 80032a2:	2301      	moveq	r3, #1
 80032a4:	61a3      	streq	r3, [r4, #24]
 80032a6:	4620      	mov	r0, r4
 80032a8:	f000 f820 	bl	80032ec <__sfp>
 80032ac:	6060      	str	r0, [r4, #4]
 80032ae:	4620      	mov	r0, r4
 80032b0:	f000 f81c 	bl	80032ec <__sfp>
 80032b4:	60a0      	str	r0, [r4, #8]
 80032b6:	4620      	mov	r0, r4
 80032b8:	f000 f818 	bl	80032ec <__sfp>
 80032bc:	2200      	movs	r2, #0
 80032be:	60e0      	str	r0, [r4, #12]
 80032c0:	2104      	movs	r1, #4
 80032c2:	6860      	ldr	r0, [r4, #4]
 80032c4:	f7ff ff82 	bl	80031cc <std>
 80032c8:	68a0      	ldr	r0, [r4, #8]
 80032ca:	2201      	movs	r2, #1
 80032cc:	2109      	movs	r1, #9
 80032ce:	f7ff ff7d 	bl	80031cc <std>
 80032d2:	68e0      	ldr	r0, [r4, #12]
 80032d4:	2202      	movs	r2, #2
 80032d6:	2112      	movs	r1, #18
 80032d8:	f7ff ff78 	bl	80031cc <std>
 80032dc:	2301      	movs	r3, #1
 80032de:	61a3      	str	r3, [r4, #24]
 80032e0:	e7d2      	b.n	8003288 <__sinit+0xc>
 80032e2:	bf00      	nop
 80032e4:	08003ee8 	.word	0x08003ee8
 80032e8:	08003215 	.word	0x08003215

080032ec <__sfp>:
 80032ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ee:	4607      	mov	r7, r0
 80032f0:	f7ff ffac 	bl	800324c <__sfp_lock_acquire>
 80032f4:	4b1e      	ldr	r3, [pc, #120]	; (8003370 <__sfp+0x84>)
 80032f6:	681e      	ldr	r6, [r3, #0]
 80032f8:	69b3      	ldr	r3, [r6, #24]
 80032fa:	b913      	cbnz	r3, 8003302 <__sfp+0x16>
 80032fc:	4630      	mov	r0, r6
 80032fe:	f7ff ffbd 	bl	800327c <__sinit>
 8003302:	3648      	adds	r6, #72	; 0x48
 8003304:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003308:	3b01      	subs	r3, #1
 800330a:	d503      	bpl.n	8003314 <__sfp+0x28>
 800330c:	6833      	ldr	r3, [r6, #0]
 800330e:	b30b      	cbz	r3, 8003354 <__sfp+0x68>
 8003310:	6836      	ldr	r6, [r6, #0]
 8003312:	e7f7      	b.n	8003304 <__sfp+0x18>
 8003314:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003318:	b9d5      	cbnz	r5, 8003350 <__sfp+0x64>
 800331a:	4b16      	ldr	r3, [pc, #88]	; (8003374 <__sfp+0x88>)
 800331c:	60e3      	str	r3, [r4, #12]
 800331e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003322:	6665      	str	r5, [r4, #100]	; 0x64
 8003324:	f000 f86c 	bl	8003400 <__retarget_lock_init_recursive>
 8003328:	f7ff ff96 	bl	8003258 <__sfp_lock_release>
 800332c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003330:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003334:	6025      	str	r5, [r4, #0]
 8003336:	61a5      	str	r5, [r4, #24]
 8003338:	2208      	movs	r2, #8
 800333a:	4629      	mov	r1, r5
 800333c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003340:	f7ff fc66 	bl	8002c10 <memset>
 8003344:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003348:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800334c:	4620      	mov	r0, r4
 800334e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003350:	3468      	adds	r4, #104	; 0x68
 8003352:	e7d9      	b.n	8003308 <__sfp+0x1c>
 8003354:	2104      	movs	r1, #4
 8003356:	4638      	mov	r0, r7
 8003358:	f7ff ff62 	bl	8003220 <__sfmoreglue>
 800335c:	4604      	mov	r4, r0
 800335e:	6030      	str	r0, [r6, #0]
 8003360:	2800      	cmp	r0, #0
 8003362:	d1d5      	bne.n	8003310 <__sfp+0x24>
 8003364:	f7ff ff78 	bl	8003258 <__sfp_lock_release>
 8003368:	230c      	movs	r3, #12
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	e7ee      	b.n	800334c <__sfp+0x60>
 800336e:	bf00      	nop
 8003370:	08003ee8 	.word	0x08003ee8
 8003374:	ffff0001 	.word	0xffff0001

08003378 <fiprintf>:
 8003378:	b40e      	push	{r1, r2, r3}
 800337a:	b503      	push	{r0, r1, lr}
 800337c:	4601      	mov	r1, r0
 800337e:	ab03      	add	r3, sp, #12
 8003380:	4805      	ldr	r0, [pc, #20]	; (8003398 <fiprintf+0x20>)
 8003382:	f853 2b04 	ldr.w	r2, [r3], #4
 8003386:	6800      	ldr	r0, [r0, #0]
 8003388:	9301      	str	r3, [sp, #4]
 800338a:	f000 f8d5 	bl	8003538 <_vfiprintf_r>
 800338e:	b002      	add	sp, #8
 8003390:	f85d eb04 	ldr.w	lr, [sp], #4
 8003394:	b003      	add	sp, #12
 8003396:	4770      	bx	lr
 8003398:	20000004 	.word	0x20000004

0800339c <_fwalk_reent>:
 800339c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033a0:	4606      	mov	r6, r0
 80033a2:	4688      	mov	r8, r1
 80033a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80033a8:	2700      	movs	r7, #0
 80033aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80033ae:	f1b9 0901 	subs.w	r9, r9, #1
 80033b2:	d505      	bpl.n	80033c0 <_fwalk_reent+0x24>
 80033b4:	6824      	ldr	r4, [r4, #0]
 80033b6:	2c00      	cmp	r4, #0
 80033b8:	d1f7      	bne.n	80033aa <_fwalk_reent+0xe>
 80033ba:	4638      	mov	r0, r7
 80033bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033c0:	89ab      	ldrh	r3, [r5, #12]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d907      	bls.n	80033d6 <_fwalk_reent+0x3a>
 80033c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033ca:	3301      	adds	r3, #1
 80033cc:	d003      	beq.n	80033d6 <_fwalk_reent+0x3a>
 80033ce:	4629      	mov	r1, r5
 80033d0:	4630      	mov	r0, r6
 80033d2:	47c0      	blx	r8
 80033d4:	4307      	orrs	r7, r0
 80033d6:	3568      	adds	r5, #104	; 0x68
 80033d8:	e7e9      	b.n	80033ae <_fwalk_reent+0x12>
 80033da:	0000      	movs	r0, r0

080033dc <_gettimeofday_r>:
 80033dc:	b538      	push	{r3, r4, r5, lr}
 80033de:	4d07      	ldr	r5, [pc, #28]	; (80033fc <_gettimeofday_r+0x20>)
 80033e0:	2300      	movs	r3, #0
 80033e2:	4604      	mov	r4, r0
 80033e4:	4608      	mov	r0, r1
 80033e6:	4611      	mov	r1, r2
 80033e8:	602b      	str	r3, [r5, #0]
 80033ea:	f000 fc79 	bl	8003ce0 <_gettimeofday>
 80033ee:	1c43      	adds	r3, r0, #1
 80033f0:	d102      	bne.n	80033f8 <_gettimeofday_r+0x1c>
 80033f2:	682b      	ldr	r3, [r5, #0]
 80033f4:	b103      	cbz	r3, 80033f8 <_gettimeofday_r+0x1c>
 80033f6:	6023      	str	r3, [r4, #0]
 80033f8:	bd38      	pop	{r3, r4, r5, pc}
 80033fa:	bf00      	nop
 80033fc:	20000308 	.word	0x20000308

08003400 <__retarget_lock_init_recursive>:
 8003400:	4770      	bx	lr

08003402 <__retarget_lock_acquire_recursive>:
 8003402:	4770      	bx	lr

08003404 <__retarget_lock_release_recursive>:
 8003404:	4770      	bx	lr

08003406 <__swhatbuf_r>:
 8003406:	b570      	push	{r4, r5, r6, lr}
 8003408:	460e      	mov	r6, r1
 800340a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800340e:	2900      	cmp	r1, #0
 8003410:	b096      	sub	sp, #88	; 0x58
 8003412:	4614      	mov	r4, r2
 8003414:	461d      	mov	r5, r3
 8003416:	da08      	bge.n	800342a <__swhatbuf_r+0x24>
 8003418:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	602a      	str	r2, [r5, #0]
 8003420:	061a      	lsls	r2, r3, #24
 8003422:	d410      	bmi.n	8003446 <__swhatbuf_r+0x40>
 8003424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003428:	e00e      	b.n	8003448 <__swhatbuf_r+0x42>
 800342a:	466a      	mov	r2, sp
 800342c:	f000 fbb6 	bl	8003b9c <_fstat_r>
 8003430:	2800      	cmp	r0, #0
 8003432:	dbf1      	blt.n	8003418 <__swhatbuf_r+0x12>
 8003434:	9a01      	ldr	r2, [sp, #4]
 8003436:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800343a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800343e:	425a      	negs	r2, r3
 8003440:	415a      	adcs	r2, r3
 8003442:	602a      	str	r2, [r5, #0]
 8003444:	e7ee      	b.n	8003424 <__swhatbuf_r+0x1e>
 8003446:	2340      	movs	r3, #64	; 0x40
 8003448:	2000      	movs	r0, #0
 800344a:	6023      	str	r3, [r4, #0]
 800344c:	b016      	add	sp, #88	; 0x58
 800344e:	bd70      	pop	{r4, r5, r6, pc}

08003450 <__smakebuf_r>:
 8003450:	898b      	ldrh	r3, [r1, #12]
 8003452:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003454:	079d      	lsls	r5, r3, #30
 8003456:	4606      	mov	r6, r0
 8003458:	460c      	mov	r4, r1
 800345a:	d507      	bpl.n	800346c <__smakebuf_r+0x1c>
 800345c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003460:	6023      	str	r3, [r4, #0]
 8003462:	6123      	str	r3, [r4, #16]
 8003464:	2301      	movs	r3, #1
 8003466:	6163      	str	r3, [r4, #20]
 8003468:	b002      	add	sp, #8
 800346a:	bd70      	pop	{r4, r5, r6, pc}
 800346c:	ab01      	add	r3, sp, #4
 800346e:	466a      	mov	r2, sp
 8003470:	f7ff ffc9 	bl	8003406 <__swhatbuf_r>
 8003474:	9900      	ldr	r1, [sp, #0]
 8003476:	4605      	mov	r5, r0
 8003478:	4630      	mov	r0, r6
 800347a:	f7ff fc1b 	bl	8002cb4 <_malloc_r>
 800347e:	b948      	cbnz	r0, 8003494 <__smakebuf_r+0x44>
 8003480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003484:	059a      	lsls	r2, r3, #22
 8003486:	d4ef      	bmi.n	8003468 <__smakebuf_r+0x18>
 8003488:	f023 0303 	bic.w	r3, r3, #3
 800348c:	f043 0302 	orr.w	r3, r3, #2
 8003490:	81a3      	strh	r3, [r4, #12]
 8003492:	e7e3      	b.n	800345c <__smakebuf_r+0xc>
 8003494:	4b0d      	ldr	r3, [pc, #52]	; (80034cc <__smakebuf_r+0x7c>)
 8003496:	62b3      	str	r3, [r6, #40]	; 0x28
 8003498:	89a3      	ldrh	r3, [r4, #12]
 800349a:	6020      	str	r0, [r4, #0]
 800349c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034a0:	81a3      	strh	r3, [r4, #12]
 80034a2:	9b00      	ldr	r3, [sp, #0]
 80034a4:	6163      	str	r3, [r4, #20]
 80034a6:	9b01      	ldr	r3, [sp, #4]
 80034a8:	6120      	str	r0, [r4, #16]
 80034aa:	b15b      	cbz	r3, 80034c4 <__smakebuf_r+0x74>
 80034ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034b0:	4630      	mov	r0, r6
 80034b2:	f000 fb85 	bl	8003bc0 <_isatty_r>
 80034b6:	b128      	cbz	r0, 80034c4 <__smakebuf_r+0x74>
 80034b8:	89a3      	ldrh	r3, [r4, #12]
 80034ba:	f023 0303 	bic.w	r3, r3, #3
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	81a3      	strh	r3, [r4, #12]
 80034c4:	89a0      	ldrh	r0, [r4, #12]
 80034c6:	4305      	orrs	r5, r0
 80034c8:	81a5      	strh	r5, [r4, #12]
 80034ca:	e7cd      	b.n	8003468 <__smakebuf_r+0x18>
 80034cc:	08003215 	.word	0x08003215

080034d0 <__malloc_lock>:
 80034d0:	4801      	ldr	r0, [pc, #4]	; (80034d8 <__malloc_lock+0x8>)
 80034d2:	f7ff bf96 	b.w	8003402 <__retarget_lock_acquire_recursive>
 80034d6:	bf00      	nop
 80034d8:	20000304 	.word	0x20000304

080034dc <__malloc_unlock>:
 80034dc:	4801      	ldr	r0, [pc, #4]	; (80034e4 <__malloc_unlock+0x8>)
 80034de:	f7ff bf91 	b.w	8003404 <__retarget_lock_release_recursive>
 80034e2:	bf00      	nop
 80034e4:	20000304 	.word	0x20000304

080034e8 <__sfputc_r>:
 80034e8:	6893      	ldr	r3, [r2, #8]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	b410      	push	{r4}
 80034f0:	6093      	str	r3, [r2, #8]
 80034f2:	da07      	bge.n	8003504 <__sfputc_r+0x1c>
 80034f4:	6994      	ldr	r4, [r2, #24]
 80034f6:	42a3      	cmp	r3, r4
 80034f8:	db01      	blt.n	80034fe <__sfputc_r+0x16>
 80034fa:	290a      	cmp	r1, #10
 80034fc:	d102      	bne.n	8003504 <__sfputc_r+0x1c>
 80034fe:	bc10      	pop	{r4}
 8003500:	f7ff bcc8 	b.w	8002e94 <__swbuf_r>
 8003504:	6813      	ldr	r3, [r2, #0]
 8003506:	1c58      	adds	r0, r3, #1
 8003508:	6010      	str	r0, [r2, #0]
 800350a:	7019      	strb	r1, [r3, #0]
 800350c:	4608      	mov	r0, r1
 800350e:	bc10      	pop	{r4}
 8003510:	4770      	bx	lr

08003512 <__sfputs_r>:
 8003512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003514:	4606      	mov	r6, r0
 8003516:	460f      	mov	r7, r1
 8003518:	4614      	mov	r4, r2
 800351a:	18d5      	adds	r5, r2, r3
 800351c:	42ac      	cmp	r4, r5
 800351e:	d101      	bne.n	8003524 <__sfputs_r+0x12>
 8003520:	2000      	movs	r0, #0
 8003522:	e007      	b.n	8003534 <__sfputs_r+0x22>
 8003524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003528:	463a      	mov	r2, r7
 800352a:	4630      	mov	r0, r6
 800352c:	f7ff ffdc 	bl	80034e8 <__sfputc_r>
 8003530:	1c43      	adds	r3, r0, #1
 8003532:	d1f3      	bne.n	800351c <__sfputs_r+0xa>
 8003534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003536:	0000      	movs	r0, r0

08003538 <_vfiprintf_r>:
 8003538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800353c:	460d      	mov	r5, r1
 800353e:	b09d      	sub	sp, #116	; 0x74
 8003540:	4614      	mov	r4, r2
 8003542:	4698      	mov	r8, r3
 8003544:	4606      	mov	r6, r0
 8003546:	b118      	cbz	r0, 8003550 <_vfiprintf_r+0x18>
 8003548:	6983      	ldr	r3, [r0, #24]
 800354a:	b90b      	cbnz	r3, 8003550 <_vfiprintf_r+0x18>
 800354c:	f7ff fe96 	bl	800327c <__sinit>
 8003550:	4b89      	ldr	r3, [pc, #548]	; (8003778 <_vfiprintf_r+0x240>)
 8003552:	429d      	cmp	r5, r3
 8003554:	d11b      	bne.n	800358e <_vfiprintf_r+0x56>
 8003556:	6875      	ldr	r5, [r6, #4]
 8003558:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800355a:	07d9      	lsls	r1, r3, #31
 800355c:	d405      	bmi.n	800356a <_vfiprintf_r+0x32>
 800355e:	89ab      	ldrh	r3, [r5, #12]
 8003560:	059a      	lsls	r2, r3, #22
 8003562:	d402      	bmi.n	800356a <_vfiprintf_r+0x32>
 8003564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003566:	f7ff ff4c 	bl	8003402 <__retarget_lock_acquire_recursive>
 800356a:	89ab      	ldrh	r3, [r5, #12]
 800356c:	071b      	lsls	r3, r3, #28
 800356e:	d501      	bpl.n	8003574 <_vfiprintf_r+0x3c>
 8003570:	692b      	ldr	r3, [r5, #16]
 8003572:	b9eb      	cbnz	r3, 80035b0 <_vfiprintf_r+0x78>
 8003574:	4629      	mov	r1, r5
 8003576:	4630      	mov	r0, r6
 8003578:	f7ff fcde 	bl	8002f38 <__swsetup_r>
 800357c:	b1c0      	cbz	r0, 80035b0 <_vfiprintf_r+0x78>
 800357e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003580:	07dc      	lsls	r4, r3, #31
 8003582:	d50e      	bpl.n	80035a2 <_vfiprintf_r+0x6a>
 8003584:	f04f 30ff 	mov.w	r0, #4294967295
 8003588:	b01d      	add	sp, #116	; 0x74
 800358a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800358e:	4b7b      	ldr	r3, [pc, #492]	; (800377c <_vfiprintf_r+0x244>)
 8003590:	429d      	cmp	r5, r3
 8003592:	d101      	bne.n	8003598 <_vfiprintf_r+0x60>
 8003594:	68b5      	ldr	r5, [r6, #8]
 8003596:	e7df      	b.n	8003558 <_vfiprintf_r+0x20>
 8003598:	4b79      	ldr	r3, [pc, #484]	; (8003780 <_vfiprintf_r+0x248>)
 800359a:	429d      	cmp	r5, r3
 800359c:	bf08      	it	eq
 800359e:	68f5      	ldreq	r5, [r6, #12]
 80035a0:	e7da      	b.n	8003558 <_vfiprintf_r+0x20>
 80035a2:	89ab      	ldrh	r3, [r5, #12]
 80035a4:	0598      	lsls	r0, r3, #22
 80035a6:	d4ed      	bmi.n	8003584 <_vfiprintf_r+0x4c>
 80035a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80035aa:	f7ff ff2b 	bl	8003404 <__retarget_lock_release_recursive>
 80035ae:	e7e9      	b.n	8003584 <_vfiprintf_r+0x4c>
 80035b0:	2300      	movs	r3, #0
 80035b2:	9309      	str	r3, [sp, #36]	; 0x24
 80035b4:	2320      	movs	r3, #32
 80035b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80035be:	2330      	movs	r3, #48	; 0x30
 80035c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003784 <_vfiprintf_r+0x24c>
 80035c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035c8:	f04f 0901 	mov.w	r9, #1
 80035cc:	4623      	mov	r3, r4
 80035ce:	469a      	mov	sl, r3
 80035d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035d4:	b10a      	cbz	r2, 80035da <_vfiprintf_r+0xa2>
 80035d6:	2a25      	cmp	r2, #37	; 0x25
 80035d8:	d1f9      	bne.n	80035ce <_vfiprintf_r+0x96>
 80035da:	ebba 0b04 	subs.w	fp, sl, r4
 80035de:	d00b      	beq.n	80035f8 <_vfiprintf_r+0xc0>
 80035e0:	465b      	mov	r3, fp
 80035e2:	4622      	mov	r2, r4
 80035e4:	4629      	mov	r1, r5
 80035e6:	4630      	mov	r0, r6
 80035e8:	f7ff ff93 	bl	8003512 <__sfputs_r>
 80035ec:	3001      	adds	r0, #1
 80035ee:	f000 80aa 	beq.w	8003746 <_vfiprintf_r+0x20e>
 80035f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035f4:	445a      	add	r2, fp
 80035f6:	9209      	str	r2, [sp, #36]	; 0x24
 80035f8:	f89a 3000 	ldrb.w	r3, [sl]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80a2 	beq.w	8003746 <_vfiprintf_r+0x20e>
 8003602:	2300      	movs	r3, #0
 8003604:	f04f 32ff 	mov.w	r2, #4294967295
 8003608:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800360c:	f10a 0a01 	add.w	sl, sl, #1
 8003610:	9304      	str	r3, [sp, #16]
 8003612:	9307      	str	r3, [sp, #28]
 8003614:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003618:	931a      	str	r3, [sp, #104]	; 0x68
 800361a:	4654      	mov	r4, sl
 800361c:	2205      	movs	r2, #5
 800361e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003622:	4858      	ldr	r0, [pc, #352]	; (8003784 <_vfiprintf_r+0x24c>)
 8003624:	f7fd fcdc 	bl	8000fe0 <memchr>
 8003628:	9a04      	ldr	r2, [sp, #16]
 800362a:	b9d8      	cbnz	r0, 8003664 <_vfiprintf_r+0x12c>
 800362c:	06d1      	lsls	r1, r2, #27
 800362e:	bf44      	itt	mi
 8003630:	2320      	movmi	r3, #32
 8003632:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003636:	0713      	lsls	r3, r2, #28
 8003638:	bf44      	itt	mi
 800363a:	232b      	movmi	r3, #43	; 0x2b
 800363c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003640:	f89a 3000 	ldrb.w	r3, [sl]
 8003644:	2b2a      	cmp	r3, #42	; 0x2a
 8003646:	d015      	beq.n	8003674 <_vfiprintf_r+0x13c>
 8003648:	9a07      	ldr	r2, [sp, #28]
 800364a:	4654      	mov	r4, sl
 800364c:	2000      	movs	r0, #0
 800364e:	f04f 0c0a 	mov.w	ip, #10
 8003652:	4621      	mov	r1, r4
 8003654:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003658:	3b30      	subs	r3, #48	; 0x30
 800365a:	2b09      	cmp	r3, #9
 800365c:	d94e      	bls.n	80036fc <_vfiprintf_r+0x1c4>
 800365e:	b1b0      	cbz	r0, 800368e <_vfiprintf_r+0x156>
 8003660:	9207      	str	r2, [sp, #28]
 8003662:	e014      	b.n	800368e <_vfiprintf_r+0x156>
 8003664:	eba0 0308 	sub.w	r3, r0, r8
 8003668:	fa09 f303 	lsl.w	r3, r9, r3
 800366c:	4313      	orrs	r3, r2
 800366e:	9304      	str	r3, [sp, #16]
 8003670:	46a2      	mov	sl, r4
 8003672:	e7d2      	b.n	800361a <_vfiprintf_r+0xe2>
 8003674:	9b03      	ldr	r3, [sp, #12]
 8003676:	1d19      	adds	r1, r3, #4
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	9103      	str	r1, [sp, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	bfbb      	ittet	lt
 8003680:	425b      	neglt	r3, r3
 8003682:	f042 0202 	orrlt.w	r2, r2, #2
 8003686:	9307      	strge	r3, [sp, #28]
 8003688:	9307      	strlt	r3, [sp, #28]
 800368a:	bfb8      	it	lt
 800368c:	9204      	strlt	r2, [sp, #16]
 800368e:	7823      	ldrb	r3, [r4, #0]
 8003690:	2b2e      	cmp	r3, #46	; 0x2e
 8003692:	d10c      	bne.n	80036ae <_vfiprintf_r+0x176>
 8003694:	7863      	ldrb	r3, [r4, #1]
 8003696:	2b2a      	cmp	r3, #42	; 0x2a
 8003698:	d135      	bne.n	8003706 <_vfiprintf_r+0x1ce>
 800369a:	9b03      	ldr	r3, [sp, #12]
 800369c:	1d1a      	adds	r2, r3, #4
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	9203      	str	r2, [sp, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	bfb8      	it	lt
 80036a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80036aa:	3402      	adds	r4, #2
 80036ac:	9305      	str	r3, [sp, #20]
 80036ae:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003788 <_vfiprintf_r+0x250>
 80036b2:	7821      	ldrb	r1, [r4, #0]
 80036b4:	2203      	movs	r2, #3
 80036b6:	4650      	mov	r0, sl
 80036b8:	f7fd fc92 	bl	8000fe0 <memchr>
 80036bc:	b140      	cbz	r0, 80036d0 <_vfiprintf_r+0x198>
 80036be:	2340      	movs	r3, #64	; 0x40
 80036c0:	eba0 000a 	sub.w	r0, r0, sl
 80036c4:	fa03 f000 	lsl.w	r0, r3, r0
 80036c8:	9b04      	ldr	r3, [sp, #16]
 80036ca:	4303      	orrs	r3, r0
 80036cc:	3401      	adds	r4, #1
 80036ce:	9304      	str	r3, [sp, #16]
 80036d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036d4:	482d      	ldr	r0, [pc, #180]	; (800378c <_vfiprintf_r+0x254>)
 80036d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036da:	2206      	movs	r2, #6
 80036dc:	f7fd fc80 	bl	8000fe0 <memchr>
 80036e0:	2800      	cmp	r0, #0
 80036e2:	d03f      	beq.n	8003764 <_vfiprintf_r+0x22c>
 80036e4:	4b2a      	ldr	r3, [pc, #168]	; (8003790 <_vfiprintf_r+0x258>)
 80036e6:	bb1b      	cbnz	r3, 8003730 <_vfiprintf_r+0x1f8>
 80036e8:	9b03      	ldr	r3, [sp, #12]
 80036ea:	3307      	adds	r3, #7
 80036ec:	f023 0307 	bic.w	r3, r3, #7
 80036f0:	3308      	adds	r3, #8
 80036f2:	9303      	str	r3, [sp, #12]
 80036f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036f6:	443b      	add	r3, r7
 80036f8:	9309      	str	r3, [sp, #36]	; 0x24
 80036fa:	e767      	b.n	80035cc <_vfiprintf_r+0x94>
 80036fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003700:	460c      	mov	r4, r1
 8003702:	2001      	movs	r0, #1
 8003704:	e7a5      	b.n	8003652 <_vfiprintf_r+0x11a>
 8003706:	2300      	movs	r3, #0
 8003708:	3401      	adds	r4, #1
 800370a:	9305      	str	r3, [sp, #20]
 800370c:	4619      	mov	r1, r3
 800370e:	f04f 0c0a 	mov.w	ip, #10
 8003712:	4620      	mov	r0, r4
 8003714:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003718:	3a30      	subs	r2, #48	; 0x30
 800371a:	2a09      	cmp	r2, #9
 800371c:	d903      	bls.n	8003726 <_vfiprintf_r+0x1ee>
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0c5      	beq.n	80036ae <_vfiprintf_r+0x176>
 8003722:	9105      	str	r1, [sp, #20]
 8003724:	e7c3      	b.n	80036ae <_vfiprintf_r+0x176>
 8003726:	fb0c 2101 	mla	r1, ip, r1, r2
 800372a:	4604      	mov	r4, r0
 800372c:	2301      	movs	r3, #1
 800372e:	e7f0      	b.n	8003712 <_vfiprintf_r+0x1da>
 8003730:	ab03      	add	r3, sp, #12
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	462a      	mov	r2, r5
 8003736:	4b17      	ldr	r3, [pc, #92]	; (8003794 <_vfiprintf_r+0x25c>)
 8003738:	a904      	add	r1, sp, #16
 800373a:	4630      	mov	r0, r6
 800373c:	f3af 8000 	nop.w
 8003740:	4607      	mov	r7, r0
 8003742:	1c78      	adds	r0, r7, #1
 8003744:	d1d6      	bne.n	80036f4 <_vfiprintf_r+0x1bc>
 8003746:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003748:	07d9      	lsls	r1, r3, #31
 800374a:	d405      	bmi.n	8003758 <_vfiprintf_r+0x220>
 800374c:	89ab      	ldrh	r3, [r5, #12]
 800374e:	059a      	lsls	r2, r3, #22
 8003750:	d402      	bmi.n	8003758 <_vfiprintf_r+0x220>
 8003752:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003754:	f7ff fe56 	bl	8003404 <__retarget_lock_release_recursive>
 8003758:	89ab      	ldrh	r3, [r5, #12]
 800375a:	065b      	lsls	r3, r3, #25
 800375c:	f53f af12 	bmi.w	8003584 <_vfiprintf_r+0x4c>
 8003760:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003762:	e711      	b.n	8003588 <_vfiprintf_r+0x50>
 8003764:	ab03      	add	r3, sp, #12
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	462a      	mov	r2, r5
 800376a:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <_vfiprintf_r+0x25c>)
 800376c:	a904      	add	r1, sp, #16
 800376e:	4630      	mov	r0, r6
 8003770:	f000 f880 	bl	8003874 <_printf_i>
 8003774:	e7e4      	b.n	8003740 <_vfiprintf_r+0x208>
 8003776:	bf00      	nop
 8003778:	08003fdc 	.word	0x08003fdc
 800377c:	08003ffc 	.word	0x08003ffc
 8003780:	08003fbc 	.word	0x08003fbc
 8003784:	0800401c 	.word	0x0800401c
 8003788:	08004022 	.word	0x08004022
 800378c:	08004026 	.word	0x08004026
 8003790:	00000000 	.word	0x00000000
 8003794:	08003513 	.word	0x08003513

08003798 <_printf_common>:
 8003798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800379c:	4616      	mov	r6, r2
 800379e:	4699      	mov	r9, r3
 80037a0:	688a      	ldr	r2, [r1, #8]
 80037a2:	690b      	ldr	r3, [r1, #16]
 80037a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037a8:	4293      	cmp	r3, r2
 80037aa:	bfb8      	it	lt
 80037ac:	4613      	movlt	r3, r2
 80037ae:	6033      	str	r3, [r6, #0]
 80037b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037b4:	4607      	mov	r7, r0
 80037b6:	460c      	mov	r4, r1
 80037b8:	b10a      	cbz	r2, 80037be <_printf_common+0x26>
 80037ba:	3301      	adds	r3, #1
 80037bc:	6033      	str	r3, [r6, #0]
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	0699      	lsls	r1, r3, #26
 80037c2:	bf42      	ittt	mi
 80037c4:	6833      	ldrmi	r3, [r6, #0]
 80037c6:	3302      	addmi	r3, #2
 80037c8:	6033      	strmi	r3, [r6, #0]
 80037ca:	6825      	ldr	r5, [r4, #0]
 80037cc:	f015 0506 	ands.w	r5, r5, #6
 80037d0:	d106      	bne.n	80037e0 <_printf_common+0x48>
 80037d2:	f104 0a19 	add.w	sl, r4, #25
 80037d6:	68e3      	ldr	r3, [r4, #12]
 80037d8:	6832      	ldr	r2, [r6, #0]
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	42ab      	cmp	r3, r5
 80037de:	dc26      	bgt.n	800382e <_printf_common+0x96>
 80037e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037e4:	1e13      	subs	r3, r2, #0
 80037e6:	6822      	ldr	r2, [r4, #0]
 80037e8:	bf18      	it	ne
 80037ea:	2301      	movne	r3, #1
 80037ec:	0692      	lsls	r2, r2, #26
 80037ee:	d42b      	bmi.n	8003848 <_printf_common+0xb0>
 80037f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037f4:	4649      	mov	r1, r9
 80037f6:	4638      	mov	r0, r7
 80037f8:	47c0      	blx	r8
 80037fa:	3001      	adds	r0, #1
 80037fc:	d01e      	beq.n	800383c <_printf_common+0xa4>
 80037fe:	6823      	ldr	r3, [r4, #0]
 8003800:	68e5      	ldr	r5, [r4, #12]
 8003802:	6832      	ldr	r2, [r6, #0]
 8003804:	f003 0306 	and.w	r3, r3, #6
 8003808:	2b04      	cmp	r3, #4
 800380a:	bf08      	it	eq
 800380c:	1aad      	subeq	r5, r5, r2
 800380e:	68a3      	ldr	r3, [r4, #8]
 8003810:	6922      	ldr	r2, [r4, #16]
 8003812:	bf0c      	ite	eq
 8003814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003818:	2500      	movne	r5, #0
 800381a:	4293      	cmp	r3, r2
 800381c:	bfc4      	itt	gt
 800381e:	1a9b      	subgt	r3, r3, r2
 8003820:	18ed      	addgt	r5, r5, r3
 8003822:	2600      	movs	r6, #0
 8003824:	341a      	adds	r4, #26
 8003826:	42b5      	cmp	r5, r6
 8003828:	d11a      	bne.n	8003860 <_printf_common+0xc8>
 800382a:	2000      	movs	r0, #0
 800382c:	e008      	b.n	8003840 <_printf_common+0xa8>
 800382e:	2301      	movs	r3, #1
 8003830:	4652      	mov	r2, sl
 8003832:	4649      	mov	r1, r9
 8003834:	4638      	mov	r0, r7
 8003836:	47c0      	blx	r8
 8003838:	3001      	adds	r0, #1
 800383a:	d103      	bne.n	8003844 <_printf_common+0xac>
 800383c:	f04f 30ff 	mov.w	r0, #4294967295
 8003840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003844:	3501      	adds	r5, #1
 8003846:	e7c6      	b.n	80037d6 <_printf_common+0x3e>
 8003848:	18e1      	adds	r1, r4, r3
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	2030      	movs	r0, #48	; 0x30
 800384e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003852:	4422      	add	r2, r4
 8003854:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003858:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800385c:	3302      	adds	r3, #2
 800385e:	e7c7      	b.n	80037f0 <_printf_common+0x58>
 8003860:	2301      	movs	r3, #1
 8003862:	4622      	mov	r2, r4
 8003864:	4649      	mov	r1, r9
 8003866:	4638      	mov	r0, r7
 8003868:	47c0      	blx	r8
 800386a:	3001      	adds	r0, #1
 800386c:	d0e6      	beq.n	800383c <_printf_common+0xa4>
 800386e:	3601      	adds	r6, #1
 8003870:	e7d9      	b.n	8003826 <_printf_common+0x8e>
 8003872:	0000      	movs	r0, r0

08003874 <_printf_i>:
 8003874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003878:	7e0f      	ldrb	r7, [r1, #24]
 800387a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800387c:	2f78      	cmp	r7, #120	; 0x78
 800387e:	4691      	mov	r9, r2
 8003880:	4680      	mov	r8, r0
 8003882:	460c      	mov	r4, r1
 8003884:	469a      	mov	sl, r3
 8003886:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800388a:	d807      	bhi.n	800389c <_printf_i+0x28>
 800388c:	2f62      	cmp	r7, #98	; 0x62
 800388e:	d80a      	bhi.n	80038a6 <_printf_i+0x32>
 8003890:	2f00      	cmp	r7, #0
 8003892:	f000 80d8 	beq.w	8003a46 <_printf_i+0x1d2>
 8003896:	2f58      	cmp	r7, #88	; 0x58
 8003898:	f000 80a3 	beq.w	80039e2 <_printf_i+0x16e>
 800389c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038a4:	e03a      	b.n	800391c <_printf_i+0xa8>
 80038a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038aa:	2b15      	cmp	r3, #21
 80038ac:	d8f6      	bhi.n	800389c <_printf_i+0x28>
 80038ae:	a101      	add	r1, pc, #4	; (adr r1, 80038b4 <_printf_i+0x40>)
 80038b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038b4:	0800390d 	.word	0x0800390d
 80038b8:	08003921 	.word	0x08003921
 80038bc:	0800389d 	.word	0x0800389d
 80038c0:	0800389d 	.word	0x0800389d
 80038c4:	0800389d 	.word	0x0800389d
 80038c8:	0800389d 	.word	0x0800389d
 80038cc:	08003921 	.word	0x08003921
 80038d0:	0800389d 	.word	0x0800389d
 80038d4:	0800389d 	.word	0x0800389d
 80038d8:	0800389d 	.word	0x0800389d
 80038dc:	0800389d 	.word	0x0800389d
 80038e0:	08003a2d 	.word	0x08003a2d
 80038e4:	08003951 	.word	0x08003951
 80038e8:	08003a0f 	.word	0x08003a0f
 80038ec:	0800389d 	.word	0x0800389d
 80038f0:	0800389d 	.word	0x0800389d
 80038f4:	08003a4f 	.word	0x08003a4f
 80038f8:	0800389d 	.word	0x0800389d
 80038fc:	08003951 	.word	0x08003951
 8003900:	0800389d 	.word	0x0800389d
 8003904:	0800389d 	.word	0x0800389d
 8003908:	08003a17 	.word	0x08003a17
 800390c:	682b      	ldr	r3, [r5, #0]
 800390e:	1d1a      	adds	r2, r3, #4
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	602a      	str	r2, [r5, #0]
 8003914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003918:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800391c:	2301      	movs	r3, #1
 800391e:	e0a3      	b.n	8003a68 <_printf_i+0x1f4>
 8003920:	6820      	ldr	r0, [r4, #0]
 8003922:	6829      	ldr	r1, [r5, #0]
 8003924:	0606      	lsls	r6, r0, #24
 8003926:	f101 0304 	add.w	r3, r1, #4
 800392a:	d50a      	bpl.n	8003942 <_printf_i+0xce>
 800392c:	680e      	ldr	r6, [r1, #0]
 800392e:	602b      	str	r3, [r5, #0]
 8003930:	2e00      	cmp	r6, #0
 8003932:	da03      	bge.n	800393c <_printf_i+0xc8>
 8003934:	232d      	movs	r3, #45	; 0x2d
 8003936:	4276      	negs	r6, r6
 8003938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800393c:	485e      	ldr	r0, [pc, #376]	; (8003ab8 <_printf_i+0x244>)
 800393e:	230a      	movs	r3, #10
 8003940:	e019      	b.n	8003976 <_printf_i+0x102>
 8003942:	680e      	ldr	r6, [r1, #0]
 8003944:	602b      	str	r3, [r5, #0]
 8003946:	f010 0f40 	tst.w	r0, #64	; 0x40
 800394a:	bf18      	it	ne
 800394c:	b236      	sxthne	r6, r6
 800394e:	e7ef      	b.n	8003930 <_printf_i+0xbc>
 8003950:	682b      	ldr	r3, [r5, #0]
 8003952:	6820      	ldr	r0, [r4, #0]
 8003954:	1d19      	adds	r1, r3, #4
 8003956:	6029      	str	r1, [r5, #0]
 8003958:	0601      	lsls	r1, r0, #24
 800395a:	d501      	bpl.n	8003960 <_printf_i+0xec>
 800395c:	681e      	ldr	r6, [r3, #0]
 800395e:	e002      	b.n	8003966 <_printf_i+0xf2>
 8003960:	0646      	lsls	r6, r0, #25
 8003962:	d5fb      	bpl.n	800395c <_printf_i+0xe8>
 8003964:	881e      	ldrh	r6, [r3, #0]
 8003966:	4854      	ldr	r0, [pc, #336]	; (8003ab8 <_printf_i+0x244>)
 8003968:	2f6f      	cmp	r7, #111	; 0x6f
 800396a:	bf0c      	ite	eq
 800396c:	2308      	moveq	r3, #8
 800396e:	230a      	movne	r3, #10
 8003970:	2100      	movs	r1, #0
 8003972:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003976:	6865      	ldr	r5, [r4, #4]
 8003978:	60a5      	str	r5, [r4, #8]
 800397a:	2d00      	cmp	r5, #0
 800397c:	bfa2      	ittt	ge
 800397e:	6821      	ldrge	r1, [r4, #0]
 8003980:	f021 0104 	bicge.w	r1, r1, #4
 8003984:	6021      	strge	r1, [r4, #0]
 8003986:	b90e      	cbnz	r6, 800398c <_printf_i+0x118>
 8003988:	2d00      	cmp	r5, #0
 800398a:	d04d      	beq.n	8003a28 <_printf_i+0x1b4>
 800398c:	4615      	mov	r5, r2
 800398e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003992:	fb03 6711 	mls	r7, r3, r1, r6
 8003996:	5dc7      	ldrb	r7, [r0, r7]
 8003998:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800399c:	4637      	mov	r7, r6
 800399e:	42bb      	cmp	r3, r7
 80039a0:	460e      	mov	r6, r1
 80039a2:	d9f4      	bls.n	800398e <_printf_i+0x11a>
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d10b      	bne.n	80039c0 <_printf_i+0x14c>
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	07de      	lsls	r6, r3, #31
 80039ac:	d508      	bpl.n	80039c0 <_printf_i+0x14c>
 80039ae:	6923      	ldr	r3, [r4, #16]
 80039b0:	6861      	ldr	r1, [r4, #4]
 80039b2:	4299      	cmp	r1, r3
 80039b4:	bfde      	ittt	le
 80039b6:	2330      	movle	r3, #48	; 0x30
 80039b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039c0:	1b52      	subs	r2, r2, r5
 80039c2:	6122      	str	r2, [r4, #16]
 80039c4:	f8cd a000 	str.w	sl, [sp]
 80039c8:	464b      	mov	r3, r9
 80039ca:	aa03      	add	r2, sp, #12
 80039cc:	4621      	mov	r1, r4
 80039ce:	4640      	mov	r0, r8
 80039d0:	f7ff fee2 	bl	8003798 <_printf_common>
 80039d4:	3001      	adds	r0, #1
 80039d6:	d14c      	bne.n	8003a72 <_printf_i+0x1fe>
 80039d8:	f04f 30ff 	mov.w	r0, #4294967295
 80039dc:	b004      	add	sp, #16
 80039de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e2:	4835      	ldr	r0, [pc, #212]	; (8003ab8 <_printf_i+0x244>)
 80039e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80039e8:	6829      	ldr	r1, [r5, #0]
 80039ea:	6823      	ldr	r3, [r4, #0]
 80039ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80039f0:	6029      	str	r1, [r5, #0]
 80039f2:	061d      	lsls	r5, r3, #24
 80039f4:	d514      	bpl.n	8003a20 <_printf_i+0x1ac>
 80039f6:	07df      	lsls	r7, r3, #31
 80039f8:	bf44      	itt	mi
 80039fa:	f043 0320 	orrmi.w	r3, r3, #32
 80039fe:	6023      	strmi	r3, [r4, #0]
 8003a00:	b91e      	cbnz	r6, 8003a0a <_printf_i+0x196>
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	f023 0320 	bic.w	r3, r3, #32
 8003a08:	6023      	str	r3, [r4, #0]
 8003a0a:	2310      	movs	r3, #16
 8003a0c:	e7b0      	b.n	8003970 <_printf_i+0xfc>
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	f043 0320 	orr.w	r3, r3, #32
 8003a14:	6023      	str	r3, [r4, #0]
 8003a16:	2378      	movs	r3, #120	; 0x78
 8003a18:	4828      	ldr	r0, [pc, #160]	; (8003abc <_printf_i+0x248>)
 8003a1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a1e:	e7e3      	b.n	80039e8 <_printf_i+0x174>
 8003a20:	0659      	lsls	r1, r3, #25
 8003a22:	bf48      	it	mi
 8003a24:	b2b6      	uxthmi	r6, r6
 8003a26:	e7e6      	b.n	80039f6 <_printf_i+0x182>
 8003a28:	4615      	mov	r5, r2
 8003a2a:	e7bb      	b.n	80039a4 <_printf_i+0x130>
 8003a2c:	682b      	ldr	r3, [r5, #0]
 8003a2e:	6826      	ldr	r6, [r4, #0]
 8003a30:	6961      	ldr	r1, [r4, #20]
 8003a32:	1d18      	adds	r0, r3, #4
 8003a34:	6028      	str	r0, [r5, #0]
 8003a36:	0635      	lsls	r5, r6, #24
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	d501      	bpl.n	8003a40 <_printf_i+0x1cc>
 8003a3c:	6019      	str	r1, [r3, #0]
 8003a3e:	e002      	b.n	8003a46 <_printf_i+0x1d2>
 8003a40:	0670      	lsls	r0, r6, #25
 8003a42:	d5fb      	bpl.n	8003a3c <_printf_i+0x1c8>
 8003a44:	8019      	strh	r1, [r3, #0]
 8003a46:	2300      	movs	r3, #0
 8003a48:	6123      	str	r3, [r4, #16]
 8003a4a:	4615      	mov	r5, r2
 8003a4c:	e7ba      	b.n	80039c4 <_printf_i+0x150>
 8003a4e:	682b      	ldr	r3, [r5, #0]
 8003a50:	1d1a      	adds	r2, r3, #4
 8003a52:	602a      	str	r2, [r5, #0]
 8003a54:	681d      	ldr	r5, [r3, #0]
 8003a56:	6862      	ldr	r2, [r4, #4]
 8003a58:	2100      	movs	r1, #0
 8003a5a:	4628      	mov	r0, r5
 8003a5c:	f7fd fac0 	bl	8000fe0 <memchr>
 8003a60:	b108      	cbz	r0, 8003a66 <_printf_i+0x1f2>
 8003a62:	1b40      	subs	r0, r0, r5
 8003a64:	6060      	str	r0, [r4, #4]
 8003a66:	6863      	ldr	r3, [r4, #4]
 8003a68:	6123      	str	r3, [r4, #16]
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a70:	e7a8      	b.n	80039c4 <_printf_i+0x150>
 8003a72:	6923      	ldr	r3, [r4, #16]
 8003a74:	462a      	mov	r2, r5
 8003a76:	4649      	mov	r1, r9
 8003a78:	4640      	mov	r0, r8
 8003a7a:	47d0      	blx	sl
 8003a7c:	3001      	adds	r0, #1
 8003a7e:	d0ab      	beq.n	80039d8 <_printf_i+0x164>
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	079b      	lsls	r3, r3, #30
 8003a84:	d413      	bmi.n	8003aae <_printf_i+0x23a>
 8003a86:	68e0      	ldr	r0, [r4, #12]
 8003a88:	9b03      	ldr	r3, [sp, #12]
 8003a8a:	4298      	cmp	r0, r3
 8003a8c:	bfb8      	it	lt
 8003a8e:	4618      	movlt	r0, r3
 8003a90:	e7a4      	b.n	80039dc <_printf_i+0x168>
 8003a92:	2301      	movs	r3, #1
 8003a94:	4632      	mov	r2, r6
 8003a96:	4649      	mov	r1, r9
 8003a98:	4640      	mov	r0, r8
 8003a9a:	47d0      	blx	sl
 8003a9c:	3001      	adds	r0, #1
 8003a9e:	d09b      	beq.n	80039d8 <_printf_i+0x164>
 8003aa0:	3501      	adds	r5, #1
 8003aa2:	68e3      	ldr	r3, [r4, #12]
 8003aa4:	9903      	ldr	r1, [sp, #12]
 8003aa6:	1a5b      	subs	r3, r3, r1
 8003aa8:	42ab      	cmp	r3, r5
 8003aaa:	dcf2      	bgt.n	8003a92 <_printf_i+0x21e>
 8003aac:	e7eb      	b.n	8003a86 <_printf_i+0x212>
 8003aae:	2500      	movs	r5, #0
 8003ab0:	f104 0619 	add.w	r6, r4, #25
 8003ab4:	e7f5      	b.n	8003aa2 <_printf_i+0x22e>
 8003ab6:	bf00      	nop
 8003ab8:	0800402d 	.word	0x0800402d
 8003abc:	0800403e 	.word	0x0800403e

08003ac0 <__sread>:
 8003ac0:	b510      	push	{r4, lr}
 8003ac2:	460c      	mov	r4, r1
 8003ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ac8:	f000 f89c 	bl	8003c04 <_read_r>
 8003acc:	2800      	cmp	r0, #0
 8003ace:	bfab      	itete	ge
 8003ad0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003ad2:	89a3      	ldrhlt	r3, [r4, #12]
 8003ad4:	181b      	addge	r3, r3, r0
 8003ad6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ada:	bfac      	ite	ge
 8003adc:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ade:	81a3      	strhlt	r3, [r4, #12]
 8003ae0:	bd10      	pop	{r4, pc}

08003ae2 <__swrite>:
 8003ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ae6:	461f      	mov	r7, r3
 8003ae8:	898b      	ldrh	r3, [r1, #12]
 8003aea:	05db      	lsls	r3, r3, #23
 8003aec:	4605      	mov	r5, r0
 8003aee:	460c      	mov	r4, r1
 8003af0:	4616      	mov	r6, r2
 8003af2:	d505      	bpl.n	8003b00 <__swrite+0x1e>
 8003af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003af8:	2302      	movs	r3, #2
 8003afa:	2200      	movs	r2, #0
 8003afc:	f000 f870 	bl	8003be0 <_lseek_r>
 8003b00:	89a3      	ldrh	r3, [r4, #12]
 8003b02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b0a:	81a3      	strh	r3, [r4, #12]
 8003b0c:	4632      	mov	r2, r6
 8003b0e:	463b      	mov	r3, r7
 8003b10:	4628      	mov	r0, r5
 8003b12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b16:	f000 b817 	b.w	8003b48 <_write_r>

08003b1a <__sseek>:
 8003b1a:	b510      	push	{r4, lr}
 8003b1c:	460c      	mov	r4, r1
 8003b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b22:	f000 f85d 	bl	8003be0 <_lseek_r>
 8003b26:	1c43      	adds	r3, r0, #1
 8003b28:	89a3      	ldrh	r3, [r4, #12]
 8003b2a:	bf15      	itete	ne
 8003b2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b36:	81a3      	strheq	r3, [r4, #12]
 8003b38:	bf18      	it	ne
 8003b3a:	81a3      	strhne	r3, [r4, #12]
 8003b3c:	bd10      	pop	{r4, pc}

08003b3e <__sclose>:
 8003b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b42:	f000 b81b 	b.w	8003b7c <_close_r>
 8003b46:	0000      	movs	r0, r0

08003b48 <_write_r>:
 8003b48:	b538      	push	{r3, r4, r5, lr}
 8003b4a:	4d07      	ldr	r5, [pc, #28]	; (8003b68 <_write_r+0x20>)
 8003b4c:	4604      	mov	r4, r0
 8003b4e:	4608      	mov	r0, r1
 8003b50:	4611      	mov	r1, r2
 8003b52:	2200      	movs	r2, #0
 8003b54:	602a      	str	r2, [r5, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	f000 f8ea 	bl	8003d30 <_write>
 8003b5c:	1c43      	adds	r3, r0, #1
 8003b5e:	d102      	bne.n	8003b66 <_write_r+0x1e>
 8003b60:	682b      	ldr	r3, [r5, #0]
 8003b62:	b103      	cbz	r3, 8003b66 <_write_r+0x1e>
 8003b64:	6023      	str	r3, [r4, #0]
 8003b66:	bd38      	pop	{r3, r4, r5, pc}
 8003b68:	20000308 	.word	0x20000308

08003b6c <abort>:
 8003b6c:	b508      	push	{r3, lr}
 8003b6e:	2006      	movs	r0, #6
 8003b70:	f000 f882 	bl	8003c78 <raise>
 8003b74:	2001      	movs	r0, #1
 8003b76:	f000 f8e3 	bl	8003d40 <_exit>
 8003b7a:	0000      	movs	r0, r0

08003b7c <_close_r>:
 8003b7c:	b538      	push	{r3, r4, r5, lr}
 8003b7e:	4d06      	ldr	r5, [pc, #24]	; (8003b98 <_close_r+0x1c>)
 8003b80:	2300      	movs	r3, #0
 8003b82:	4604      	mov	r4, r0
 8003b84:	4608      	mov	r0, r1
 8003b86:	602b      	str	r3, [r5, #0]
 8003b88:	f000 f892 	bl	8003cb0 <_close>
 8003b8c:	1c43      	adds	r3, r0, #1
 8003b8e:	d102      	bne.n	8003b96 <_close_r+0x1a>
 8003b90:	682b      	ldr	r3, [r5, #0]
 8003b92:	b103      	cbz	r3, 8003b96 <_close_r+0x1a>
 8003b94:	6023      	str	r3, [r4, #0]
 8003b96:	bd38      	pop	{r3, r4, r5, pc}
 8003b98:	20000308 	.word	0x20000308

08003b9c <_fstat_r>:
 8003b9c:	b538      	push	{r3, r4, r5, lr}
 8003b9e:	4d07      	ldr	r5, [pc, #28]	; (8003bbc <_fstat_r+0x20>)
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	4608      	mov	r0, r1
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	602b      	str	r3, [r5, #0]
 8003baa:	f000 f889 	bl	8003cc0 <_fstat>
 8003bae:	1c43      	adds	r3, r0, #1
 8003bb0:	d102      	bne.n	8003bb8 <_fstat_r+0x1c>
 8003bb2:	682b      	ldr	r3, [r5, #0]
 8003bb4:	b103      	cbz	r3, 8003bb8 <_fstat_r+0x1c>
 8003bb6:	6023      	str	r3, [r4, #0]
 8003bb8:	bd38      	pop	{r3, r4, r5, pc}
 8003bba:	bf00      	nop
 8003bbc:	20000308 	.word	0x20000308

08003bc0 <_isatty_r>:
 8003bc0:	b538      	push	{r3, r4, r5, lr}
 8003bc2:	4d06      	ldr	r5, [pc, #24]	; (8003bdc <_isatty_r+0x1c>)
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	4604      	mov	r4, r0
 8003bc8:	4608      	mov	r0, r1
 8003bca:	602b      	str	r3, [r5, #0]
 8003bcc:	f000 f890 	bl	8003cf0 <_isatty>
 8003bd0:	1c43      	adds	r3, r0, #1
 8003bd2:	d102      	bne.n	8003bda <_isatty_r+0x1a>
 8003bd4:	682b      	ldr	r3, [r5, #0]
 8003bd6:	b103      	cbz	r3, 8003bda <_isatty_r+0x1a>
 8003bd8:	6023      	str	r3, [r4, #0]
 8003bda:	bd38      	pop	{r3, r4, r5, pc}
 8003bdc:	20000308 	.word	0x20000308

08003be0 <_lseek_r>:
 8003be0:	b538      	push	{r3, r4, r5, lr}
 8003be2:	4d07      	ldr	r5, [pc, #28]	; (8003c00 <_lseek_r+0x20>)
 8003be4:	4604      	mov	r4, r0
 8003be6:	4608      	mov	r0, r1
 8003be8:	4611      	mov	r1, r2
 8003bea:	2200      	movs	r2, #0
 8003bec:	602a      	str	r2, [r5, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f000 f88e 	bl	8003d10 <_lseek>
 8003bf4:	1c43      	adds	r3, r0, #1
 8003bf6:	d102      	bne.n	8003bfe <_lseek_r+0x1e>
 8003bf8:	682b      	ldr	r3, [r5, #0]
 8003bfa:	b103      	cbz	r3, 8003bfe <_lseek_r+0x1e>
 8003bfc:	6023      	str	r3, [r4, #0]
 8003bfe:	bd38      	pop	{r3, r4, r5, pc}
 8003c00:	20000308 	.word	0x20000308

08003c04 <_read_r>:
 8003c04:	b538      	push	{r3, r4, r5, lr}
 8003c06:	4d07      	ldr	r5, [pc, #28]	; (8003c24 <_read_r+0x20>)
 8003c08:	4604      	mov	r4, r0
 8003c0a:	4608      	mov	r0, r1
 8003c0c:	4611      	mov	r1, r2
 8003c0e:	2200      	movs	r2, #0
 8003c10:	602a      	str	r2, [r5, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	f000 f884 	bl	8003d20 <_read>
 8003c18:	1c43      	adds	r3, r0, #1
 8003c1a:	d102      	bne.n	8003c22 <_read_r+0x1e>
 8003c1c:	682b      	ldr	r3, [r5, #0]
 8003c1e:	b103      	cbz	r3, 8003c22 <_read_r+0x1e>
 8003c20:	6023      	str	r3, [r4, #0]
 8003c22:	bd38      	pop	{r3, r4, r5, pc}
 8003c24:	20000308 	.word	0x20000308

08003c28 <_raise_r>:
 8003c28:	291f      	cmp	r1, #31
 8003c2a:	b538      	push	{r3, r4, r5, lr}
 8003c2c:	4604      	mov	r4, r0
 8003c2e:	460d      	mov	r5, r1
 8003c30:	d904      	bls.n	8003c3c <_raise_r+0x14>
 8003c32:	2316      	movs	r3, #22
 8003c34:	6003      	str	r3, [r0, #0]
 8003c36:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3a:	bd38      	pop	{r3, r4, r5, pc}
 8003c3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003c3e:	b112      	cbz	r2, 8003c46 <_raise_r+0x1e>
 8003c40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003c44:	b94b      	cbnz	r3, 8003c5a <_raise_r+0x32>
 8003c46:	4620      	mov	r0, r4
 8003c48:	f000 f830 	bl	8003cac <_getpid_r>
 8003c4c:	462a      	mov	r2, r5
 8003c4e:	4601      	mov	r1, r0
 8003c50:	4620      	mov	r0, r4
 8003c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c56:	f000 b817 	b.w	8003c88 <_kill_r>
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d00a      	beq.n	8003c74 <_raise_r+0x4c>
 8003c5e:	1c59      	adds	r1, r3, #1
 8003c60:	d103      	bne.n	8003c6a <_raise_r+0x42>
 8003c62:	2316      	movs	r3, #22
 8003c64:	6003      	str	r3, [r0, #0]
 8003c66:	2001      	movs	r0, #1
 8003c68:	e7e7      	b.n	8003c3a <_raise_r+0x12>
 8003c6a:	2400      	movs	r4, #0
 8003c6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003c70:	4628      	mov	r0, r5
 8003c72:	4798      	blx	r3
 8003c74:	2000      	movs	r0, #0
 8003c76:	e7e0      	b.n	8003c3a <_raise_r+0x12>

08003c78 <raise>:
 8003c78:	4b02      	ldr	r3, [pc, #8]	; (8003c84 <raise+0xc>)
 8003c7a:	4601      	mov	r1, r0
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	f7ff bfd3 	b.w	8003c28 <_raise_r>
 8003c82:	bf00      	nop
 8003c84:	20000004 	.word	0x20000004

08003c88 <_kill_r>:
 8003c88:	b538      	push	{r3, r4, r5, lr}
 8003c8a:	4d07      	ldr	r5, [pc, #28]	; (8003ca8 <_kill_r+0x20>)
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	4604      	mov	r4, r0
 8003c90:	4608      	mov	r0, r1
 8003c92:	4611      	mov	r1, r2
 8003c94:	602b      	str	r3, [r5, #0]
 8003c96:	f000 f833 	bl	8003d00 <_kill>
 8003c9a:	1c43      	adds	r3, r0, #1
 8003c9c:	d102      	bne.n	8003ca4 <_kill_r+0x1c>
 8003c9e:	682b      	ldr	r3, [r5, #0]
 8003ca0:	b103      	cbz	r3, 8003ca4 <_kill_r+0x1c>
 8003ca2:	6023      	str	r3, [r4, #0]
 8003ca4:	bd38      	pop	{r3, r4, r5, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20000308 	.word	0x20000308

08003cac <_getpid_r>:
 8003cac:	f000 b810 	b.w	8003cd0 <_getpid>

08003cb0 <_close>:
 8003cb0:	4b02      	ldr	r3, [pc, #8]	; (8003cbc <_close+0xc>)
 8003cb2:	2258      	movs	r2, #88	; 0x58
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cba:	4770      	bx	lr
 8003cbc:	20000308 	.word	0x20000308

08003cc0 <_fstat>:
 8003cc0:	4b02      	ldr	r3, [pc, #8]	; (8003ccc <_fstat+0xc>)
 8003cc2:	2258      	movs	r2, #88	; 0x58
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cca:	4770      	bx	lr
 8003ccc:	20000308 	.word	0x20000308

08003cd0 <_getpid>:
 8003cd0:	4b02      	ldr	r3, [pc, #8]	; (8003cdc <_getpid+0xc>)
 8003cd2:	2258      	movs	r2, #88	; 0x58
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cda:	4770      	bx	lr
 8003cdc:	20000308 	.word	0x20000308

08003ce0 <_gettimeofday>:
 8003ce0:	4b02      	ldr	r3, [pc, #8]	; (8003cec <_gettimeofday+0xc>)
 8003ce2:	2258      	movs	r2, #88	; 0x58
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cea:	4770      	bx	lr
 8003cec:	20000308 	.word	0x20000308

08003cf0 <_isatty>:
 8003cf0:	4b02      	ldr	r3, [pc, #8]	; (8003cfc <_isatty+0xc>)
 8003cf2:	2258      	movs	r2, #88	; 0x58
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	2000      	movs	r0, #0
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	20000308 	.word	0x20000308

08003d00 <_kill>:
 8003d00:	4b02      	ldr	r3, [pc, #8]	; (8003d0c <_kill+0xc>)
 8003d02:	2258      	movs	r2, #88	; 0x58
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	f04f 30ff 	mov.w	r0, #4294967295
 8003d0a:	4770      	bx	lr
 8003d0c:	20000308 	.word	0x20000308

08003d10 <_lseek>:
 8003d10:	4b02      	ldr	r3, [pc, #8]	; (8003d1c <_lseek+0xc>)
 8003d12:	2258      	movs	r2, #88	; 0x58
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	f04f 30ff 	mov.w	r0, #4294967295
 8003d1a:	4770      	bx	lr
 8003d1c:	20000308 	.word	0x20000308

08003d20 <_read>:
 8003d20:	4b02      	ldr	r3, [pc, #8]	; (8003d2c <_read+0xc>)
 8003d22:	2258      	movs	r2, #88	; 0x58
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	f04f 30ff 	mov.w	r0, #4294967295
 8003d2a:	4770      	bx	lr
 8003d2c:	20000308 	.word	0x20000308

08003d30 <_write>:
 8003d30:	4b02      	ldr	r3, [pc, #8]	; (8003d3c <_write+0xc>)
 8003d32:	2258      	movs	r2, #88	; 0x58
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	f04f 30ff 	mov.w	r0, #4294967295
 8003d3a:	4770      	bx	lr
 8003d3c:	20000308 	.word	0x20000308

08003d40 <_exit>:
 8003d40:	e7fe      	b.n	8003d40 <_exit>
 8003d42:	bf00      	nop

08003d44 <_init>:
 8003d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d46:	bf00      	nop
 8003d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4a:	bc08      	pop	{r3}
 8003d4c:	469e      	mov	lr, r3
 8003d4e:	4770      	bx	lr

08003d50 <_fini>:
 8003d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d52:	bf00      	nop
 8003d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d56:	bc08      	pop	{r3}
 8003d58:	469e      	mov	lr, r3
 8003d5a:	4770      	bx	lr
